"use strict";
var helpers = require("../example/node_modules/@parcel/transformer-react-refresh-wrap/lib/helpers/helpers.js");
var prevRefreshReg = window.$RefreshReg$;
var prevRefreshSig = window.$RefreshSig$;
helpers.prelude(module);
try {
  var _s = $RefreshSig$(), _s2 = $RefreshSig$(), _s3 = $RefreshSig$(), _s4 = $RefreshSig$(), _s5 = $RefreshSig$(), _s6 = $RefreshSig$(), _s7 = $RefreshSig$(), _s8 = $RefreshSig$(), _s9 = $RefreshSig$(), _s10 = $RefreshSig$(), _s11 = $RefreshSig$(), _s12 = $RefreshSig$(), _s13 = $RefreshSig$(), _s14 = $RefreshSig$(), _s15 = $RefreshSig$(), _s16 = $RefreshSig$(), _s17 = $RefreshSig$(), _s18 = $RefreshSig$(), _s19 = $RefreshSig$(), _s20 = $RefreshSig$(), _s21 = $RefreshSig$(), _s22 = $RefreshSig$(), _s23 = $RefreshSig$(), _s24 = $RefreshSig$(), _s25 = $RefreshSig$(), _s26 = $RefreshSig$(), _s27 = $RefreshSig$(), _s28 = $RefreshSig$(), _s29 = $RefreshSig$(), _s30 = $RefreshSig$(), _s31 = $RefreshSig$(), _s32 = $RefreshSig$(), _s33 = $RefreshSig$(), _s34 = $RefreshSig$(), _s35 = $RefreshSig$(), _s36 = $RefreshSig$(), _s37 = $RefreshSig$(), _s38 = $RefreshSig$(), _s41 = $RefreshSig$(), _s42 = $RefreshSig$(), _s43 = $RefreshSig$(), _s44 = $RefreshSig$(), _s45 = $RefreshSig$();
  Object.defineProperty(exports, '__esModule', {
    value: true
  });
  function _interopDefault(ex) {
    return ex && typeof ex === 'object' && ('default' in ex) ? ex['default'] : ex;
  }
  var React = require('react');
  var React__default = _interopDefault(React);
  _c = React__default;
  var react = require('@headlessui/react');
  var reactFontawesome = require('@fortawesome/react-fontawesome');
  var reactPopper = require('react-popper');
  var ReactDOM = require('react-dom');
  var ReactDOM__default = _interopDefault(ReactDOM);
  _c2 = ReactDOM__default;
  var uuid = require('uuid');
  var detectBrowser = require('detect-browser');
  var moment = _interopDefault(require('moment'));
  var reactRouterDom = require('react-router-dom');
  function InfoButton(props) {
    _s();
    var placement = props.placement, children = props.children, className = props.className;
    if (!placement) {
      placement = "auto";
    }
    var popupNode = React.useRef();
    var ctxValue = useInfoButtonCtx(popupNode);
    return React__default.createElement("div", {
      className: "relative text-left ml-4"
    }, React__default.createElement(InfoButtonCtx.Provider, {
      value: ctxValue
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", {
        className: "u-center w-full bg-white font-medium text-primary hover:bg-primary-50 focus:outline-none rounded-full cursor-pointer",
        ref: ref,
        onClick: function onClick(e) {
          e.stopPropagation();
          ctxValue.showInfo();
        }
      }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: "info-circle",
        className: className ? className : ""
      }));
    }), React__default.createElement(Portal, null, React__default.createElement(reactPopper.Popper, {
      placement: placement,
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      }
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style;
      return ctxValue.isVisible ? React__default.createElement("div", {
        className: "info-popover z-50 origin-top-right absolute font-normal p-4 w-80 rounded-md shadow-md bg-white divide-y u-black-ring divide-gray-100 focus:outline-none",
        // @ts-ignore
        style: style,
        ref: ref
      }, children) : null;
    })))));
  }
  _s(InfoButton, "DUZlfpnx/wFQf+VbiBZthFDTva8=", false, function () {
    return [useInfoButtonCtx];
  });
  _c3 = InfoButton;
  function Portal(props) {
    _s2();
    var children = props.children;
    var _useState = React.useState(false), mounted = _useState[0], setMounted = _useState[1];
    React.useEffect(function () {
      return setMounted(true);
    }, []);
    if (!mounted) return null;
    return ReactDOM.createPortal(children, document.body);
  }
  _s2(Portal, "EEbBbH2V7/JbIWkmnfgP/KlFBtU=");
  _c4 = Portal;
  var InfoButtonCtx = /*#__PURE__*/React.createContext({
    isVisible: false,
    showInfo: function showInfo() {}
  });
  function useInfoButtonCtx(ref) {
    _s3();
    var _useState2 = React.useState(false), isVisible = _useState2[0], setVisible = _useState2[1];
    React.useEffect(function () {
      function mouseDownListener(e) {
        var targetAsNode = e.target;
        // @ts-ignore
        if (ref.current && !ref.current.contains(targetAsNode)) {
          setVisible(false);
        }
      }
      if (isVisible) {
        document.addEventListener("mousedown", mouseDownListener);
      }
      return function () {
        document.removeEventListener("mousedown", mouseDownListener);
      };
    }, [isVisible]);
    return {
      isVisible: isVisible,
      showInfo: function showInfo() {
        return setVisible(!isVisible);
      }
    };
  }
  _s3(useInfoButtonCtx, "KKBp5oMLPWF/uV300QInYpQfB5Q=");
  function Switch(props) {
    var checked = props.checked, label = props.label, disabled = props.disabled, info = props.info, containerClassName = props.containerClassName;
    return React__default.createElement("div", {
      className: 'u-vertical-center flex-row space-x-4 ' + (containerClassName ? containerClassName : ''),
      onClick: function onClick() {
        if (!disabled) {
          props.onChange();
        }
      }
    }, React__default.createElement(react.Switch, {
      checked: checked,
      onChange: function onChange() {},
      disabled: disabled,
      className: ' relative inline-flex flex-shrink-0 h-6.5 w-11 border-2 border-transparent rounded-full transition-colors ease-in-out duration-200  ' + (disabled ? 'pointer-events-none ' : ' hover:border-primary cursor-pointer ') + (checked ? disabled ? 'bg-gray-400' : 'bg-primary' : 'bg-gray-200')
    }, React__default.createElement("span", {
      className: "sr-only"
    }, "Use setting"), React__default.createElement("span", {
      className: 'pointer-events-none relative inline-block h-5 w-5 rounded-full bg-white shadow transform ring-0 transition ease-in-out duration-200 ' + (checked ? 'translate-x-5' : 'translate-x-0')
    }, React__default.createElement("span", {
      className: 'absolute inset-0 h-full w-full u-center transition-opacity ' + (checked ? 'opacity-0 ease-out duration-100' : 'opacity-100 ease-in duration-200'),
      "aria-hidden": "true"
    }, React__default.createElement("svg", {
      className: "h-3 w-3 text-gray-400",
      fill: "none",
      viewBox: "0 0 12 12"
    }, React__default.createElement("path", {
      d: "M4 8l2-2m0 0l2-2M6 6L4 4m2 2l2 2",
      stroke: "currentColor",
      strokeWidth: 2,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }))), React__default.createElement("span", {
      className: 'absolute inset-0 h-full w-full u-center transition-opacity ' + (checked ? 'opacity-100 ease-in duration-200' : 'opacity-0 ease-out duration-100'),
      "aria-hidden": "true"
    }, React__default.createElement("svg", {
      className: "h-3 w-3 " + (disabled ? 'text-gray-600' : 'text-primary-600') + " ",
      fill: "currentColor",
      viewBox: "0 0 12 12"
    }, React__default.createElement("path", {
      d: "M3.707 5.293a1 1 0 00-1.414 1.414l1.414-1.414zM5 8l-.707.707a1 1 0 001.414 0L5 8zm4.707-3.293a1 1 0 00-1.414-1.414l1.414 1.414zm-7.414 2l2 2 1.414-1.414-2-2-1.414 1.414zm3.414 2l4-4-1.414-1.414-4 4 1.414 1.414z"
    }))))), label && React__default.createElement("div", {
      className: disabled ? 'text-gray-500' : 'cursor-pointer'
    }, label), info && React__default.createElement(InfoButton, null, info));
  }
  _c5 = Switch;
  function _regeneratorRuntime() {
    _regeneratorRuntime = function () {
      return exports;
    };
    var exports = {}, Op = Object.prototype, hasOwn = Op.hasOwnProperty, defineProperty = Object.defineProperty || (function (obj, key, desc) {
      obj[key] = desc.value;
    }), $Symbol = "function" == typeof Symbol ? Symbol : {}, iteratorSymbol = $Symbol.iterator || "@@iterator", asyncIteratorSymbol = $Symbol.asyncIterator || "@@asyncIterator", toStringTagSymbol = $Symbol.toStringTag || "@@toStringTag";
    function define(obj, key, value) {
      return (Object.defineProperty(obj, key, {
        value: value,
        enumerable: !0,
        configurable: !0,
        writable: !0
      }), obj[key]);
    }
    try {
      define({}, "");
    } catch (err) {
      define = function (obj, key, value) {
        return obj[key] = value;
      };
    }
    function wrap(innerFn, outerFn, self, tryLocsList) {
      var protoGenerator = outerFn && outerFn.prototype instanceof Generator ? outerFn : Generator, generator = Object.create(protoGenerator.prototype), context = new Context(tryLocsList || []);
      return (defineProperty(generator, "_invoke", {
        value: makeInvokeMethod(innerFn, self, context)
      }), generator);
    }
    function tryCatch(fn, obj, arg) {
      try {
        return {
          type: "normal",
          arg: fn.call(obj, arg)
        };
      } catch (err) {
        return {
          type: "throw",
          arg: err
        };
      }
    }
    exports.wrap = wrap;
    var ContinueSentinel = {};
    function Generator() {}
    function GeneratorFunction() {}
    function GeneratorFunctionPrototype() {}
    var IteratorPrototype = {};
    define(IteratorPrototype, iteratorSymbol, function () {
      return this;
    });
    var getProto = Object.getPrototypeOf, NativeIteratorPrototype = getProto && getProto(getProto(values([])));
    NativeIteratorPrototype && NativeIteratorPrototype !== Op && hasOwn.call(NativeIteratorPrototype, iteratorSymbol) && (IteratorPrototype = NativeIteratorPrototype);
    var Gp = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(IteratorPrototype);
    function defineIteratorMethods(prototype) {
      ["next", "throw", "return"].forEach(function (method) {
        define(prototype, method, function (arg) {
          return this._invoke(method, arg);
        });
      });
    }
    function AsyncIterator(generator, PromiseImpl) {
      function invoke(method, arg, resolve, reject) {
        var record = tryCatch(generator[method], generator, arg);
        if ("throw" !== record.type) {
          var result = record.arg, value = result.value;
          return value && "object" == typeof value && hasOwn.call(value, "__await") ? PromiseImpl.resolve(value.__await).then(function (value) {
            invoke("next", value, resolve, reject);
          }, function (err) {
            invoke("throw", err, resolve, reject);
          }) : PromiseImpl.resolve(value).then(function (unwrapped) {
            (result.value = unwrapped, resolve(result));
          }, function (error) {
            return invoke("throw", error, resolve, reject);
          });
        }
        reject(record.arg);
      }
      var previousPromise;
      defineProperty(this, "_invoke", {
        value: function (method, arg) {
          function callInvokeWithMethodAndArg() {
            return new PromiseImpl(function (resolve, reject) {
              invoke(method, arg, resolve, reject);
            });
          }
          return previousPromise = previousPromise ? previousPromise.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg();
        }
      });
    }
    function makeInvokeMethod(innerFn, self, context) {
      var state = "suspendedStart";
      return function (method, arg) {
        if ("executing" === state) throw new Error("Generator is already running");
        if ("completed" === state) {
          if ("throw" === method) throw arg;
          return doneResult();
        }
        for ((context.method = method, context.arg = arg); ; ) {
          var delegate = context.delegate;
          if (delegate) {
            var delegateResult = maybeInvokeDelegate(delegate, context);
            if (delegateResult) {
              if (delegateResult === ContinueSentinel) continue;
              return delegateResult;
            }
          }
          if ("next" === context.method) context.sent = context._sent = context.arg; else if ("throw" === context.method) {
            if ("suspendedStart" === state) throw (state = "completed", context.arg);
            context.dispatchException(context.arg);
          } else "return" === context.method && context.abrupt("return", context.arg);
          state = "executing";
          var record = tryCatch(innerFn, self, context);
          if ("normal" === record.type) {
            if ((state = context.done ? "completed" : "suspendedYield", record.arg === ContinueSentinel)) continue;
            return {
              value: record.arg,
              done: context.done
            };
          }
          "throw" === record.type && (state = "completed", context.method = "throw", context.arg = record.arg);
        }
      };
    }
    function maybeInvokeDelegate(delegate, context) {
      var methodName = context.method, method = delegate.iterator[methodName];
      if (undefined === method) return (context.delegate = null, "throw" === methodName && delegate.iterator.return && (context.method = "return", context.arg = undefined, maybeInvokeDelegate(delegate, context), "throw" === context.method) || "return" !== methodName && (context.method = "throw", context.arg = new TypeError("The iterator does not provide a '" + methodName + "' method")), ContinueSentinel);
      var record = tryCatch(method, delegate.iterator, context.arg);
      if ("throw" === record.type) return (context.method = "throw", context.arg = record.arg, context.delegate = null, ContinueSentinel);
      var info = record.arg;
      return info ? info.done ? (context[delegate.resultName] = info.value, context.next = delegate.nextLoc, "return" !== context.method && (context.method = "next", context.arg = undefined), context.delegate = null, ContinueSentinel) : info : (context.method = "throw", context.arg = new TypeError("iterator result is not an object"), context.delegate = null, ContinueSentinel);
    }
    function pushTryEntry(locs) {
      var entry = {
        tryLoc: locs[0]
      };
      ((1 in locs) && (entry.catchLoc = locs[1]), (2 in locs) && (entry.finallyLoc = locs[2], entry.afterLoc = locs[3]), this.tryEntries.push(entry));
    }
    function resetTryEntry(entry) {
      var record = entry.completion || ({});
      (record.type = "normal", delete record.arg, entry.completion = record);
    }
    function Context(tryLocsList) {
      (this.tryEntries = [{
        tryLoc: "root"
      }], tryLocsList.forEach(pushTryEntry, this), this.reset(!0));
    }
    function values(iterable) {
      if (iterable) {
        var iteratorMethod = iterable[iteratorSymbol];
        if (iteratorMethod) return iteratorMethod.call(iterable);
        if ("function" == typeof iterable.next) return iterable;
        if (!isNaN(iterable.length)) {
          var i = -1, next = function next() {
            for (; ++i < iterable.length; ) if (hasOwn.call(iterable, i)) return (next.value = iterable[i], next.done = !1, next);
            return (next.value = undefined, next.done = !0, next);
          };
          return next.next = next;
        }
      }
      return {
        next: doneResult
      };
    }
    function doneResult() {
      return {
        value: undefined,
        done: !0
      };
    }
    return (GeneratorFunction.prototype = GeneratorFunctionPrototype, defineProperty(Gp, "constructor", {
      value: GeneratorFunctionPrototype,
      configurable: !0
    }), defineProperty(GeneratorFunctionPrototype, "constructor", {
      value: GeneratorFunction,
      configurable: !0
    }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, toStringTagSymbol, "GeneratorFunction"), exports.isGeneratorFunction = function (genFun) {
      var ctor = "function" == typeof genFun && genFun.constructor;
      return !!ctor && (ctor === GeneratorFunction || "GeneratorFunction" === (ctor.displayName || ctor.name));
    }, exports.mark = function (genFun) {
      return (Object.setPrototypeOf ? Object.setPrototypeOf(genFun, GeneratorFunctionPrototype) : (genFun.__proto__ = GeneratorFunctionPrototype, define(genFun, toStringTagSymbol, "GeneratorFunction")), genFun.prototype = Object.create(Gp), genFun);
    }, exports.awrap = function (arg) {
      return {
        __await: arg
      };
    }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, asyncIteratorSymbol, function () {
      return this;
    }), exports.AsyncIterator = AsyncIterator, exports.async = function (innerFn, outerFn, self, tryLocsList, PromiseImpl) {
      void 0 === PromiseImpl && (PromiseImpl = Promise);
      var iter = new AsyncIterator(wrap(innerFn, outerFn, self, tryLocsList), PromiseImpl);
      return exports.isGeneratorFunction(outerFn) ? iter : iter.next().then(function (result) {
        return result.done ? result.value : iter.next();
      });
    }, defineIteratorMethods(Gp), define(Gp, toStringTagSymbol, "Generator"), define(Gp, iteratorSymbol, function () {
      return this;
    }), define(Gp, "toString", function () {
      return "[object Generator]";
    }), exports.keys = function (val) {
      var object = Object(val), keys = [];
      for (var key in object) keys.push(key);
      return (keys.reverse(), function next() {
        for (; keys.length; ) {
          var key = keys.pop();
          if ((key in object)) return (next.value = key, next.done = !1, next);
        }
        return (next.done = !0, next);
      });
    }, exports.values = values, Context.prototype = {
      constructor: Context,
      reset: function (skipTempReset) {
        if ((this.prev = 0, this.next = 0, this.sent = this._sent = undefined, this.done = !1, this.delegate = null, this.method = "next", this.arg = undefined, this.tryEntries.forEach(resetTryEntry), !skipTempReset)) for (var name in this) "t" === name.charAt(0) && hasOwn.call(this, name) && !isNaN(+name.slice(1)) && (this[name] = undefined);
      },
      stop: function () {
        this.done = !0;
        var rootRecord = this.tryEntries[0].completion;
        if ("throw" === rootRecord.type) throw rootRecord.arg;
        return this.rval;
      },
      dispatchException: function (exception) {
        if (this.done) throw exception;
        var context = this;
        function handle(loc, caught) {
          return (record.type = "throw", record.arg = exception, context.next = loc, caught && (context.method = "next", context.arg = undefined), !!caught);
        }
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i], record = entry.completion;
          if ("root" === entry.tryLoc) return handle("end");
          if (entry.tryLoc <= this.prev) {
            var hasCatch = hasOwn.call(entry, "catchLoc"), hasFinally = hasOwn.call(entry, "finallyLoc");
            if (hasCatch && hasFinally) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            } else if (hasCatch) {
              if (this.prev < entry.catchLoc) return handle(entry.catchLoc, !0);
            } else {
              if (!hasFinally) throw new Error("try statement without catch or finally");
              if (this.prev < entry.finallyLoc) return handle(entry.finallyLoc);
            }
          }
        }
      },
      abrupt: function (type, arg) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc <= this.prev && hasOwn.call(entry, "finallyLoc") && this.prev < entry.finallyLoc) {
            var finallyEntry = entry;
            break;
          }
        }
        finallyEntry && ("break" === type || "continue" === type) && finallyEntry.tryLoc <= arg && arg <= finallyEntry.finallyLoc && (finallyEntry = null);
        var record = finallyEntry ? finallyEntry.completion : {};
        return (record.type = type, record.arg = arg, finallyEntry ? (this.method = "next", this.next = finallyEntry.finallyLoc, ContinueSentinel) : this.complete(record));
      },
      complete: function (record, afterLoc) {
        if ("throw" === record.type) throw record.arg;
        return ("break" === record.type || "continue" === record.type ? this.next = record.arg : "return" === record.type ? (this.rval = this.arg = record.arg, this.method = "return", this.next = "end") : "normal" === record.type && afterLoc && (this.next = afterLoc), ContinueSentinel);
      },
      finish: function (finallyLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.finallyLoc === finallyLoc) return (this.complete(entry.completion, entry.afterLoc), resetTryEntry(entry), ContinueSentinel);
        }
      },
      catch: function (tryLoc) {
        for (var i = this.tryEntries.length - 1; i >= 0; --i) {
          var entry = this.tryEntries[i];
          if (entry.tryLoc === tryLoc) {
            var record = entry.completion;
            if ("throw" === record.type) {
              var thrown = record.arg;
              resetTryEntry(entry);
            }
            return thrown;
          }
        }
        throw new Error("illegal catch attempt");
      },
      delegateYield: function (iterable, resultName, nextLoc) {
        return (this.delegate = {
          iterator: values(iterable),
          resultName: resultName,
          nextLoc: nextLoc
        }, "next" === this.method && (this.arg = undefined), ContinueSentinel);
      }
    }, exports);
  }
  function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) {
    try {
      var info = gen[key](arg);
      var value = info.value;
    } catch (error) {
      reject(error);
      return;
    }
    if (info.done) {
      resolve(value);
    } else {
      Promise.resolve(value).then(_next, _throw);
    }
  }
  function _asyncToGenerator(fn) {
    return function () {
      var self = this, args = arguments;
      return new Promise(function (resolve, reject) {
        var gen = fn.apply(self, args);
        function _next(value) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value);
        }
        function _throw(err) {
          asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err);
        }
        _next(undefined);
      });
    };
  }
  function _extends() {
    _extends = Object.assign ? Object.assign.bind() : function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];
        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }
      return target;
    };
    return _extends.apply(this, arguments);
  }
  function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    _setPrototypeOf(subClass, superClass);
  }
  function _setPrototypeOf(o, p) {
    _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) {
      o.__proto__ = p;
      return o;
    };
    return _setPrototypeOf(o, p);
  }
  function _objectDestructuringEmpty(obj) {
    if (obj == null) throw new TypeError("Cannot destructure " + obj);
  }
  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;
    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }
    return target;
  }
  function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || (/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/).test(n)) return _arrayLikeToArray(o, minLen);
  }
  function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
    return arr2;
  }
  function _createForOfIteratorHelperLoose(o, allowArrayLike) {
    var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"];
    if (it) return (it = it.call(o)).next.bind(it);
    if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
      if (it) o = it;
      var i = 0;
      return function () {
        if (i >= o.length) return {
          done: true
        };
        return {
          done: false,
          value: o[i++]
        };
      };
    }
    throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
  }
  // Implementation
  function Success(props) {
    return React__default.createElement(BaseMessage, Object.assign({}, props, {
      variant: "success"
    }));
  }
  _c6 = Success;
  function Error$1(props) {
    return React__default.createElement(BaseMessage, Object.assign({}, props, {
      variant: "error"
    }));
  }
  _c7 = Error$1;
  function Warning(props) {
    return React__default.createElement(BaseMessage, Object.assign({}, props, {
      variant: "warning"
    }));
  }
  _c8 = Warning;
  function Info(props) {
    return React__default.createElement(BaseMessage, Object.assign({}, props, {
      variant: "info"
    }));
  }
  _c9 = Info;
  function Instruction(props) {
    var className = props.className ? props.className : '';
    return React__default.createElement("p", {
      className: (props.noPadding ? '' : ' py-3 ') + (props.center ? ' text-center ' : '') + className
    }, props.children);
  }
  _c10 = Instruction;
  function BaseMessage(props) {
    _s4();
    var children = props.children, variant = props.variant, noPadding = props.noPadding, shadow = props.shadow, close = props.close;
    var _useState = React.useState(true), show = _useState[0], setShow = _useState[1];
    var color = 'gray';
    var icon;
    if (variant === 'success') {
      color = 'green';
      icon = 'check-circle';
    } else if (variant === 'error') {
      color = 'red';
      icon = 'times-circle';
    } else if (variant === 'warning') {
      color = 'yellow';
      icon = 'exclamation-circle';
    } else if (variant === 'info') {
      color = 'primary';
    }
    return React__default.createElement(React__default.Fragment, null, show && React__default.createElement("div", {
      className: 'rounded-md border border-' + color + '-200 bg-' + color + '-50 ' + (noPadding ? '' : ' p-4 my-4 ') + (shadow ? ' shadow-lg ' : '')
    }, React__default.createElement("div", {
      className: 'flex justify-between items-center'
    }, React__default.createElement("div", {
      className: "u-vertical-center"
    }, icon && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      className: 'mr-3 h-5 w-5 text-' + color + '-400',
      "aria-hidden": "true",
      icon: icon
    }), React__default.createElement("div", null, React__default.createElement("div", {
      className: 'text-' + color + '-700'
    }, children))), close && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: 'times',
      className: 'text-' + color + '-400 cursor-pointer',
      onClick: function onClick() {
        return setShow(!show);
      }
    }))));
  }
  _s4(BaseMessage, "xG5Dry35/VCgoNgGCFY9DhTKjPQ=");
  _c11 = BaseMessage;
  var Message = {
    Success: Success,
    Warning: Warning,
    Error: Error$1,
    Info: Info,
    Instruction: Instruction
  };
  function useMediaQuery(query) {
    _s5();
    var getMatches = function getMatches(query) {
      // Prevents SSR issues
      if (typeof window !== "undefined") {
        return window.matchMedia(query).matches;
      }
      return false;
    };
    var _useState = React.useState(getMatches(query)), matches = _useState[0], setMatches = _useState[1];
    function handleChange() {
      setMatches(getMatches(query));
    }
    React.useEffect(function () {
      var matchMedia = window.matchMedia(query);
      // Triggered at the first client-side load and if query changes
      handleChange();
      // Listen matchMedia
      if (matchMedia.addListener) {
        matchMedia.addListener(handleChange);
      } else {
        matchMedia.addEventListener("change", handleChange);
      }
      return function () {
        if (matchMedia.removeListener) {
          matchMedia.removeListener(handleChange);
        } else {
          matchMedia.removeEventListener("change", handleChange);
        }
      };
    }, [query]);
    return matches;
  }
  _s5(useMediaQuery, "d6PfX72aBeWepARA5j68VHpe0kk=");
  function shortenFromNow(str) {
    if (str === "a few seconds ago") str = "now";
    str = str.replaceAll("hours", "h").replaceAll("minutes", "m").replaceAll("seconds", "s");
    str = str.replaceAll("hour", "h").replaceAll("minute", "m").replaceAll("second", "s");
    str = str.replaceAll("days", "d").replaceAll("day", "d");
    str = str.replaceAll("months", "mo").replaceAll("month", "mo");
    str = str.replaceAll(" ago", "").replaceAll("an ", " 1 ").replaceAll("a ", " 1 ");
    str = str.replaceAll(" ", "");
    if (str === "in1fews") {
      // happens when server is a few seconds ahead of machine
      return "now";
    }
    return str;
  }
  function pgFormatDate(date) {
    if (!date) return "";
    var momentDate = moment(date);
    return momentDate.format("YYYY-MM-DD HH:mm:ssZ");
  }
  function humanFormatTime(date, includeSeconds) {
    if (!date) return "";
    var momentDate = moment(date);
    if (momentDate.isValid()) {
      return momentDate.format("HH:mm" + (includeSeconds ? ":ss" : ""));
    } else {
      return date;
    }
  }
  function humanFormatDateTime(date, includeSeconds) {
    if (!date) return "";
    var momentDate = moment(date);
    return momentDate.format("D MMM YYYY HH:mm" + (includeSeconds ? ":ss" : ""));
  }
  function humanFormatDateTimeToFormat(date, format) {
    if (!date) return "";
    var momentDate = moment(date);
    return momentDate.format(format);
  }
  function humanFormatDate(date) {
    if (!date) return "";
    var momentDate = moment(date);
    return momentDate.format("D MMM YYYY");
  }
  function humanFormatDateWithDay(date) {
    if (!date) return "";
    var momentDate = moment(date);
    return momentDate.format("ddd, D MMM YYYY");
  }
  function humanFormatBetweenDates(dateFrom, dateTo) {
    var _dateFrom, _dateTo;
    if (((_dateFrom = dateFrom) == null ? void 0 : _dateFrom.indexOf("T")) > -1) {
      dateFrom = humanFormatDateTime(dateFrom);
    }
    if (((_dateTo = dateTo) == null ? void 0 : _dateTo.indexOf("T")) > -1) {
      dateTo = humanFormatDateTime(dateTo);
    }
    return {
      from: dateFrom,
      to: dateTo
    };
  }
  // returns amount of minutes between two dates where startDate is chronologically first and endDate is chronologically last
  function getMinutesBetweenDates(startDate, endDate) {
    if (!startDate || !endDate) return 0;
    var momentStartDate = moment(startDate);
    var momentEndDate = moment(endDate);
    var duration = moment.duration(momentEndDate.diff(momentStartDate));
    return duration.asMinutes();
  }
  function formatDateTodayTomorrow(dateString) {
    var date = moment(dateString);
    if (date.isSame(moment(), "day")) {
      return "Today, " + humanFormatDate(date);
    }
    if (date.isSame(moment().add(1, "days"), "day")) {
      return "Tomorrow, " + humanFormatDate(date);
    }
    return humanFormatDateWithDay(date);
  }
  function timeslotAsInt(time) {
    if (!time) return 0;
    return parseInt(time.replace(":", ""));
  }
  function getTimeslots(startTime, endTime, removeFirst, removeLast) {
    var startTimeClone = clone(startTime);
    var endTimeClone = clone(endTime);
    var minHour;
    var maxHour;
    var minHourExcludeHour;
    var maxHourExcludeHalfHour;
    if (!startTimeClone) {
      startTimeClone = "08:00";
    }
    if (!endTimeClone) {
      endTimeClone = "17:00";
    }
    minHour = parseInt(startTimeClone.substr(0, 2));
    maxHour = parseInt(endTimeClone.substr(0, 2));
    if (minHour < 8 || minHour > 17 || minHour > maxHour) {
      minHour = 8;
      startTimeClone = "08:00";
    }
    if (maxHour < 8 || maxHour > 17 || maxHour < minHour) {
      maxHour = 17;
      endTimeClone = "17:00";
    }
    minHourExcludeHour = parseInt(startTimeClone.substr(3, 2)) > 0;
    maxHourExcludeHalfHour = parseInt(endTimeClone.substr(3, 2)) === 0;
    var timeslots = [];
    for (var i = minHour; i <= maxHour; i++) {
      if (i !== minHour || !minHourExcludeHour) {
        timeslots.push({
          id: i,
          display: (i < 10 ? "0" + i : i) + ":00"
        });
      }
      if (i !== maxHour || !maxHourExcludeHalfHour) {
        timeslots.push({
          id: i + 0.5,
          display: (i < 10 ? "0" + i : i) + ":30"
        });
      }
    }
    if (removeFirst) {
      timeslots.shift();
    }
    if (removeLast) {
      timeslots.pop();
    }
    return timeslots;
  }
  function orderDays(days) {
    // order the days
    var sorter = {
      monday: 1,
      tuesday: 2,
      wednesday: 3,
      thursday: 4,
      friday: 5,
      saturday: 6,
      sunday: 7
    };
    days.sort(function sortByDay(a, b) {
      var day1 = a.name.toLowerCase();
      var day2 = b.name.toLowerCase();
      return sorter[day1] - sorter[day2];
    });
  }
  var dateUtils = {
    __proto__: null,
    shortenFromNow: shortenFromNow,
    pgFormatDate: pgFormatDate,
    humanFormatTime: humanFormatTime,
    humanFormatDateTime: humanFormatDateTime,
    humanFormatDateTimeToFormat: humanFormatDateTimeToFormat,
    humanFormatDate: humanFormatDate,
    humanFormatDateWithDay: humanFormatDateWithDay,
    humanFormatBetweenDates: humanFormatBetweenDates,
    getMinutesBetweenDates: getMinutesBetweenDates,
    formatDateTodayTomorrow: formatDateTodayTomorrow,
    timeslotAsInt: timeslotAsInt,
    orderDays: orderDays,
    getTimeslots: getTimeslots
  };
  // Used to check current app version
  function capitalize(str) {
    if (!str) return '';
    return str.charAt(0).toUpperCase() + str.slice(1);
  }
  function getUUIDFilename(url) {
    var lastDotIndex = url.lastIndexOf('.');
    var lastQuestionIndex = url.lastIndexOf('?');
    var extension;
    if (lastDotIndex >= 0) {
      if (lastQuestionIndex >= 0) {
        extension = url.substring(lastDotIndex, lastQuestionIndex);
      } else {
        extension = url.substring(lastDotIndex);
      }
    }
    if (!extension) {
      extension = '.png';
    }
    return uuid.v4() + extension;
  }
  function isCsv(file) {
    if (!file) return false;
    var validationRegex = /(\.csv)$/i;
    return validationRegex.exec(file.name.toLowerCase());
  }
  function isImage(file) {
    if (!file) {
      return false;
    }
    var validationRegex = /(\.jpg|\.jpeg|\.png)$/i;
    return validationRegex.exec(file.name.toLowerCase());
  }
  function isKML(file) {
    if (!file) return false;
    var validationRegex = /(\.kml)$/i;
    return validationRegex.exec(file.name.toLowerCase());
  }
  function isPdf(file) {
    if (!file) return false;
    var validationRegex = /(\.pdf)$/i;
    return validationRegex.exec(file.name.toLowerCase());
  }
  function reverseArray(arr) {
    var newArray = [];
    for (var i = arr.length - 1; i >= 0; i--) {
      newArray.push(arr[i]);
    }
    return newArray;
  }
  function serialize(obj) {
    var str = '?' + Object.keys(obj).reduce(function (a, k) {
      var value = obj[k];
      if (Array.isArray(value)) {
        value = encodeURIComponent(JSON.stringify(value));
      } else {
        value = encodeURIComponent(value);
      }
      a.push(k + '=' + value);
      return a;
    }, []).join('&');
    return str;
  }
  function checkTokenExpired(_store, response) {
    if (response.status === 403 || response.status === 401) {
      console.log('Received 403 or 401, checking for expired token');
      console.log('AWS error', response.headers.get('x-amzn-errortype'));
      if (response.headers.get('x-amzn-errortype') === 'ExpiredTokenException') {
        localStorage.removeItem('impersonated_username');
        console.log('Token expired');
      }
    }
  }
  function checkAccountClosed(store, response) {
    if (response.status === 423) {
      console.log('Account closed, redirecting');
      store.emitter.emit('accountClosed');
    }
  }
  function checkMaintenanceMode(store, response) {
    if (response.status === 418) {
      // I'm a teapot response from the lambda
      store.emitter.emit('maintenanceMode');
    }
  }
  function getErrorString(result) {
    if (!result) {
      return '';
    }
    if (result.response) {
      result = result.response;
      if (result.data) {
        result = result.data;
      }
    }
    try {
      result = JSON.parse(result);
    } catch (_) {}
    if (typeof result === 'object') {
      if (result.error && result.message) {
        return result.message;
      } else if (!result.error) {
        if (!result.message) {
          return result ? result : '';
        }
        return result.message;
      } else if (result.error && result.error.message) {
        try {
          result = JSON.parse(result.error.message);
          if (result.message) {
            return result.message;
          }
          return result;
        } catch (_) {}
        return result.error.message;
      } else if (!result.error.message) {
        return result.error;
      }
      try {
        var json = JSON.parse(result.error.message);
        if (json.error) {
          return json.error;
        }
        return result.error.message;
      } catch (e) {
        return result.error.message;
      }
    } else {
      return result;
    }
  }
  function getError(result, hideConsoleLog) {
    var _error3;
    var error = getErrorString(result);
    if (error) {
      var _error2;
      if (typeof error === 'object') {
        var _error;
        error = (_error = error) == null ? void 0 : _error.error;
      }
      if (error === 'The user aborted a request.') {
        return '';
      }
      if (!hideConsoleLog) {
        console.log('Error', error, result.stack);
      }
      if (((_error2 = error) == null ? void 0 : _error2.toLowerCase()) === 'service unavailable') {
        return 'Service unavailable. Please check your Internet connection.';
      }
      if (typeof error === 'string') {
        error = error.replaceAll('Username/client id combination', 'Email');
        // AWS terminology
        error = error.replaceAll('Failed to fetch', 'There is a problem with your internet connectivity');
      } else {
        error = JSON.stringify(error);
      }
    }
    if (error && ((_error3 = error) == null ? void 0 : _error3.trim()) === 'the account has been closed') return '';
    // handled by the 423 code
    return capitalize(error);
  }
  function showError(error) {
    var errorMessage = getError(error, true);
    if (!errorMessage) {
      return null;
    }
    return React__default.createElement(Message.Error, null, errorMessage);
  }
  function shorten(str, count) {
    if (!str) {
      return '';
    }
    if (str.length < count) {
      return str;
    }
    return str.substr(0, count - 3) + '...';
  }
  function humanReadableToKey(string) {
    if (!string) {
      return '';
    }
    var key = string.replaceAll(' ', '_').toLowerCase();
    return key;
  }
  function keyToHumanReadable(key) {
    if (!key) return '';
    var keyHumanReadable = key.replaceAll('_', ' ');
    keyHumanReadable = keyHumanReadable.replaceAll('sender', 'collection');
    keyHumanReadable = keyHumanReadable.replaceAll('receiver', 'delivery');
    keyHumanReadable = keyHumanReadable.replaceAll('-', ' ');
    // camelcase to sentence case
    keyHumanReadable = keyHumanReadable.replace(/([A-Z])/g, ' $1').trim();
    var sentenceCaseKey = keyHumanReadable.charAt(0).toUpperCase() + keyHumanReadable.slice(1).toLowerCase();
    sentenceCaseKey = sentenceCaseKey.replaceAll('Bob box', 'Bob Box');
    sentenceCaseKey = sentenceCaseKey.replaceAll('Bob pay', 'Bob Pay');
    sentenceCaseKey = sentenceCaseKey.replaceAll('Bob go', 'Bob Go');
    return sentenceCaseKey;
  }
  function cleanURL(url) {
    if (!url) return '';
    var cleanURL = url.replace('http://', 'https://').trim();
    if (!cleanURL.startsWith('https://')) {
      cleanURL = 'https://' + cleanURL;
    }
    return cleanURL;
  }
  function cleanPhone(phone, removeSpaces) {
    if (!phone) return '';
    var countryCode = '27';
    var cleanPhone = phone.replaceAll(' ', '');
    // convert e.g. 0027 to +27
    if (cleanPhone.indexOf('00' + countryCode) === 0) {
      cleanPhone = '+27' + cleanPhone.substr(4);
    }
    // convert e.g. 076 to +2776
    if (cleanPhone.indexOf('0') === 0) {
      cleanPhone = '+27' + cleanPhone.substr(1);
    }
    if (cleanPhone.length === 12) {
      cleanPhone = cleanPhone.substr(0, 3) + ' ' + cleanPhone.substr(3, 2) + ' ' + cleanPhone.substr(5, 3) + ' ' + cleanPhone.substr(8, 4);
    }
    if (removeSpaces) {
      cleanPhone = cleanPhone.replaceAll(' ', '');
    }
    return cleanPhone;
  }
  function cleanUsername(username) {
    // eslint-disable-next-line
    var onlyAscii = username.replace(/[^\x00-\x7F]/g, '');
    var nonWhitespace = onlyAscii.replace(/\s/g, '');
    return nonWhitespace.toLowerCase();
  }
  function defaultString(str) {
    if (!str) return '';
    return str;
  }
  function padLeadingZeros(num, size) {
    var s = num + '';
    while (s.length < size) s = '0' + s;
    return s;
  }
  function clone(obj) {
    if (!obj) return;
    return JSON.parse(JSON.stringify(obj));
  }
  function swapValues(obj, prop1, prop2) {
    var originalProp1 = obj[prop1];
    obj[prop1] = obj[prop2];
    obj[prop2] = originalProp1;
  }
  function isScreenDesktopSize() {
    _s6();
    // check if screen size is less than 992px (smaller than 992 gets rearranged for mobile)
    return useMediaQuery('( min-width: 992px)');
  }
  _s6(isScreenDesktopSize, "AGUsWXV/IGWEYGrGyhqugaEb9zc=", false, function () {
    return [useMediaQuery];
  });
  function kebabCaseToSentenceCase(originalString) {
    var formattedString = originalString.replaceAll('-', ' ');
    formattedString = capitalize(formattedString.toLowerCase());
    return formattedString;
  }
  var browserVersions = {
    chrome: '97.0.4692',
    crios: '97.0.4692',
    safari: '15.4',
    ios: '15.4',
    firefox: '96.0',
    fxios: '96.0',
    edge: '97.0.1072.55',
    'edge-chromium': '97.0.1072.55',
    'edge-ios': '97.0.1072.55'
  };
  function isBrowserOutdated(browserName, browserVersion) {
    var recentBrowserVersions = browserVersions;
    try {
      if (recentBrowserVersions[browserName]) {
        var recentVersion = Number(recentBrowserVersions[browserName].split('.')[0]);
        var _browserVersion = Number(browserVersion.split('.')[0]);
        if (recentVersion > _browserVersion) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    } catch (e) {
      console.log('isBrowserOutdated:', e);
      return false;
    }
  }
  function getDataUrl(_x) {
    return _getDataUrl.apply(this, arguments);
  }
  function _getDataUrl() {
    _getDataUrl = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(file) {
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            return _context2.abrupt("return", new Promise(function (resolve, reject) {
              try {
                var reader = new FileReader();
                reader.readAsDataURL(file);
                reader.onloadend = function () {
                  resolve(reader.result);
                };
              } catch (e) {
                reject(e);
              }
            }));
          case 1:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _getDataUrl.apply(this, arguments);
  }
  function displayString(str) {
    if (str && str.length > 0) {
      return str;
    }
    return '–';
  }
  function isNotEmpty(value) {
    return value !== null && value !== undefined && value !== '';
  }
  function getBrowserIcon(browserName) {
    var icon = 'window-maximize';
    switch (browserName.toLowerCase()) {
      case 'chrome':
      case 'crios':
        icon = 'fa-brands fa-chrome';
        break;
      case 'fxios':
      case 'firefox':
        icon = 'fa-brands fa-firefox-browser';
        break;
      case 'edge':
      case 'edge-ios':
      case 'edge-chromium':
        icon = 'fa-brands fa-edge';
        break;
      case 'safari':
      case 'ios':
        icon = 'fa-brands fa-safari';
        break;
    }
    return icon;
  }
  function IsJsonString(str) {
    try {
      JSON.parse(str);
      return true;
    } catch (e) {
      return false;
    }
  }
  _c12 = IsJsonString;
  function parseFieldsAsFloatsInsideObject(objData, arr) {
    // myData represents the array of values that will be matched to the arr fed to the function
    var myData = [];
    // Parse values in an object based on the array passed. The array should include the fields that you wanna parse
    Object.keys(objData).sort(function (a, b) {
      return arr.indexOf(a) - arr.indexOf(b);
    }).filter(function (el) {
      return callback(el, arr);
    }).forEach(function (el) {
      var elData;
      if (IsJsonString(objData[el])) {
        elData = parseFloat(objData[el]);
      } else {
        elData = objData[el];
      }
      myData = myData.concat(elData);
    });
    function callback(el, arr) {
      return arr.indexOf(el) >= 0;
    }
    var retObj = arr.reduce(function (obj, arr, index) {
      var _extends2;
      return _extends({}, obj, (_extends2 = {}, _extends2[arr] = myData[index], _extends2));
    }, {});
    return _extends({}, objData, retObj);
  }
  function getFileExtension(filename) {
    return filename.split('.').pop();
  }
  function openInNewTab(url, store) {
    var newWindow = window.open(url, '_blank');
    newWindow && newWindow.focus();
    if (!newWindow || newWindow.closed || typeof newWindow.closed == 'undefined') {
      var browser = detectBrowser.detect();
      var docs = null;
      switch (browser == null ? void 0 : browser.name) {
        case 'chrome':
          docs = 'https://support.google.com/chrome/answer/95472?hl=en&co=GENIE.Platform%3DDesktop#zippy=%2Callow-pop-ups-and-redirects-from-a-site';
          break;
        case 'firefox':
          docs = 'https://support.mozilla.org/en-US/kb/pop-blocker-settings-exceptions-troubleshooting#w_pop-up-blocker-settings';
          break;
        case 'safari':
          docs = 'https://support.apple.com/en-za/guide/safari/sfri40696/mac';
          break;
        default:
          docs = null;
      }
      store.emitter.emit('showAlert', {
        title: "Popups are blocked for " + window.location.origin,
        body: React__default.createElement("div", null, React__default.createElement("div", {
          className: "flex justify-center pb-6 pt-4 "
        }, React__default.createElement("div", {
          className: "rounded-full bg-yellow-100 p-4"
        }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
          icon: "exclamation-triangle",
          size: "2x",
          className: "text-yellow"
        }))), React__default.createElement("div", {
          className: "pb-4"
        }, "We tried to open", ' ', React__default.createElement("a", {
          href: url,
          target: "_blank",
          className: "text-primary cursor-pointer font-bold"
        }, url), ' ', "in a new tab, but unfortunately popus are blocked by your browser."), React__default.createElement("div", null, "To unblock popups for this site, follow the", ' ', docs ? React__default.createElement("a", {
          href: docs,
          target: "_blank",
          className: "text-primary cursor-pointer font-bold"
        }, "instructions") : 'instructions', ' ', "on how to allow popups for your browser.")),
        showOkButton: true,
        showCancelButton: false,
        okButtonVariant: 'primary',
        okButtonText: 'Okay, thanks',
        "return": (function () {
          var _return2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          }));
          function _return() {
            return _return2.apply(this, arguments);
          }
          return _return;
        })()
      });
    }
  }
  function calculateSum(items, field, decimals) {
    if (!items) {
      return '–';
    }
    return items.filter(function (item) {
      return item !== undefined;
    }).map(function (item) {
      return item[field];
    }).reduce(function (a, b) {
      return a + b;
    }).toFixed(decimals === undefined ? 2 : decimals);
  }
  // function differenceBetweenObjects(origObj: any, newObj: any) {
  // function changes(newObj: any, origObj: any) {
  // let arrayIndexCounter = 0;
  // return _.transform(newObj, function (result, value, key) {
  // if (!_.isEqual(value, origObj[key])) {
  // let resultKey = _.isArray(origObj) ? arrayIndexCounter++ : key;
  // 
  // // @ts-ignore
  // result[resultKey] =
  // _.isObject(value) && _.isObject(origObj[key])
  // ? changes(value, origObj[key])
  // : value;
  // }
  // });
  // }
  // 
  // return changes(newObj, origObj);
  // }
  function mergeArrays(arr1, arr2, val) {
    return arr1 && arr1.map(function (obj) {
      return arr2 && arr2.find(function (p) {
        return p[val] === obj[val];
      }) || obj;
    });
  }
  function getObjectByPropertyWithValue(array, property, value) {
    var obj = null;
    array.forEach(function (o) {
      if (o[property] === value) {
        obj = o;
      }
    });
    return obj;
  }
  function omitPropsFromObj(obj) {
    var result = _extends({}, obj);
    for (var _len = arguments.length, props = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      props[_key - 1] = arguments[_key];
    }
    props.forEach(function (prop) {
      delete result[prop];
    });
    return result;
  }
  var duplicateObjectsInArray = function duplicateObjectsInArray(arr, key) {
    var newArrEl = [];
    arr.forEach(function (el) {
      var array = Array(parseInt(el[key])).fill(0).map(function () {
        return Object.assign({}, el);
      });
      newArrEl = newArrEl.concat(array);
    });
    return newArrEl;
  };
  function addFiltersToArgsCheck(filters, args, wildCardedColumns, dontChangeDates) {
    if (!wildCardedColumns) wildCardedColumns = [];
    Object.keys(filters).forEach(function (key) {
      if (filters[key] && (!Array.isArray(filters[key]) || filters[key].length > 0)) {
        var val = filters[key];
        if (key === 'start_date' || key === 'date' || key === 'from_invoice_date') {
          if (dontChangeDates) {
            val = pgFormatDate(moment(val));
          } else {
            val = pgFormatDate(moment(val).startOf('day'));
          }
        }
        if (key === 'end_date' || key === 'to_invoice_date') {
          if (dontChangeDates) {
            val = pgFormatDate(moment(val));
          } else {
            val = pgFormatDate(moment(val).endOf('day'));
          }
        }
        if (Array.isArray(filters[key])) {
          args[key] = JSON.stringify(val);
        } else if (wildCardedColumns.indexOf(key) === -1) {
          args[key] = val;
        } else {
          // Encode with % wildcard (postgres) at the begining and end of the argument
          // The encoding is need because args are put into the query URL
          args[key] = '%' + val + '%';
        }
      }
    });
    return args;
  }
  var generalUtils = {
    __proto__: null,
    capitalize: capitalize,
    getError: getError,
    getErrorString: getErrorString,
    showError: showError,
    getUUIDFilename: getUUIDFilename,
    isImage: isImage,
    isCsv: isCsv,
    isKML: isKML,
    isPdf: isPdf,
    reverseArray: reverseArray,
    serialize: serialize,
    checkTokenExpired: checkTokenExpired,
    checkAccountClosed: checkAccountClosed,
    checkMaintenanceMode: checkMaintenanceMode,
    shorten: shorten,
    humanReadableToKey: humanReadableToKey,
    keyToHumanReadable: keyToHumanReadable,
    cleanURL: cleanURL,
    cleanPhone: cleanPhone,
    defaultString: defaultString,
    padLeadingZeros: padLeadingZeros,
    clone: clone,
    cleanUsername: cleanUsername,
    swapValues: swapValues,
    isScreenDesktopSize: isScreenDesktopSize,
    kebabCaseToSentenceCase: kebabCaseToSentenceCase,
    isBrowserOutdated: isBrowserOutdated,
    getDataUrl: getDataUrl,
    displayString: displayString,
    isNotEmpty: isNotEmpty,
    getBrowserIcon: getBrowserIcon,
    getFileExtension: getFileExtension,
    parseFieldsAsFloatsInsideObject: parseFieldsAsFloatsInsideObject,
    openInNewTab: openInNewTab,
    calculateSum: calculateSum,
    mergeArrays: mergeArrays,
    getObjectByPropertyWithValue: getObjectByPropertyWithValue,
    omitPropsFromObj: omitPropsFromObj,
    duplicateObjectsInArray: duplicateObjectsInArray,
    addFiltersToArgsCheck: addFiltersToArgsCheck
  };
  // @ts-ignore
  var StoreContext = /*#__PURE__*/React.createContext();
  // Properties stored in store
  // provider_settings
  // roles
  // user_settings
  // logged_in_user
  // impersonated_username
  // account
  // emitter
  // To implement store from library, the entire project that uses the store component
  // has to be converted. I will not work here and there. It's all or nothing
  // NOTE: If you want to use this store configuration in your project, do not have the same setup in you local repo.
  // I.e. if you want to use the StoreContext declared, you have to use one of them, not both
  var createStore = function createStore(WrappedComponent) {
    return (
      /*#__PURE__*/(function (_React$Component) {
        _inheritsLoose(_class, _React$Component);
        function _class() {
          var _this;
          _this = _React$Component.apply(this, arguments) || this;
          _this.state = {
            get: function get(key) {
              return _this.state[key];
            },
            set: function set(key, value, callback) {
              var state = _this.state;
              state[key] = value;
              if (typeof callback === "function") {
                callback();
              }
              _this.setState(state);
            },
            remove: function remove(key) {
              var state = _this.state;
              delete state[key];
              _this.setState(state);
            }
          };
          return _this;
        }
        var _proto = _class.prototype;
        _proto.render = function render() {
          return React__default.createElement(StoreContext.Provider, {
            value: this.state
          }, React__default.createElement(WrappedComponent, Object.assign({}, this.props)));
        };
        return _class;
      })(React__default.Component)
    );
  };
  var withStore = function withStore(WrappedComponent) {
    return (
      /*#__PURE__*/(function (_React$Component2) {
        _inheritsLoose(_class2, _React$Component2);
        function _class2() {
          return _React$Component2.apply(this, arguments) || this;
        }
        var _proto2 = _class2.prototype;
        _proto2.render = function render() {
          var _this2 = this;
          return React__default.createElement(StoreContext.Consumer, null, function (context) {
            return React__default.createElement(WrappedComponent, Object.assign({
              store: context
            }, _this2.props));
          });
        };
        return _class2;
      })(React__default.Component)
    );
  };
  var useStore = function useStore() {
    _s7();
    return React.useContext(StoreContext);
  };
  _s7(useStore, "gDsCjeeItUuvgOWf1v4qoK9RF6k=");
  function useSignedRequest(_ref) {
    _s8();
    var method = _ref.method, url = _ref.url, data = _ref.data, headers = _ref.headers, disallowDuplicateCancel = _ref.disallowDuplicateCancel, retryCounter = _ref.retryCounter, fetchOnInit = _ref.fetchOnInit, onSuccess = _ref.onSuccess, onError = _ref.onError, initialLoadingState = _ref.initialLoadingState, signedRequest = _ref.signedRequest, _ref$disallowRequest = _ref.disallowRequest, disallowRequest = _ref$disallowRequest === void 0 ? false : _ref$disallowRequest;
    var store = useStore();
    var _useState = React.useState(null), response = _useState[0], setResponse = _useState[1];
    var _useState2 = React.useState(""), error = _useState2[0], setError = _useState2[1];
    var _useState3 = React.useState(initialLoadingState != null ? initialLoadingState : true), isLoading = _useState3[0], setIsLoading = _useState3[1];
    React.useEffect(function () {
      // Do not fetch on mount by default
      var fetchData = /*#__PURE__*/(function () {
        var _ref2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
          return _regeneratorRuntime().wrap(function _callee$(_context) {
            while (1) switch (_context.prev = _context.next) {
              case 0:
                if (!fetchOnInit) {
                  _context.next = 3;
                  break;
                }
                _context.next = 3;
                return makeRequest();
              case 3:
              case "end":
                return _context.stop();
            }
          }, _callee);
        }));
        return function fetchData() {
          return _ref2.apply(this, arguments);
        };
      })();
      fetchData();
    }, []);
    var makeRequest = /*#__PURE__*/(function () {
      var _ref3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(params, disableLoadingState) {
        var responseData, errorData, args, res;
        return _regeneratorRuntime().wrap(function _callee2$(_context2) {
          while (1) switch (_context2.prev = _context2.next) {
            case 0:
              if (!disallowRequest) {
                _context2.next = 3;
                break;
              }
              setIsLoading(false);
              return _context2.abrupt("return", {
                responseData: responseData,
                errorData: errorData
              });
            case 3:
              // Do not display or pass through loading state for the function
              if (!disableLoadingState) {
                setIsLoading(true);
              }
              setError(null);
              args = {};
              if (params) {
                args = params;
              } else {
                args = data;
              }
              _context2.prev = 7;
              _context2.next = 10;
              return signedRequest(store, url, method, args, headers, disallowDuplicateCancel, retryCounter);
            case 10:
              res = _context2.sent;
              if (res.ok) {
                setResponse(res.data);
                responseData = res.data;
                if (onSuccess) {
                  onSuccess(res.data);
                }
              }
              if (!res.ok) {
                setError(getError(res, true));
                errorData = getError(res, true);
                if (onError) {
                  onError(getError(res, true));
                }
              }
              _context2.next = 20;
              break;
            case 15:
              _context2.prev = 15;
              _context2.t0 = _context2["catch"](7);
              setError(getError(_context2.t0, true));
              errorData = getError(_context2.t0, true);
              if (onError) {
                onError(getError(_context2.t0, true));
              }
            case 20:
              _context2.prev = 20;
              setIsLoading(false);
              return _context2.finish(20);
            case 23:
              return _context2.abrupt("return", {
                responseData: responseData,
                errorData: errorData
              });
            case 24:
            case "end":
              return _context2.stop();
          }
        }, _callee2, null, [[7, 15, 20, 23]]);
      }));
      return function makeRequest(_x, _x2) {
        return _ref3.apply(this, arguments);
      };
    })();
    return {
      response: response,
      error: error,
      isLoading: isLoading,
      makeRequest: makeRequest
    };
  }
  _s8(useSignedRequest, "0XdH/EUrQMg8LuV+HN3sHQjK1VY=", false, function () {
    return [useStore];
  });
  function useDebounce(value, delay) {
    _s9();
    var _useState = React.useState(value), debouncedValue = _useState[0], setDebouncedValue = _useState[1];
    React.useEffect(function () {
      var timer = setTimeout(function () {
        return setDebouncedValue(value);
      }, delay || 500);
      return function () {
        clearTimeout(timer);
      };
    }, [value, delay]);
    return debouncedValue;
  }
  _s9(useDebounce, "DkLeylMZmG9TBzPgODowgR7a6RY=");
  function useOnClickOutside(ref, handler) {
    _s10();
    React.useEffect(function () {
      var listener = function listener(e) {
        if (!ref.current || ref.current.contains(e.target)) {
          return;
        }
        handler(e);
      };
      document.addEventListener("mousedown", listener);
      document.addEventListener("touchstart", listener);
      return function () {
        document.removeEventListener("mousedown", listener);
        document.removeEventListener("touchstart", listener);
      };
    }, [ref, handler]);
  }
  _s10(useOnClickOutside, "OD7bBpZva5O2jO+Puf00hKivP7c=");
  function useFilters(_ref) {
    _s11();
    var defaultFilters = _ref.defaultFilters, _ref$insertUrl = _ref.insertUrl, insertUrl = _ref$insertUrl === void 0 ? true : _ref$insertUrl, filtersChangeCallback = _ref.filtersChangeCallback, _ref$overrideDefaultF = _ref.overrideDefaultFilters, overrideDefaultFilters = _ref$overrideDefaultF === void 0 ? true : _ref$overrideDefaultF, _ref$advancedFilterNa = _ref.advancedFilterNames, advancedFilterNames = _ref$advancedFilterNa === void 0 ? {} : _ref$advancedFilterNa, handleInitialFilters = _ref.handleInitialFilters;
    var history = reactRouterDom.useHistory();
    var _useState = React.useState(defaultFilters), filters = _useState[0], setFilters = _useState[1];
    var _useState2 = React.useState([]), advancedFiltersChecked = _useState2[0], setAdvancedFiltersChecked = _useState2[1];
    function IsJsonString(str) {
      try {
        JSON.parse(str);
      } catch (e) {
        return str;
      }
      return JSON.parse(str);
    }
    function objectifyQueryString(queryString) {
      var obj = {};
      for (var _iterator = _createForOfIteratorHelperLoose(queryString.entries()), _step; !(_step = _iterator()).done; ) {
        var _step$value = _step.value, key = _step$value[0], value = _step$value[1];
        obj[key] = value;
      }
      return obj;
    }
    React.useEffect(function () {
      var initValue = new URLSearchParams(window.location.search);
      var initParams = objectifyQueryString(initValue);
      Object.keys(initParams).forEach(function (el) {
        initParams[el] = IsJsonString(initParams[el]);
      });
      delete initParams.tab;
      var newFilters = clone(initParams);
      if (advancedFilterNames) {
        Object.keys(advancedFilterNames).forEach(function (key) {
          // if the preset contains an advanced filter, show the filter
          var advancedFilterKey = advancedFilterNames[key];
          if (newFilters[advancedFilterKey]) {
            advancedFiltersChecked.push(advancedFilterNames[key]);
          } else if (handleInitialFilters) {
            handleInitialFilters(key);
          }
        });
      }
      if (overrideDefaultFilters) {
        newFilters = newFilters;
      } else {
        newFilters = _extends({}, newFilters, defaultFilters);
      }
      setFilters(newFilters);
      if (filtersChangeCallback) {
        filtersChangeCallback(newFilters);
      }
    }, []);
    function insertUrlParam(filters) {
      var filtersClone = clone(filters);
      if (filtersClone.tag_id) {
        filtersClone.tag_id = filtersClone.tag_id.map(function (t) {
          return t.id;
        });
      }
      if (filtersClone.absolute_query === "month") {
        filtersClone.absolute_query = "month";
      } else if (filtersClone.absolute_query !== "date_range") {
        delete filtersClone.start_date;
        delete filtersClone.end_date;
      }
      var value = serialize(addFiltersToArgsCheck(filtersClone, {}));
      history.push({
        pathname: location.pathname,
        search: value.toString()
      });
    }
    var handleFilterChange = function handleFilterChange(key, value) {
      var clonedFilters = clone(filters);
      if (value) {
        clonedFilters[key] = value;
      } else {
        delete clonedFilters[key];
      }
      if (insertUrl) {
        insertUrlParam(clonedFilters);
      }
      setFilters(clonedFilters);
      if (filtersChangeCallback) {
        filtersChangeCallback(clonedFilters);
      }
    };
    return {
      filters: filters,
      setFilters: setFilters,
      handleFilterChange: handleFilterChange,
      advancedFiltersChecked: advancedFiltersChecked,
      setAdvancedFiltersChecked: setAdvancedFiltersChecked
    };
  }
  _s11(useFilters, "kC5362724/Cj2+jV/hlQIg7P8BQ=", false, function () {
    return [reactRouterDom.useHistory];
  });
  // Returns the pages available in the data set
  // The get pagination component should be fired whenever the pages should be calculated.
  function useGetPagination() {
    _s12();
    var _useState = React.useState(0), pages = _useState[0], setPages = _useState[1];
    function getPagination(dataCount, rows) {
      var value = dataCount / rows;
      var paginatedVal = Math.ceil(value);
      setPages(paginatedVal);
    }
    return {
      pages: pages,
      getPagination: getPagination
    };
  }
  _s12(useGetPagination, "L7dpd/F/81h3E60z0m7GtfWg4OQ=");
  function usePrevious(value) {
    _s13();
    var ref = React.useRef();
    React.useEffect(function () {
      ref.current = value;
    });
    return ref.current;
  }
  _s13(usePrevious, "8uVE59eA/r6b92xF80p7sH8rXLk=");
  function useTabs(defaultTab, clearParams) {
    _s14();
    var history = reactRouterDom.useHistory();
    var _useState = React.useState(), activeTabID = _useState[0], setActiveTabID = _useState[1];
    var prevLocation = usePrevious(location.search);
    React.useEffect(function () {
      if (!activeTabID || activeTabID === "") {
        return setActiveTabID(defaultTab);
      }
      setActiveTabID(activeTabID);
    }, [activeTabID]);
    React.useEffect(function () {
      if (location.search !== prevLocation) {
        var urlParams = new URLSearchParams(location.search);
        var params = urlParams.get("tab");
        setActiveTabID(params);
      }
    });
    // pass extra params through as object
    function onTabSelected(tab, extraParams, overrideClear) {
      var queryParams = new URLSearchParams(location.search);
      queryParams.set("tab", tab);
      if (extraParams) {
        Object.keys(extraParams).map(function (item) {
          queryParams.set("" + item, extraParams[item]);
        });
      }
      history.push({
        pathname: location.pathname,
        search: clearParams && !overrideClear ? "tab=" + tab : queryParams.toString()
      });
    }
    return {
      activeTabID: activeTabID,
      onTabSelected: onTabSelected
    };
  }
  _s14(useTabs, "wG6xR/0jkVjH281XUbzi7rKJfHQ=", false, function () {
    return [reactRouterDom.useHistory, usePrevious];
  });
  // Implementation
  function Page(props) {
    return React__default.createElement(BaseLoader, Object.assign({
      spinnerClassName: "h-12 w-12",
      containerClassName: "mt-32"
    }, props));
  }
  _c13 = Page;
  function Modal(props) {
    return React__default.createElement(BaseLoader, Object.assign({
      spinnerClassName: "h-12 w-12",
      containerClassName: "mt-4"
    }, props));
  }
  _c14 = Modal;
  function Inline(props) {
    return React__default.createElement(BaseLoader, Object.assign({
      spinnerClassName: "h-6 w-6",
      containerClassName: "mt-2 mr-2 ml-2"
    }, props));
  }
  _c15 = Inline;
  function BaseLoader(props) {
    return React__default.createElement("div", {
      className: 'u-center ' + (props.containerClassName ? props.containerClassName : '')
    }, React__default.createElement("div", {
      className: 'loader ease-linear rounded-full border-6 border-t-6 border-primary-100 ' + (props.spinnerClassName ? props.spinnerClassName : 'h-8 w-8')
    }), props.title && React__default.createElement("div", {
      className: "ml-3"
    }, props.title, "..."));
  }
  _c16 = BaseLoader;
  var Loader = {
    Page: Page,
    Inline: Inline,
    Modal: Modal
  };
  // Implementation
  function Primary(props) {
    var bgColor = props.bgColor ? props.bgColor : 'primary';
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      buttonTypeClassNames: 'focus:outline-none focus:ring-1 focus:ring-primary u-button border-transparent text-white bg-' + bgColor + ' hover:bg-' + bgColor + '-dark',
      type: "submit"
    }));
  }
  _c17 = Primary;
  function Secondary(props) {
    var bgColor = props.bgColor ? props.bgColor : 'primary';
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      buttonTypeClassNames: 'u-focus u-button border-' + bgColor + ' text-' + bgColor + ' bg-white hover:bg-' + bgColor + ' hover:text-white '
    }));
  }
  _c18 = Secondary;
  function Tertiary(props) {
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      buttonTypeClassNames: 'u-focus u-button border-gray-900 text-gray-99 bg-white hover:text-primary hover:border-primary '
    }));
  }
  _c19 = Tertiary;
  function Danger(props) {
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      buttonTypeClassNames: 'focus:outline-none focus:ring-1 focus:ring-red u-button border-transparent text-white bg-red hover:bg-red-dark '
    }));
  }
  _c20 = Danger;
  function Icon(props) {
    var bgColor = props.bgColor ? props.bgColor : 'transparent';
    var color = props.bgColor ? 'white' : 'gray';
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      iconSize: props.iconSize ? props.iconSize : 'lg',
      buttonTypeClassNames: 'u-focus u-button border-transparent text-' + color + ' bg-' + bgColor + ' hover:bg-' + bgColor + '-dark hover:text-' + color + '-700'
    }));
  }
  _c21 = Icon;
  function Cancel(props) {
    var title = props.title ? props.title : 'Cancel';
    return React__default.createElement(BaseButton, Object.assign({}, props, {
      title: title,
      buttonTypeClassNames: 'u-focus u-button justify-center border-gray-300 text-gray-700 bg-white hover:bg-gray-50 '
    }));
  }
  _c22 = Cancel;
  function Link(props) {
    return React__default.createElement(BaseLink, Object.assign({}, props, {
      color: props.color ? props.color : 'primary'
    }));
  }
  _c23 = Link;
  function LinkDanger(props) {
    return React__default.createElement(BaseLink, Object.assign({}, props, {
      color: "red"
    }));
  }
  _c24 = LinkDanger;
  function BaseLink(props) {
    var linkClassNames = 'inline-flex items-center text-' + props.color + ' font-bold hover:text-' + props.color + '-dark focus:outline-none justify-center focus:underline ' + (props.small ? ' text-xs ' : ' ') + (props.noPadding ? '' : ' px-3 py-1 ');
    if (props.to) {
      if (props.target === '_blank') {
        return React__default.createElement("a", {
          href: props.to,
          target: "_blank",
          rel: "noopener noreferrer"
        }, React__default.createElement(BaseButton, Object.assign({}, props, {
          buttonTypeClassNames: linkClassNames
        })));
      }
      return React__default.createElement(reactRouterDom.Link, {
        to: props.to,
        tabIndex: props.tabIndex
      }, React__default.createElement(BaseButton, Object.assign({}, props, {
        buttonTypeClassNames: linkClassNames
      })));
    } else {
      return React__default.createElement(BaseButton, Object.assign({}, props, {
        buttonTypeClassNames: linkClassNames
      }));
    }
  }
  _c25 = BaseLink;
  function BaseButton(props) {
    var _props$tabIndex;
    var isLoading = props.isLoading, loadingTitle = props.loadingTitle, icon = props.icon, title = props.title, center = props.center, buttonTypeClassNames = props.buttonTypeClassNames, className = props.className, disabled = props.disabled, type = props.type, id = props.id, iconSize = props.iconSize, hoverTitle = props.hoverTitle, leftRounded = props.leftRounded, rightRounded = props.rightRounded;
    var disabledOrLoading = disabled || isLoading;
    var iconToShow = icon;
    var iconClass = '';
    if (isLoading) {
      iconToShow = 'sync';
      iconClass = 'button-loader-spinning';
    }
    var textToShow = isLoading && loadingTitle ? loadingTitle + '...' : title;
    return React__default.createElement("button", {
      id: id,
      disabled: disabledOrLoading,
      onClick: props.onClick,
      tabIndex: (_props$tabIndex = props.tabIndex) != null ? _props$tabIndex : 0,
      type: type ? type : 'button',
      title: hoverTitle,
      className: (leftRounded ? 'rounded-r h-9' : rightRounded ? 'rounded-l h-9' : 'rounded-full h-9 ') + buttonTypeClassNames + ' ' + (center ? ' block mx-auto ' : '') + (className ? className : '') + (disabledOrLoading ? ' opacity-50 pointer-events-none' : '')
    }, iconToShow && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: iconToShow,
      className: (textToShow ? 'mr-3 ' : '') + iconClass,
      size: iconSize ? iconSize : 'sm'
    }), textToShow);
  }
  _c26 = BaseButton;
  function ButtonsPanel(props) {
    var noMargin = props.noMargin, children = props.children, center = props.center, left = props.left;
    var align = 'justify-between';
    var nonEmptyChildren = [];
    if (Array.isArray(children)) {
      nonEmptyChildren = children.filter(function (child) {
        return child;
      });
    }
    if (!Array.isArray(children) || nonEmptyChildren.length === 1) {
      align = 'justify-end';
    }
    if (center) {
      align = 'justify-center';
    }
    if (left) {
      align = 'justify-start';
    }
    return React__default.createElement("div", {
      className: ' w-full u-reverse-flex-col-to-row ' + align + (noMargin ? '' : ' mt-6')
    }, children);
  }
  _c27 = ButtonsPanel;
  function Download(props) {
    return React__default.createElement(Button.Link, {
      disabled: props.disabled,
      onClick: function onClick() {
        return props.download();
      },
      icon: "download",
      isLoading: props.isDownloading,
      title: 'Download ' + props.downloadType,
      loadingTitle: 'Download ' + props.downloadType
    });
  }
  _c28 = Download;
  function Close(props) {
    return React__default.createElement("div", Object.assign({
      className: "text-lg leading-6 font-bold  text-gray-900"
    }, props), React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "times",
      size: "sm",
      className: "float-right cursor-pointer hover:text-gray-900 text-gray-700"
    }));
  }
  _c29 = Close;
  var Button = {
    Primary: Primary,
    Secondary: Secondary,
    Tertiary: Tertiary,
    Danger: Danger,
    Cancel: Cancel,
    Link: Link,
    LinkDanger: LinkDanger,
    ButtonsPanel: ButtonsPanel,
    Icon: Icon,
    Download: Download,
    Close: Close
  };
  var _excluded = ["show", "onHide", "children", "className", "icon", "title", "closeButton", "disableClickOutsideToClose", "disablePressEscToClose"];
  var ModalContext = /*#__PURE__*/React.createContext({});
  var hostElementId = 'modal-host';
  var isBrowser = function isBrowser() {
    return !!(typeof window !== 'undefined' && window.document && window.document.createElement);
  };
  var Base = function Base(_ref) {
    _s15();
    var show = _ref.show, onHide = _ref.onHide, children = _ref.children, className = _ref.className, icon = _ref.icon, title = _ref.title, closeButton = _ref.closeButton, disableClickOutsideToClose = _ref.disableClickOutsideToClose, disablePressEscToClose = _ref.disablePressEscToClose, props = _objectWithoutPropertiesLoose(_ref, _excluded);
    var elements = document.getElementsByClassName('uafrica-modal-overlay');
    var _useState = React.useState("modal_" + elements.length), modalId = _useState[0];
    React.useEffect(function () {
      if (!disablePressEscToClose) {
        window.addEventListener('keydown', listenForEscape);
        return function () {
          window.removeEventListener('keydown', listenForEscape);
        };
      } else {
        return;
      }
    }, [disablePressEscToClose]);
    function listenForEscape(e) {
      if (e.key === 'Escape' && onHide !== undefined) {
        var _elements = document.getElementsByClassName('uafrica-modal-overlay');
        if (_elements.length > 0 && _elements[_elements.length - 1].id === modalId) {
          e.preventDefault();
          onHide();
        }
      }
    }
    var ref = React.useRef(null);
    if (!show) {
      return null;
    }
    var hostElement = document.getElementById(hostElementId);
    var content = React__default.createElement(ModalContext.Provider, {
      value: {
        onHide: onHide,
        parentRef: ref
      }
    }, React__default.createElement("div", {
      id: modalId,
      className: "uafrica-modal-overlay fixed inset-0 bg-black bg-opacity-60 transition-opacity",
      onClick: !disableClickOutsideToClose && onHide ? onHide : function () {}
    }), React__default.createElement("div", Object.assign({
      className: 'uafrica-modal bg-white fixed top-0 left-1/2 transform -translate-x-1/2 rounded-lg text-left shadow-xl pb-4 pt-4 ' + className,
      ref: ref
    }, props), React__default.createElement("div", {
      className: "overflow-auto content p-6 pb-1 pt-0 "
    }, icon && React__default.createElement("div", {
      className: "h-12 w-12 rounded-full bg-red-100 sm:mr-4 sm:h-10 sm:w-10"
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: icon
    })), React__default.createElement("div", {
      className: "mt-4 text-center sm:mt-0 sm:text-left w-full"
    }, (title || closeButton) && React__default.createElement("div", {
      className: "ua-modal-actions-panel u-vertical-center justify-between z-30 text-lg font-bold text-gray-900 text-left pb-4"
    }, title && title, closeButton && React__default.createElement(Button.Close, {
      onClick: onHide
    })), React__default.createElement("div", {
      className: title || closeButton ? 'mt-10 pt-6' : 'mt-24 md:mt-20'
    }, children)))));
    if (hostElement && isBrowser()) {
      return ReactDOM__default.createPortal(content, hostElement);
    }
    console.warn('Could not find "<Modal.Host />" node.\n Switched to inline rendering mode.');
    return content;
  };
  _s15(Base, "ybasFH2svfGsSHprZ6YXbd2cSFg=");
  _c30 = Base;
  function Host(props) {
    return React__default.createElement("div", Object.assign({}, props, {
      id: hostElementId
    }));
  }
  _c31 = Host;
  function Small(props) {
    return React__default.createElement(Base, Object.assign({}, props, {
      className: " my-4 small-modal"
    }));
  }
  _c32 = Small;
  function Medium(props) {
    return React__default.createElement(Base, Object.assign({}, props, {
      className: " my-4 medium-modal"
    }));
  }
  _c33 = Medium;
  function Large(props) {
    return React__default.createElement(Base, Object.assign({}, props, {
      className: " my-4 large-modal"
    }));
  }
  _c34 = Large;
  function ButtonsPanel$1(props) {
    return React__default.createElement("div", {
      className: props.fixed ? 'fixed bottom-0 ua-modal-buttons-panel shadow-inner z-20 p-4 pb-4 mb-1 bg-white' : 'mb-1'
    }, React__default.createElement("div", {
      className: (props.fixed ? '' : 'mt-10 ') + ' u-reverse-flex-col-to-row justify-between  '
    }, props.children));
  }
  _c35 = ButtonsPanel$1;
  var Modal$1 = {
    ButtonsPanel: ButtonsPanel$1,
    Small: Small,
    Medium: Medium,
    Large: Large,
    Host: Host
  };
  // Implementation
  function Confirm(props) {
    _s16();
    var confirmButtonVariant = props.confirmButtonVariant, showCancelButton = props.showCancelButton, cancelText = props.cancelText, body = props.body, children = props.children, title = props.title, confirmText = props.confirmText, disableClickOutsideToClose = props.disableClickOutsideToClose, disablePressEscToClose = props.disablePressEscToClose;
    var _useState = React.useState(!!props.visible), isOpen = _useState[0], setOpen = _useState[1];
    React.useEffect(function () {
      if (props.visible) {
        if (typeof props.onShow === 'function') {
          props.onShow();
        }
      }
    });
    function onCancel(event) {
      onClose(event);
      if (typeof props.onCancel === 'function') {
        props.onCancel();
      }
    }
    function onShow() {
      setOpen(true);
      if (typeof props.onShow === 'function') {
        props.onShow();
      }
    }
    function onClose(event) {
      if (event) {
        event.stopPropagation();
      }
      setOpen(false);
      if (typeof props.onClose === 'function') {
        props.onClose();
      }
    }
    function onConfirm(_x) {
      return _onConfirm.apply(this, arguments);
    }
    function _onConfirm() {
      _onConfirm = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(event) {
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              event.stopPropagation();
              _context.next = 3;
              return props.onConfirm();
            case 3:
              setOpen(false);
            case 4:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return _onConfirm.apply(this, arguments);
    }
    function onButtonClick(event) {
      event.stopPropagation();
      if (props.disabled) return;
      // Since the modal is inside the button click events will propagate up.
      if (!isOpen) {
        onShow();
      }
    }
    var cancelButton = showCancelButton ? React__default.createElement(Button.Cancel, {
      title: cancelText,
      onClick: onCancel
    }) : null;
    return React__default.createElement("div", {
      onClick: onButtonClick,
      className: "flex items-center"
    }, children, React__default.createElement(Modal$1.Small, {
      show: isOpen,
      onHide: onClose,
      title: title,
      closeButton: true,
      disableClickOutsideToClose: disableClickOutsideToClose,
      disablePressEscToClose: disablePressEscToClose
    }, body, React__default.createElement(Button.ButtonsPanel, null, cancelButton, (!confirmButtonVariant || confirmButtonVariant === 'danger') && React__default.createElement(Button.Danger, {
      onClick: onConfirm,
      title: confirmText
    }), confirmButtonVariant && confirmButtonVariant !== 'danger' && React__default.createElement(Button.Primary, {
      onClick: onConfirm,
      title: confirmText
    }))));
  }
  _s16(Confirm, "LhMKmMipdhV+5BgFRPVWGutfBkc=");
  _c36 = Confirm;
  function Accordion(props) {
    _s17();
    var className = props.className, overrideOpen = props.overrideOpen, title = props.title, children = props.children, onDelete = props.onDelete, backgroundColor = props.backgroundColor, textColor = props.textColor, noCaret = props.noCaret, caretColor = props.caretColor, endComponent = props.endComponent;
    React.useEffect(function () {
      setOpen(Boolean(overrideOpen));
    }, [overrideOpen]);
    var _useState = React.useState(Boolean(overrideOpen)), open = _useState[0], setOpen = _useState[1];
    return React__default.createElement("div", {
      className: className
    }, React__default.createElement("div", {
      className: "w-full p-2 mx-auto bg-white rounded-2xl"
    }, React__default.createElement("div", {
      onClick: function onClick() {
        return setOpen(!open);
      },
      className: "cursor-pointer flex w-full space-x-4 px-4 py-2 text-md items-center font-bold text-left text-" + textColor + "-900 bg-" + backgroundColor + "-100 rounded-lg hover:bg-" + backgroundColor + "-200 focus:outline-none focus-visible:ring focus-visible:ring-" + backgroundColor + "-500 focus-visible:ring-opacity-75"
    }, React__default.createElement("span", {
      className: "w-full"
    }, title), endComponent && React__default.createElement(React__default.Fragment, null, endComponent), React__default.createElement("div", {
      className: "flex space-x-4"
    }, onDelete && React__default.createElement(Confirm, {
      onConfirm: function onConfirm() {
        onDelete();
      },
      title: "Delete item?",
      body: "Are you sure you want to delete the item?",
      confirmText: "Delete"
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "trash",
      className: "delete",
      title: "Delete item"
    })), !noCaret && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "caret-down",
      className: (open ? 'transform rotate-180' : '') + " w-5 h-5 text-" + caretColor + "-500"
    }))), React__default.createElement(react.Transition, {
      show: open,
      enter: "transition duration-100 ease-out",
      enterFrom: "transform scale-95 opacity-0",
      enterTo: "transform scale-100 opacity-100",
      leave: "transition duration-75 ease-out",
      leaveFrom: "transform scale-100 opacity-100",
      leaveTo: "transform scale-95 opacity-0"
    }, React__default.createElement("div", {
      className: "mt-4"
    }, children))));
  }
  _s17(Accordion, "SPku8OTgj5B6oIBZAtPslV6kngY=");
  _c37 = Accordion;
  Accordion.defaultProps = {
    backgroundColor: 'primary',
    textColor: 'primary',
    caretColor: 'primary',
    endComponent: null
  };
  function Banner(props) {
    _s18();
    var backgroundColorClass = props.backgroundColorClass, textColorClass = props.textColorClass, icon = props.icon, children = props.children, iconClassName = props.iconClassName;
    var elements = document.getElementsByClassName("uafrica-banner");
    var _useState = React.useState("banner_" + elements.length), bannerId = _useState[0];
    var _useState2 = React.useState(false), isMultiline = _useState2[0], setIsMultiline = _useState2[1];
    var _useState3 = React.useState(true), showMore = _useState3[0], setShowMore = _useState3[1];
    React.useEffect(function () {
      setIsMultiline(false);
      setShowMore(true);
      var element = document.getElementById(bannerId);
      if (element) {
        if (element.offsetHeight < element.scrollHeight || element.offsetWidth < element.scrollWidth) {
          // element has overflow and is truncated
          if (isMultiline === false) {
            setIsMultiline(true);
          }
        }
      }
    }, [children]);
    function renderShowMore() {
      return isMultiline && React__default.createElement("div", {
        className: "whitespace-nowrap cursor-pointer font-normal italic",
        onClick: function onClick() {
          setShowMore(!showMore);
        }
      }, "Show ", showMore ? "more" : "less");
    }
    return React__default.createElement("div", {
      className: backgroundColorClass + " p-4 flex justify-between items-center " + textColorClass + " font-bold sticky top-0 z-20 -mt-6 mb-4 -mx-4"
    }, typeof children === "string" ? React__default.createElement("div", {
      className: "flex flex-row justify-between space-x-4 items-center w-full"
    }, React__default.createElement("div", {
      className: "flex items-center "
    }, icon && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      // @ts-ignore
      icon: icon,
      className: iconClassName != null ? iconClassName : ""
    }), React__default.createElement("div", {
      className: "link-container flex " + (showMore ? "flex-row space-x-4" : "flex-col space-y-4")
    }, React__default.createElement(React__default.Fragment, null, React__default.createElement("div", {
      id: bannerId,
      dangerouslySetInnerHTML: {
        __html: children
      },
      className: "uafrica-banner " + (showMore ? "line-clamp-1" : "")
    })))), renderShowMore()) : children);
  }
  _s18(Banner, "5knCi1QuA8NAkVcTUrCQeSrbuSQ=");
  _c38 = Banner;
  function Card(props) {
    var mediumWidth = props.mediumWidth, width = props.width, children = props.children, padding = props.padding;
    var className = props.className ? props.className : '';
    return React__default.createElement("div", {
      className: 'xs:shadow-md rounded-md bg-white mt-3 mb-2 border-gray-100  ' + (className.includes('border') ? '' : 'border ') + (width ? " mx-2 inline-block " + (padding ? padding : 'p-2 xs:p-6') + " " : " " + (padding ? padding : 'p-4 xs:p-6') + " block ") + className + (mediumWidth ? 'w-full sm:w-' + mediumWidth : ''),
      style: {
        width: width
      }
    }, children);
  }
  _c39 = Card;
  function Checkbox(props) {
    var onClick = props.onClick, label = props.label, labelClassName = props.labelClassName, htmlFor = props.htmlFor, fieldId = props.fieldId, info = props.info, className = props.className, id = props.id, center = props.center, checked = props.checked, key = props.key, labelLeft = props.labelLeft, labelRight = props.labelRight, hoverTitle = props.hoverTitle, noPadding = props.noPadding, disabled = props.disabled, textColor = props.textColor, dataTest = props.dataTest;
    var labelEl = React__default.createElement("label", {
      className: (disabled ? 'text-gray-500 ' : 'text-base cursor-pointer ') + ' u-vertical-center ' + (labelClassName ? labelClassName : ''),
      htmlFor: htmlFor
    }, label, info && React__default.createElement(InfoButton, null, info));
    var textDisplayColor = textColor && textColor.length > 0 ? textColor : 'primary';
    return React__default.createElement("div", {
      className: "flex items-start"
    }, React__default.createElement("div", {
      id: id,
      onClick: disabled ? null : onClick != null ? onClick : null,
      key: key,
      className: (noPadding ? '' : 'py-2 px-1 ') + ' u-vertical-center space-x-4 ' + (center ? ' justify-center ' : '') + (disabled ? '' : ' cursor-pointer ')
    }, label && (labelLeft || !labelLeft && !labelRight) && labelEl, React__default.createElement("input", {
      onKeyPress: function onKeyPress(e) {
        if (e.key === 'Enter') {
          disabled ? null : onClick ? onClick(e) : null;
        }
      },
      title: hoverTitle,
      type: "checkbox",
      "data-test": dataTest,
      className: 'u-focus ' + (disabled ? 'text-gray-500 ' : "text-" + textDisplayColor + " hover:border-primary cursor-pointer ") + ' border-gray-300 rounded ' + (className ? className : ''),
      checked: checked,
      id: fieldId,
      onChange: function onChange() {}
    }), label && labelRight && labelEl));
  }
  _c40 = Checkbox;
  function CopyText(props) {
    return React__default.createElement("span", {
      title: "Copy to clipboard",
      className: "pointer",
      onClick: function onClick() {
        navigator.clipboard.writeText(props.text);
      }
    }, props.text);
  }
  _c41 = CopyText;
  // Implementation
  function Label(props) {
    var children = props.children, htmlFor = props.htmlFor, className = props.className, noMargin = props.noMargin, labelColor = props.labelColor;
    return React__default.createElement("label", {
      htmlFor: htmlFor,
      className: 'font-semibold mr-2 flex items-center text-left ' + (noMargin ? '' : ' mb-2 ') + ' ' + (className ? className : '') + ' ' + (labelColor ? labelColor : 'text-gray-900')
    }, children);
  }
  _c42 = Label;
  function Input(_ref) {
    var props = _extends({}, (_objectDestructuringEmpty(_ref), _ref));
    var disabled = props.disabled, pointer = props.pointer, inputClasses = props.inputClasses;
    return React__default.createElement("input", Object.assign({}, props, {
      className: 'focus:outline-none focus:ring-1 focus:ring-primary focus:border-transparent shadow-sm block w-full border-gray-300 rounded-md ' + inputClasses + ' ' + (disabled ? ' bg-gray-100' : '') + (pointer ? ' cursor-pointer' : '')
    }));
  }
  _c43 = Input;
  function Counter(props) {
    _s19();
    var min = props.min, max = props.max, step = props.step, inputId = props.inputId, value = props.value, disabled = props.disabled, placeholder = props.placeholder, autoFocus = props.autoFocus, _onChange = props.onChange, containerClassName = props.containerClassName, labelInline = props.labelInline, label = props.label, htmlFor = props.htmlFor, labelClassName = props.labelClassName;
    if (step === undefined) {
      step = 1;
    }
    var _useState = React.useState(value ? value : 0), inputValue = _useState[0], setInputValue = _useState[1];
    var decreaseDisabled = min !== undefined && inputValue - step < min || disabled;
    var increaseDisabled = max !== undefined && inputValue + step > max || disabled;
    return React__default.createElement("div", {
      className: containerClassName ? containerClassName : labelInline ? 'u-vertical-center flex-row space-x-4' : 'mt-4 max-w-sm'
    }, label && label.length > 0 && React__default.createElement("div", {
      className: "flex justify-between"
    }, React__default.createElement(Label, {
      htmlFor: htmlFor,
      className: labelClassName,
      noMargin: labelInline
    }, label)), React__default.createElement("div", {
      className: "u-vertical-center flex-row w-full"
    }, React__default.createElement("div", {
      style: {
        height: '37px'
      },
      className: 'flex justify-center items-center w-12 shadow-sm border rounded-l-md ' + (decreaseDisabled ? 'bg-gray-100 border-gray-100 cursor-not-allowed' : 'bg-primary-100 hover:bg-primary-200 border-primary-100 cursor-pointer'),
      onClick: function onClick() {
        if (!decreaseDisabled) {
          setInputValue(inputValue - step);
          _onChange(inputValue - step);
        }
      }
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: 'minus',
      className: decreaseDisabled ? 'text-gray-500' : 'text-primary'
    })), React__default.createElement(Input, {
      labelInline: true,
      inputId: inputId,
      containerClassName: "w-20",
      inputClassName: "input-counter  border-primary-100 ",
      step: step,
      min: min,
      max: max,
      value: inputValue,
      disabled: disabled,
      placeholder: placeholder,
      type: "number",
      autoFocus: autoFocus,
      onChange: function onChange(e) {
        // only change value if within any specified limits
        setInputValue(e.target.value);
        if (min !== undefined && max !== undefined) {
          if (e.target.value >= min && e.target.value <= max) {
            _onChange(e.target.value);
          }
        } else if (min !== undefined) {
          if (e.target.value >= min) {
            _onChange(e.target.value);
          }
        } else if (max !== undefined) {
          if (e.target.value <= max) {
            _onChange(e.target.value);
          }
        } else {
          _onChange(e.target.value);
        }
      },
      onBlur: function onBlur() {
        // ensures the user did not manually enter a value exceeding the limits
        if (min !== undefined || max !== undefined) {
          if (min && inputValue < min) {
            setInputValue(min);
            _onChange(min);
          }
          if (max && inputValue > max) {
            setInputValue(max);
            _onChange(max);
          }
        } else {
          _onChange(inputValue);
        }
      }
    }), React__default.createElement("div", {
      style: {
        height: '37px'
      },
      className: 'flex justify-center items-center w-12 shadow-sm border rounded-r-md ' + (increaseDisabled ? 'bg-gray-100 border-gray-100 cursor-not-allowed' : 'bg-primary-100 hover:bg-primary-200 border-primary-100 cursor-pointer'),
      onClick: function onClick() {
        if (!increaseDisabled) {
          setInputValue(inputValue + step);
          _onChange(inputValue + step);
        }
      }
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: 'plus',
      className: increaseDisabled ? 'text-gray-500' : 'text-primary'
    }))));
  }
  _s19(Counter, "FXk+fvt4rhrofDsb7l6RSG0Jr+8=");
  _c44 = Counter;
  // Implementation
  function GroupedSelect(props) {
    _s20();
    var label = props.label, labelClassName = props.labelClassName, disabled = props.disabled, id = props.id, placeholder = props.placeholder, popoverWidth = props.popoverWidth, value = props.value, optionGroups = props.optionGroups, labelInline = props.labelInline, noMargin = props.noMargin, className = props.className, buttonWidth = props.buttonWidth, multiSelection = props.multiSelection, containerClassName = props.containerClassName, info = props.info, buttons = props.buttons, onDelete = props.onDelete, onChange = props.onChange, _onClick = props.onClick, onSearchBlur = props.onSearchBlur, onSearchFocus = props.onSearchFocus, noSearch = props.noSearch, allowDeselect = props.allowDeselect, showAsterisk = props.showAsterisk, dataTest = props.dataTest, showAllButton = props.showAllButton, showAllSelectedText = props.showAllSelectedText, allSelectedText = props.allSelectedText, popoverHeight = props.popoverHeight;
    var popupNode = React.useRef();
    var ctxValue = useGroupedSelectCtx(popupNode, onSearchBlur);
    // State for searching
    var _useState = React.useState(''), searchTerm = _useState[0], setSearchTerm = _useState[1];
    // State for the show all button
    var _useState2 = React.useState(false), showAllClicked = _useState2[0], setShowAllClicked = _useState2[1];
    var _useState3 = React.useState(false), showAllDisabled = _useState3[0], setShowAllDisabled = _useState3[1];
    // Happens when an item is selected
    function onSelectToggle(_value) {
      try {
        var newValue = _value;
        // Multi select
        if (multiSelection) {
          newValue = JSON.parse(JSON.stringify(value));
          var currentIndex = newValue.indexOf(_value);
          if (currentIndex >= 0) {
            newValue.splice(currentIndex, 1);
          } else {
            newValue.push(_value);
          }
                  // Single select
} else {
          if (allowDeselect) {
            if (newValue === value) {
              newValue = undefined;
            }
          }
        }
        onChange && onChange(newValue);
      } catch (e) {
        console.log(e);
      }
    }
    function clickOption(option) {
      if (option.disabled !== true) {
        onSelectToggle(option.value);
        if (!multiSelection) {
          ctxValue.hideSelect();
        }
      }
    }
    // renders an option group with its list of options
    function renderOptionGroup(optionGroup, shouldShowAllResults) {
      var limit = 100;
      // Search
      searchTerm = searchTerm.toLowerCase();
      var optionsLimited = [];
      try {
        optionsLimited = optionGroup.options.filter(function (option) {
          if (typeof option.label === 'string' && searchTerm) {
            return option.label.toLowerCase().indexOf(searchTerm) >= 0;
          }
          return true;
        });
      } catch (e) {
        console.log(e);
      }
      var optionsOmitted = 0;
      /** Disable the show all button if:
      * - the show all button has been clicked
      * - OR
      * - the available options are less than or equal to the set limit
      */
      if (shouldShowAllResults) {
        setShowAllDisabled(true);
      } else if (showAllButton && searchTerm.length >= 0 && optionsLimited.length <= limit) {
        setShowAllDisabled(true);
      } else {
        setShowAllDisabled(false);
      }
      // Limit results
      if (!shouldShowAllResults && optionsLimited.length > limit) {
        optionsOmitted = optionsLimited.length - limit;
        optionsLimited = optionsLimited.slice(0, limit);
      }
      return React__default.createElement("div", {
        key: optionGroup.label,
        className: "mb-4"
      }, optionGroup.label && React__default.createElement("div", {
        className: "text-gray-600 uppercase text-xs p-2 mt-4"
      }, optionGroup.label), optionsLimited.map(function (option) {
        var selected;
        if (multiSelection) {
          selected = value.indexOf(option.value) >= 0;
        } else {
          selected = value === option.value;
        }
        return React__default.createElement("div", {
          key: option.value,
          className: "flex flex-row items-center"
        }, React__default.createElement("div", {
          tabIndex: 0,
          onKeyPress: function onKeyPress(e) {
            if (e.key === 'Enter') {
              clickOption(option);
            }
          },
          onClick: function onClick() {
            clickOption(option);
          },
          className: 'flex-1 select-none relative py-2 pl-2 pr-9 hover:bg-gray-100 focus:bg-gray-100 u-focus rounded-md mt-1 mx-1  ' + (selected ? 'bg-gray-100' : 'text-gray-900') + (option.disabled === true ? ' cursor-not-allowed ' : ' cursor-pointer ')
        }, React__default.createElement("span", {
          className: 'flex flex-wrap ' + (selected ? 'font-semibold' : 'font-normal') + (option.disabled === true ? ' text-gray-500 ' : '')
        }, option.label), selected ? React__default.createElement("span", {
          className: 'absolute inset-y-0 right-0 u-vertical-center pr-4 ' + (option.disabled === true ? ' text-gray-500 ' : ' text-primary-600 ')
        }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
          icon: "check",
          className: "h-5 w-5",
          "aria-hidden": "true"
        })) : null), onDelete && !option.disableDelete && option.disabled !== true && React__default.createElement("span", {
          className: "u-vertical-center p-2 text-red hover:text-red-700 cursor-pointer"
        }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
          icon: "trash",
          title: "Delete",
          onClick: function onClick() {
            return onDelete && onDelete(option.label, option.value);
          }
        })));
      }), optionsOmitted > 0 && React__default.createElement("div", {
        className: "pl-2 mt-2"
      }, "+ ", optionsOmitted, " more"));
    }
    var flattenedOptions = [].concat.apply([], // @ts-ignore
    optionGroups.map(function (optionGroup) {
      return optionGroup.options;
    }));
    var labelWithValue = '';
    if (value) {
      if (multiSelection) {
        if (value.length === 1) {
          var selectedItem = flattenedOptions.find(function (option) {
            return option.value === value[0];
          });
          if (selectedItem) {
            labelWithValue = selectedItem.label;
          }
        } else if (value.length === flattenedOptions.length && showAllSelectedText) {
          labelWithValue = allSelectedText != null ? allSelectedText : 'All selected';
        } else if (value.length > 1) {
          labelWithValue = value.length + ' selected';
        }
      } else {
        var _selectedItem = flattenedOptions.find(function (option) {
          return option.value === value;
        });
        if (_selectedItem) {
          labelWithValue = _selectedItem.label;
        }
      }
    }
    var allOptionsSearched = [];
    try {
      allOptionsSearched = flattenedOptions.filter(function (option) {
        if (typeof (option == null ? void 0 : option.label) === 'string' && searchTerm) {
          return option.label.toLowerCase().indexOf(searchTerm.toLowerCase()) >= 0;
        }
        return true;
      });
    } catch (e) {
      console.log(e);
    }
    var _containerClassName = 'mt-4';
    if (noMargin || labelInline) {
      _containerClassName = '';
    }
    if (containerClassName) {
      _containerClassName = containerClassName;
    }
    var _buttonWidth = 'w-56';
    if (buttonWidth) {
      _buttonWidth = buttonWidth;
    }
    // Select all buttons
    var selectAllButton;
    var disabledOptions = [];
    try {
      disabledOptions = flattenedOptions.filter(function (option) {
        return option.disabled;
      }).map(function (option) {
        return option.value;
      });
    } catch (e) {
      console.log(e);
    }
    try {
      if (multiSelection) {
        var selectedDisabledOptions = value.filter(function (v) {
          return disabledOptions.includes(v);
        });
        var notSelectedDisabledOptions = disabledOptions.filter(function (v) {
          return !selectedDisabledOptions.includes(v);
        });
        var allSelected = flattenedOptions.length - notSelectedDisabledOptions.length === value.length;
        selectAllButton = React__default.createElement(Button.Link, {
          key: "select-deselect",
          title: allSelected ? 'Deselect all' : 'Select all',
          onClick: function onClick() {
            if (allSelected) {
              // deselect all, ignore disabled options
              onChange && onChange(selectedDisabledOptions);
            } else {
              // select all, ignore disabled options
              onChange && onChange((flattenedOptions ? flattenedOptions : []).filter(function (option) {
                return notSelectedDisabledOptions.indexOf(option.value) === -1;
              }).map(function (option) {
                return option.value;
              }));
            }
          }
        });
      }
    } catch (e) {
      console.log(e);
    }
    var placement = 'bottom-start';
    return React__default.createElement("div", {
      className: _containerClassName,
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    }, React__default.createElement(react.Popover, null, React__default.createElement("div", {
      className: labelInline ? 'flex flex-row items-center space-x-4' : ''
    }, label && React__default.createElement(Label, {
      className: labelClassName,
      noMargin: labelInline
    }, label, " ", showAsterisk && ' *', ' ', info && React__default.createElement(InfoButton, null, info)), React__default.createElement(GroupedSelectCtx.Provider, {
      value: ctxValue,
      key: ctxValue.isVisible.toString()
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", {
        className: "flex flex-row"
      }, React__default.createElement("div", {
        ref: ref,
        className: 'relative ' + (className ? className : '') + _buttonWidth
      }, React__default.createElement("div", {
        className: "u-focus rounded-md",
        tabIndex: 0,
        onKeyPress: function onKeyPress(e) {
          if (e.key === 'Enter') {
            if (ctxValue.isVisible) {
              ctxValue.hideSelect();
            } else {
              ctxValue.showSelect();
            }
          }
        },
        onClick: function onClick(e) {
          e.stopPropagation();
          if (disabled) return;
          if (ctxValue.isVisible) {
            ctxValue.hideSelect();
          } else {
            ctxValue.showSelect();
          }
          if (_onClick) {
            _onClick();
          }
          setTimeout(function () {
            try {
              // @ts-ignore
              document.getElementById('ui-framework-search').focus();
            } catch (e) {
              console.log(e);
            }
          }, 10);
        }
      }, React__default.createElement("div", {
        className: 'relative border border-gray-300 rounded-md shadow-sm pl-3 pr-6 py-2 text-left w-full ' + (disabled ? 'bg-gray-100' : 'bg-white cursor-pointer'),
        id: id
      }, React__default.createElement("span", {
        className: "block truncate",
        "data-test": dataTest
      }, labelWithValue ? labelWithValue : placeholder), React__default.createElement("span", {
        className: "absolute inset-y-0 right-0 u-vertical-center pr-2 pointer-events-none"
      }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: ctxValue.isVisible ? 'caret-up' : 'caret-down',
        className: "h-5 w-5 text-gray-400",
        "aria-hidden": "true"
      }))))), React__default.createElement("div", {
        className: "mt-3"
      }, !label && info && React__default.createElement(InfoButton, null, info)));
    }), React__default.createElement(reactPopper.Popper, {
      // @ts-ignore
      placement: placement,
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      },
      modifiers: [{
        name: 'offset',
        options: {
          offset: [0, 5]
        }
      }]
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style;
      return ctxValue.isVisible ? React__default.createElement("div", {
        // @ts-ignore
        style: style,
        ref: ref,
        className: 'overflow-hidden z-50 rounded-lg shadow-lg u-black-ring px-4 pb-2 bg-white ' + (popoverWidth ? popoverWidth : 'w-72')
      }, !noSearch && React__default.createElement(Input, {
        autoFocus: false,
        autoComplete: "off",
        inputId: "ui-framework-search",
        containerClassName: "mt-4 w-full",
        onBlur: onSearchBlur,
        onFocus: onSearchFocus,
        appendIcon: "search",
        value: searchTerm,
        onChange: function onChange(e) {
          return setSearchTerm(e.target.value);
        }
      }), selectAllButton && React__default.createElement("div", {
        className: "-ml-1 border-b border-gray-200 pt-1 -mb-2"
      }, selectAllButton), React__default.createElement("div", {
        className: "mt-2 mb-2 " + (popoverHeight ? popoverHeight : 'max-h-52 ') + " overflow-y-auto"
      }, allOptionsSearched.length === 0 && React__default.createElement("div", {
        className: "pl-2 mt-2"
      }, "No options"), optionGroups.map(function (optionGroup) {
        if (showAllClicked) {
          return renderOptionGroup(optionGroup, showAllClicked);
        } else {
          return renderOptionGroup(optionGroup);
        }
      })), buttons && React__default.createElement("div", {
        className: "-ml-1 border-t border-gray-200 pt-1"
      }, buttons), showAllButton && React__default.createElement("div", {
        className: "-ml-1 border-t border-gray-200 pt-1"
      }, React__default.createElement(Button.Link, {
        disabled: showAllDisabled,
        title: "Show all",
        onClick: function onClick() {
          setShowAllClicked(true);
        }
      }))) : null;
    }), React__default.createElement(react.Popover.Panel, {
      className: "absolute z-30"
    }))))));
  }
  _s20(GroupedSelect, "WGtL6gfvMNLNJwykmUerIWWtfzQ=", false, function () {
    return [useGroupedSelectCtx];
  });
  _c45 = GroupedSelect;
  function Select(props) {
    // convert options into a group
    var optionGroups = [{
      label: '',
      options: props.options
    }];
    return React__default.createElement(GroupedSelect, Object.assign({}, props, {
      optionGroups: optionGroups
    }));
  }
  _c46 = Select;
  var GroupedSelectCtx = /*#__PURE__*/React.createContext({
    isVisible: false,
    showSelect: function showSelect() {},
    hideSelect: function hideSelect() {}
  });
  function useGroupedSelectCtx(ref, onSearchBlur) {
    _s21();
    var _useState4 = React.useState(false), isVisible = _useState4[0], setVisible = _useState4[1];
    React.useEffect(function () {
      function mouseDownListener(e) {
        var targetAsNode = e.target;
        if (ref.current && !ref.current.contains(targetAsNode)) {
          setVisible(false);
        }
      }
      // @ts-ignore
      function keyDownListener(e) {}
      if (isVisible) {
        window.addEventListener('keydown', keyDownListener);
        document.addEventListener('mousedown', mouseDownListener);
      }
      return function () {
        window.removeEventListener('keydown', keyDownListener);
        document.removeEventListener('mousedown', mouseDownListener);
        if (onSearchBlur) {
          onSearchBlur();
        }
      };
    }, [isVisible]);
    return {
      isVisible: isVisible,
      showSelect: function showSelect() {
        return setVisible(true);
      },
      hideSelect: function hideSelect() {
        return setVisible(false);
      }
    };
  }
  _s21(useGroupedSelectCtx, "uqXs5Hw2W4k7JXPMspa5jnXeVPg=");
  function Pagination(_ref) {
    _s22();
    var handler = _ref.handler, active = _ref.active, pages = _ref.pages, setActive = _ref.setActive, isLoading = _ref.isLoading, setRows = _ref.setRows, rows = _ref.rows, scrollRef = _ref.scrollRef;
    var _useState = React.useState(active), pageVal = _useState[0], setPageVal = _useState[1];
    React.useEffect(function () {
      setPageVal(active);
    }, [active]);
    React.useEffect(function () {
      // checkPage
      var newUrlParams = new URLSearchParams(window.location.search);
      var page = newUrlParams.get('page');
      if (page) {
        setActive(parseInt(page));
        setPageVal(parseInt(page));
      }
    }, []);
    return React__default.createElement(Card, {
      className: "" + (isLoading && 'mt-20')
    }, React__default.createElement("div", {
      className: "flex justify-between items-center"
    }, React__default.createElement("div", null, React__default.createElement(Button.Link, {
      id: "pagination__go_to_previous_page",
      title: "Previous",
      disabled: active === 1,
      onClick: function onClick() {
        var _scrollRef$current;
        setPageVal(pageVal - 1);
        handler(active - 1);
        scrollRef == null ? void 0 : (_scrollRef$current = scrollRef.current) == null ? void 0 : _scrollRef$current.scrollIntoView();
      }
    })), React__default.createElement("div", {
      className: 'flex items-center'
    }, React__default.createElement("div", null, React__default.createElement("div", {
      className: "page-info"
    }, "Page"), React__default.createElement("div", {
      className: "page-jump"
    }, React__default.createElement("input", {
      className: '-pageJump',
      id: '-pageJump',
      value: pageVal,
      type: "number",
      onChange: function onChange(e) {
        setPageVal(e.target.value);
      },
      onBlur: function onBlur(e) {
        var _scrollRef$current2;
        if (parseInt(e.target.value) === pageVal) {
          return;
        }
        setActive(pageVal);
        handler(pageVal);
        scrollRef == null ? void 0 : (_scrollRef$current2 = scrollRef.current) == null ? void 0 : _scrollRef$current2.scrollIntoView();
      },
      onKeyDown: function onKeyDown(e) {
        if (parseInt(e.target.value) === pageVal) {
          return;
        }
        if (e.key === 'Enter' && active !== pageVal) {
          var _scrollRef$current3;
          setActive(pageVal);
          handler(pageVal);
          scrollRef == null ? void 0 : (_scrollRef$current3 = scrollRef.current) == null ? void 0 : _scrollRef$current3.scrollIntoView();
        }
      },
      min: 1,
      max: pages
    })), "of", React__default.createElement("span", {
      className: "total-pages",
      id: "total-pages"
    }, pages), ' '), setRows && rows && React__default.createElement("div", null, React__default.createElement(Select, {
      options: ['5', '10', '20', '25', '50', '100'].map(function (item) {
        return {
          label: item,
          value: parseInt(item)
        };
      }),
      value: rows,
      onChange: function onChange(val) {
        return setRows(val);
      },
      buttonWidth: 'w-20 -mt-4 ml-8'
    }))), React__default.createElement("div", null, React__default.createElement(Button.Link, {
      id: "pagination__go_to_next_page",
      title: "Next",
      onClick: function onClick() {
        var _scrollRef$current4;
        setPageVal(pageVal + 1);
        handler(active + 1);
        scrollRef == null ? void 0 : (_scrollRef$current4 = scrollRef.current) == null ? void 0 : _scrollRef$current4.scrollIntoView();
      },
      disabled: active === pages
    }))));
  }
  _s22(Pagination, "peZSax3fM+QXrvoey+8+Uar9XuA=");
  _c47 = Pagination;
  /** TABLE CLONING*/
  function cloneColumnTable(tableId, list) {
    var table = document.getElementById(tableId);
    if (table) {
      list = document.createElement("div");
      list.classList.add("clone-list");
      list.style.position = "absolute";
      // @ts-ignore
      table.parentNode.insertBefore(list, table);
      table.style.visibility = "hidden";
      var originalCells = [].slice.call(table.querySelectorAll("tbody td"));
      var originalHeaderCells = [].slice.call(table.querySelectorAll("th"));
      var columnCount = originalHeaderCells.length;
      originalHeaderCells.forEach(function (headerCell, headerIndex) {
        var width = parseInt(window.getComputedStyle(headerCell).width);
        var height = parseInt(window.getComputedStyle(originalCells[0]).height);
        var item = document.createElement("div");
        item.classList.add("draggable");
        var newTable = document.createElement("table");
        newTable.setAttribute("class", "clone-table");
        newTable.style.width = width + "px";
        // @ts-ignore
        var th = headerCell.cloneNode(true);
        var newRow = document.createElement("tr");
        newRow.classList.add("custom-table-tr");
        newRow.appendChild(th);
        newTable.appendChild(newRow);
        var cells = originalCells.filter(function (_, idx) {
          return (idx - headerIndex) % columnCount === 0;
        });
        cells.forEach(function (cell) {
          // @ts-ignore
          var newCell = cell.cloneNode(true);
          newCell.style.width = width + "px";
          newCell.style.height = height + "px";
          newRow = document.createElement("tr");
          newRow.classList.add("custom-table-tr");
          newRow.appendChild(newCell);
          newTable.appendChild(newRow);
        });
        item.appendChild(newTable);
        list.appendChild(item);
      });
      return list;
    }
  }
  function cloneRowTable(tableId, list) {
    var table = document.getElementById(tableId);
    if (table) {
      var width = parseInt(window.getComputedStyle(table).width);
      list = document.createElement("div");
      list.classList.add("clone-list");
      list.classList.add("flex-col");
      list.style.position = "absolute";
      // @ts-ignore
      table.parentNode.insertBefore(list, table);
      table.style.visibility = "hidden";
      var originalRows = table.querySelectorAll("tr");
      originalRows.forEach(function (originalRow) {
        var item = document.createElement("div");
        item.classList.add("draggable");
        var newTable = document.createElement("table");
        newTable.setAttribute("class", "clone-table");
        newTable.style.width = width + "px";
        var newRow = document.createElement("tr");
        newRow.classList.add("custom-table-tr");
        var cells = [].slice.call(originalRow.children);
        cells.forEach(function (cell) {
          // @ts-ignore
          var newCell = cell.cloneNode(true);
          newCell.style.width = parseInt(window.getComputedStyle(cell).width) + "px";
          newRow.appendChild(newCell);
        });
        newTable.appendChild(newRow);
        item.appendChild(newTable);
        list.appendChild(item);
      });
      return list;
    }
  }
  /** COLUMN & ROW DRAGGING*/
  var isOnLeft = function isOnLeft(nodeA, nodeB) {
    var rectA = nodeA.getBoundingClientRect();
    var rectB = nodeB.getBoundingClientRect();
    return rectA.left + rectA.width / 2 < rectB.left + rectB.width / 2;
  };
  var isAbove = function isAbove(nodeA, nodeB) {
    var rectA = nodeA.getBoundingClientRect();
    var rectB = nodeB.getBoundingClientRect();
    return rectA.top + rectA.height / 2 < rectB.top + rectB.height / 2;
  };
  var swap = function swap(nodeA, nodeB) {
    var parentA = nodeA.parentNode;
    var siblingA = nodeA.nextSibling === nodeB ? nodeA : nodeA.nextSibling;
    nodeB.parentNode.insertBefore(nodeA, nodeB);
    parentA.insertBefore(nodeB, siblingA);
  };
  /** GENERAL*/
  function isColumnClickable(column) {
    return column.isClickable === undefined ? true : column.isClickable;
  }
  function isColumnDraggable(column) {
    return column.draggable === undefined ? true : column.draggable;
  }
  function isColumnSortable(column) {
    return column.sortable === undefined ? true : column.sortable;
  }
  function isColumnResizable(column) {
    return column.resizable === undefined ? true : column.resizable;
  }
  function isRowSelected(selectedRowIdentifiers, rowId) {
    return selectedRowIdentifiers.indexOf(rowId.toString()) > -1;
  }
  function getColumnById(columns, columnId) {
    var column = {};
    columns.forEach(function (c) {
      if (c.id === columnId) {
        column = c;
      }
    });
    return column;
  }
  function getColumnWidth(columnWidths, columnId) {
    var width = null;
    columnWidths.forEach(function (c) {
      if (c.id === columnId) {
        width = c.value;
      }
    });
    return width;
  }
  function initialiseColumnOrder(columns, columnOrder) {
    var definedColumns = columns.map(function (column) {
      return column.id;
    });
    if (columnOrder) {
      var _columnOrder = [];
      columnOrder.forEach(function (c) {
        var index = definedColumns.indexOf(c);
        if (index > -1) {
          // column still existis in list of defined columns
          _columnOrder.push(c);
        }
      });
      definedColumns.forEach(function (c) {
        var index = columnOrder == null ? void 0 : columnOrder.indexOf(c);
        if (index === -1) {
          // defined column does not exist in provided order
          _columnOrder.push(c);
        }
      });
      return _columnOrder;
    } else {
      return definedColumns;
    }
  }
  function getDataByRowId(data, rowUniqueIdentifier, rowId) {
    var row = {};
    data.forEach(function (d) {
      if (d[rowUniqueIdentifier].toString() === rowId.toString()) {
        row = d;
      }
    });
    return row;
  }
  function CustomTableRow(props) {
    var rowId = props.rowId, columnOrder = props.columnOrder, onRowClicked = props.onRowClicked, dataIndex = props.dataIndex, rowData = props.rowData, onShowMenu = props.onShowMenu, columns = props.columns, columnWidths = props.columnWidths, isLoading = props.isLoading;
    function render() {
      return React__default.createElement("tr", {
        id: rowId.toString(),
        className: 'custom-table-tr hover:bg-gray-100 ' + (isLoading ? 'bg-gray-50 text-gray-300' : '')
      }, columnOrder.map(function (columnId) {
        var column = getColumnById(columns, columnId);
        var columnContentStyle = {};
        var columnWidth = getColumnWidth(columnWidths, columnId);
        if (columnWidth) {
          columnContentStyle.width = columnWidth + 'px';
          columnContentStyle.whiteSpace = 'nowrap';
          columnContentStyle.overflow = 'hidden';
          columnContentStyle.textOverflow = 'ellipsis';
        }
        return React__default.createElement("td", {
          id: columnId != null ? columnId : '',
          key: columnId,
          className: 'custom-table-td pr-4 py-2 mx-1 ' + (onRowClicked && isColumnClickable(column) ? 'cursor-pointer' : ''),
          onClick: function onClick(e) {
            onShowMenu(false);
            if (onRowClicked && isColumnClickable(column) && !isLoading) {
              onRowClicked({
                index: dataIndex,
                original: rowData,
                updateRow: function updateRow(value) {
                  props.updateRow(value, dataIndex);
                },
                removeRow: function removeRow() {
                  props.removeRow(dataIndex);
                },
                e: e
              });
            }
          },
          onContextMenu: function onContextMenu(e) {
            e.preventDefault();
            e.stopPropagation();
            if (!isLoading) {
              props.onRightClick(e, rowData, dataIndex);
            }
          },
          onMouseDown: function onMouseDown(e) {
            e.preventDefault();
            e.stopPropagation();
          }
        }, React__default.createElement("div", {
          style: columnContentStyle,
          className: "items-center mx-2 "
        }, column.cell ? column.cell({
          original: rowData,
          index: dataIndex,
          updateRow: function updateRow(value) {
            props.updateRow(value, dataIndex);
          },
          removeRow: function removeRow() {
            props.removeRow(dataIndex);
          }
        }) : rowData[column.accessor]));
      }));
    }
    return render();
  }
  _c48 = CustomTableRow;
  function PageHeading(props) {
    var id = props.id, children = props.children, center = props.center, icon = props.icon, uppercase = props.uppercase;
    var uppercaseText = 'uppercase';
    if (!uppercase) {
      uppercaseText = '';
    }
    return React__default.createElement("div", {
      className: center ? ' mx-auto text-center items-center ' : '',
      id: id
    }, React__default.createElement("h1", {
      className: "text-xl font-bold text-gray-900 " + uppercaseText
    }, icon && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: icon,
      className: 'mr-3',
      size: "sm"
    }), children));
  }
  _c49 = PageHeading;
  PageHeading.defaultProps = {
    uppercase: true
  };
  function SectionHeading(props) {
    var children = props.children, icon = props.icon, iconColor = props.iconColor, editIconClassName = props.editIconClassName, toggleEditMode = props.toggleEditMode, hideEditMode = props.hideEditMode, center = props.center, marginTop = props.marginTop, noMarginBottom = props.noMarginBottom, options = props.options;
    return React__default.createElement("div", {
      className: 'u-vertical-center flex-row space-x-4 ' + (center ? 'justify-center' : '') + (marginTop ? ' mt-8' : '') + (noMarginBottom ? '' : ' mb-4 ')
    }, icon && React__default.createElement("div", {
      className: "w-8"
    }, React__default.createElement("div", {
      className: 'rounded-full u-center h-8 w-8 bg-' + (iconColor ? iconColor : 'black') + '-100'
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      size: "sm",
      icon: icon,
      className: 'text-' + (iconColor ? iconColor : 'black') + '-500'
    }))), React__default.createElement("h2", {
      className: "text-lg font-bold text-gray-900 mt-1 u-vertical-center "
    }, children), toggleEditMode && !hideEditMode && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "pencil-alt",
      className: editIconClassName ? editIconClassName : 'mt-1 text-primary cursor-pointer',
      onClick: function onClick() {
        return toggleEditMode();
      }
    }), options && options);
  }
  _c50 = SectionHeading;
  // Implementation
  function TableActionsPanel(props) {
    var title = props.title, className = props.className;
    return React__default.createElement("div", {
      className: 'flex flex-col-reverse xs:flex-row justify-between mt-2 items-start xs:items-center py-2' + (className ? className : '')
    }, React__default.createElement("div", {
      className: "text-sm"
    }, title), React__default.createElement("div", {
      className: "xs:ml-auto flex flex-wrap flex-gap-x-1 flex-grow-0 mb-4 xs:mb-0"
    }, props.children));
  }
  _c51 = TableActionsPanel;
  function SectionActionsPanel(props) {
    var title = props.title, className = props.className, toggleEditMode = props.toggleEditMode, hideEditMode = props.hideEditMode, icon = props.icon, iconColor = props.iconColor;
    return React__default.createElement("div", {
      className: 'u-panel ' + (className ? className : '')
    }, title && React__default.createElement(SectionHeading, {
      icon: icon,
      iconColor: iconColor,
      toggleEditMode: toggleEditMode,
      hideEditMode: hideEditMode,
      noMarginBottom: true
    }, title), React__default.createElement("div", {
      className: "ml-auto u-vertical-center flex-wrap flex-row space-x-0 sm:space-x-4 space-y-4 sm:space-y-0 flex-grow-0 w-full md:w-auto justify-end"
    }, props.children));
  }
  _c52 = SectionActionsPanel;
  function PageActionsPanel(props) {
    var title = props.title, icon = props.icon, uppercase = props.uppercase;
    return React__default.createElement("div", {
      className: "ua-page-actions-panel u-panel xs:pb-4"
    }, title && React__default.createElement(PageHeading, {
      uppercase: uppercase,
      icon: icon
    }, title), React__default.createElement("div", {
      className: "ua-page-actions-panel-children ml-0 xs:ml-auto u-reverse-flex-col-to-row items-start xs:items-center "
    }, props.children));
  }
  _c53 = PageActionsPanel;
  function ModalActionsPanel(props) {
    var title = props.title, onClose = props.onClose;
    return React__default.createElement("div", {
      className: "ua-modal-actions-panel u-panel pb-4"
    }, React__default.createElement("div", {
      className: "u-vertical-center justify-between w-full md:w-auto"
    }, React__default.createElement("div", null, title && React__default.createElement(PageHeading, null, title)), React__default.createElement("div", null, onClose && React__default.createElement("div", {
      className: "block md:hidden",
      onClick: onClose
    }, React__default.createElement(Button.Close, {
      onClick: onClose
    })))), React__default.createElement("div", {
      className: "u-horizontal-center flex-row space-x-4 items-center w-full md:w-auto flex-wrap pt-2"
    }, props.children, onClose && React__default.createElement("div", {
      className: "hidden md:block",
      onClick: onClose
    }, React__default.createElement(Button.Close, {
      onClick: onClose
    }))));
  }
  _c54 = ModalActionsPanel;
  function FiltersPanel(props) {
    var className = props.className, children = props.children;
    return React__default.createElement("div", {
      className: 'ua-filters-panel u-vertical-center flex-wrap flex-row ' + (className ? className : '')
    }, children);
  }
  _c55 = FiltersPanel;
  var DropdownMenuCtx = /*#__PURE__*/React.createContext({
    isVisible: false,
    showDropdownMenu: function showDropdownMenu() {},
    hideDropdownMenu: function hideDropdownMenu() {}
  });
  function useDropdownMenuCtx(ref) {
    _s23();
    var _useState = React.useState(false), isVisible = _useState[0], setVisible = _useState[1];
    React.useEffect(function () {
      function mouseDownListener(e) {
        var targetAsNode = e.target;
        if (ref.current && !ref.current.contains(targetAsNode)) {
          setVisible(false);
        }
      }
      if (isVisible) {
        document.addEventListener('mousedown', mouseDownListener);
      }
      return function () {
        document.removeEventListener('mousedown', mouseDownListener);
      };
    }, [isVisible]);
    return {
      isVisible: isVisible,
      showDropdownMenu: function showDropdownMenu() {
        return setVisible(true);
      },
      hideDropdownMenu: function hideDropdownMenu() {
        return setVisible(false);
      }
    };
  }
  _s23(useDropdownMenuCtx, "EEbBbH2V7/JbIWkmnfgP/KlFBtU=");
  function DropdownMenu(props) {
    _s24();
    var title = props.title, icon = props.icon, noBackground = props.noBackground, id = props.id, widthClass = props.widthClass, color = props.color, placement = props.placement, square = props.square, buttonWidth = props.buttonWidth, between = props.between, padding = props.padding, borderColor = props.borderColor, leftRounded = props.leftRounded, rightRounded = props.rightRounded, buttonStyle = props.buttonStyle;
    var popupNode = React.useRef();
    var ctxValue = useDropdownMenuCtx(popupNode);
    if (!placement) {
      placement = 'bottom-start';
    }
    var componentPadding = 'px-4';
    if (padding) {
      componentPadding = padding;
    }
    widthClass = widthClass ? widthClass : 'w-72';
    color = color ? color : 'gray';
    return React__default.createElement(DropdownMenuCtx.Provider, {
      value: ctxValue
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement("div", {
      className: "inline-block text-left cursor-pointer " + (buttonWidth && buttonWidth)
    }, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", {
        className: "rounded-full",
        ref: ref,
        onClick: function onClick() {
          ctxValue.showDropdownMenu();
        }
      }, React__default.createElement("div", {
        tabIndex: 0,
        onKeyPress: function onKeyPress(e) {
          if (e.key === 'Enter') {
            if (ctxValue.isVisible) {
              ctxValue.hideDropdownMenu();
            } else {
              ctxValue.showDropdownMenu();
            }
          }
        },
        id: id,
        style: buttonStyle && buttonStyle,
        className: " u-focus " + (leftRounded ? 'rounded-r' : rightRounded ? 'rounded-l' : square ? 'rounded' : 'rounded-full') + " inline-flex " + (between ? 'justify-between' : 'justify-center') + " w-full " + componentPadding + " font-medium  focus:outline-none " + ('text-' + color + ' ') + (noBackground ? 'my-1 py-1 hover:text-' + color + '-700 font-bold' : " py-2 hover:bg-gray-50 border-" + borderColor + " shadow-sm " + (square ? 'rounded' : 'rounded-full') + " border bg-white")
      }, icon && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: icon,
        className: "h-5 w-5",
        "aria-hidden": "true"
      }), Boolean(title) && React__default.createElement("span", {
        className: "ml-2 truncate"
      }, title), React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: "caret-down",
        className: '-mr-1 ml-2 h-5 w-5' + (title ? ' mt-px' : ''),
        "aria-hidden": "true"
      })));
    }), React__default.createElement(reactPopper.Popper, {
      placement: placement,
      modifiers: [{
        name: 'offset',
        options: {
          offset: [0, 5]
        }
      }],
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      }
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style;
      return ctxValue.isVisible ? React__default.createElement("div", {
        onClick: function onClick(e) {
          e.stopPropagation();
          ctxValue.hideDropdownMenu();
        },
        ref: ref,
        // @ts-ignore
        style: _extends({
          margin: 0
        }, style),
        className: 'z-50 origin-top-right absolute right-0 rounded-md shadow-lg bg-white u-black-ring focus:outline-none m-1 ' + widthClass
      }, React__default.createElement(react.Menu, null, props.children)) : null;
    }))));
  }
  _s24(DropdownMenu, "DBxnvDHlEQGEHS6/copJCHF9Je0=", false, function () {
    return [useDropdownMenuCtx];
  });
  _c56 = DropdownMenu;
  function ContextMenu(props) {
    var id = props.id, widthClass = props.widthClass;
    widthClass = widthClass ? widthClass : 'w-72';
    return React__default.createElement(react.Menu, {
      as: "div",
      id: id ? id : 'context_menu',
      className: "relative inline-block text-left"
    }, React__default.createElement(react.Transition, {
      show: true,
      as: React.Fragment,
      enter: "transition ease-out duration-100",
      enterFrom: "transform opacity-0 scale-95",
      enterTo: "transform opacity-100 scale-100",
      leave: "transition ease-in duration-75",
      leaveFrom: "transform opacity-100 scale-100",
      leaveTo: "transform opacity-0 scale-95"
    }, React__default.createElement(react.Menu.Items, {
      "static": true,
      className: 'z-10 origin-top-right absolute py-3 right-0 mt-2 rounded-md shadow-lg bg-white u-black-ring focus:outline-none ' + widthClass
    }, props.children)));
  }
  _c57 = ContextMenu;
  function MenuItem(props) {
    var title = props.title, icon = props.icon, id = props.id, disabled = props.disabled, isLoading = props.isLoading, closeOnClick = props.closeOnClick;
    var iconToShow = icon;
    if (isLoading) {
      iconToShow = 'sync';
    }
    return React__default.createElement("div", {
      id: id,
      tabIndex: 0,
      className: "u-focus rounded-md mx-1",
      onKeyPress: function onKeyPress(e) {
        if (e.key === 'Enter' && !disabled) {
          document.body.click();
          props.onClick();
        }
      }
    }, React__default.createElement(react.Menu.Item, null, function (_ref3) {
      var active = _ref3.active;
      return React__default.createElement("div", {
        className: ' group u-vertical-center px-4 py-2 cursor-pointer font-semibold ' + (disabled ? 'bg-gray-100 text-gray-500' : active ? 'bg-gray-100 text-gray-900' : 'text-black'),
        onClick: function onClick(e) {
          if (!disabled) {
            if (closeOnClick) {
              document.body.click();
              props.onClick();
            } else {
              e.stopPropagation();
              document.body.click();
              props.onClick();
            }
          }
        }
      }, iconToShow && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: iconToShow,
        spin: isLoading,
        className: 'mr-3 h-5 w-5  ' + (disabled ? 'text-gray-500' : 'text-black group-hover:text-gray-900'),
        "aria-hidden": "true"
      }), title);
    }));
  }
  _c58 = MenuItem;
  function MenuItemContainer(props) {
    return React__default.createElement(react.Menu.Item, null, props.children);
  }
  _c59 = MenuItemContainer;
  function MenuHeading(props) {
    var title = props.title, icon = props.icon, id = props.id;
    return React__default.createElement("div", {
      id: id
    }, React__default.createElement(react.Menu.Item, null, function () {
      return React__default.createElement("div", {
        className: 'group flex u-vertical-center px-4 py-2 cursor-pointer font-semibold text-gray-700'
      }, icon && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
        icon: icon,
        className: "mr-3 h-5 w-5 text-gray-500 group-hover:text-gray-900",
        "aria-hidden": "true"
      }), title);
    }));
  }
  _c60 = MenuHeading;
  DropdownMenu.defaultProps = {
    borderColor: 'gray-300'
  };
  var Dropdown = {
    MenuItemContainer: MenuItemContainer,
    MenuItem: MenuItem,
    MenuHeading: MenuHeading,
    Menu: DropdownMenu,
    ContextMenu: ContextMenu
  };
  function CustomTable(props) {
    _s25();
    var _props$rowUniqueIdent, _props$pageSize;
    var id = props.id, fetchFunction = props.fetchFunction, fetchFunctionArguments = props.fetchFunctionArguments, draggableRows = props.draggableRows, onPageSizeChanged = props.onPageSizeChanged, onRowClicked = props.onRowClicked, onSelectionChanged = props.onSelectionChanged, onColumnOrderChanged = props.onColumnOrderChanged, onRowOrderChanged = props.onRowOrderChanged, onColumnWidthsChanged = props.onColumnWidthsChanged, onDataChanged = props.onDataChanged, noPagination = props.noPagination, scrollableX = props.scrollableX, contextMenuItems = props.contextMenuItems, contextMenuHeader = props.contextMenuHeader, autoRefreshInterval = props.autoRefreshInterval, setTableFunctions = props.setTableFunctions, noDataText = props.noDataText, loadOnPageChange = props.loadOnPageChange, rowOrderIcon = props.rowOrderIcon, persistPage = props.persistPage;
    var topRef = React.useRef();
    var rowUniqueIdentifier = (_props$rowUniqueIdent = props.rowUniqueIdentifier) != null ? _props$rowUniqueIdent : 'id';
    var defaultPageSize = 20;
    var interval;
    // loading
    var _useState = React.useState(true), isInitialising = _useState[0], setIsInitialising = _useState[1];
    var _useState2 = React.useState(false), isLoading = _useState2[0], setIsLoading = _useState2[1];
    var _useState3 = React.useState([]), data = _useState3[0], setData = _useState3[1];
    var _useState4 = React.useState(), error = _useState4[0], setError = _useState4[1];
    var _useState5 = React.useState({}), orderingArguments = _useState5[0], setOrderingArguments = _useState5[1];
    // table render
    var _useState6 = React.useState(props.columns), columns = _useState6[0], setColumns = _useState6[1];
    var _useState7 = React.useState(initialiseColumnOrder(props.columns, props.columnOrder)), columnOrder = _useState7[0], setColumnOrder = _useState7[1];
    var _useState8 = React.useState([]), rowOrder = _useState8[0], setRowOrder = _useState8[1];
    var _useState9 = React.useState(props.columnWidths && props.columnWidths.length > 0 ? props.columnWidths : props.columns.map(function (column) {
      return {
        id: column.id,
        value: column.width
      };
    })), columnWidths = _useState9[0], setColumnWidths = _useState9[1];
    // row selection
    var _useState10 = React.useState([]), selectedRowIdentifiers = _useState10[0], setSelectedRowIdentifiers = _useState10[1];
    var _useState11 = React.useState(false), allRowsSelected = _useState11[0], setAllRowsSelected = _useState11[1];
    // pagination
    var _useState12 = React.useState(1), count = _useState12[0], setCount = _useState12[1];
    var _useState13 = React.useState(1), page = _useState13[0], setPage = _useState13[1];
    var _useState14 = React.useState(0), totalPages = _useState14[0], setTotalPages = _useState14[1];
    var _useState15 = React.useState((_props$pageSize = props.pageSize) != null ? _props$pageSize : defaultPageSize), pageSize = _useState15[0], setPageSize = _useState15[1];
    // menu
    var _useState16 = React.useState(false), showMenu = _useState16[0], setShowMenu = _useState16[1];
    var _useState17 = React.useState(), contextMenuMaxHeight = _useState17[0], setContextMenuMaxHeight = _useState17[1];
    var _useState18 = React.useState({
      x: 0,
      y: 0
    }), clickPosition = _useState18[0], setClickPosition = _useState18[1];
    var _useState19 = React.useState({
      rowData: null,
      dataIndex: null
    }), activeRow = _useState19[0], setActiveRow = _useState19[1];
    // dragging
    var _useState20 = React.useState(), list = _useState20[0], setList = _useState20[1];
    var _useState21 = React.useState(), draggingElement = _useState21[0], setDraggingElement = _useState21[1];
    var _useState22 = React.useState(), draggingColumnIndex = _useState22[0], setDraggingColumnIndex = _useState22[1];
    var _useState23 = React.useState(), draggingRowIndex = _useState23[0], setDraggingRowIndex = _useState23[1];
    var _useState24 = React.useState(), placeholder = _useState24[0], setPlaceholder = _useState24[1];
    var _useState25 = React.useState(false), isDraggingStarted = _useState25[0], setIsDraggingStarted = _useState25[1];
    var _useState26 = React.useState(false), columnEventListenersAdded = _useState26[0], setColumnEventListenersAdded = _useState26[1];
    var _useState27 = React.useState(false), rowEventListenersAdded = _useState27[0], setRowEventListenersAdded = _useState27[1];
    // column resize
    var _useState28 = React.useState(''), resizeColumnId = _useState28[0], setResizeColumnId = _useState28[1];
    var _useState29 = React.useState(0), resizeColumnStartWidth = _useState29[0], setResizeColumnStartWidth = _useState29[1];
    var _useState30 = React.useState(0), resizeColumnStartX = _useState30[0], setResizeColumnStartX = _useState30[1];
    var insertRowRef = React.useRef(insertRow);
    var refreshRef = React.useRef(refresh);
    React.useEffect(function () {
      // rerun when props.columnOrder
      // when the parent component only sets the widths on mount and not in the useState hook call
      setColumnOrder(initialiseColumnOrder(props.columns, props.columnOrder));
    }, [props.columnOrder]);
    React.useEffect(function () {
      // when the parent component only sets the widths on mount and not in the useState hook call
      setColumnWidths(props.columnWidths && props.columnWidths.length > 0 ? props.columnWidths : props.columns.map(function (column) {
        return {
          id: column.id,
          value: column.width
        };
      }));
    }, [props.columnWidths]);
    React.useEffect(function () {
      if (setTableFunctions) {
        setTableFunctions({
          insertRow: function insertRow(object, index) {
            insertRowRef.current(data, rowOrder, object, index != null ? index : 0);
          },
          refresh: function refresh() {
            refreshRef.current();
          }
        });
      }
    }, [data, rowOrder]);
    React.useEffect(function () {
      if (autoRefreshInterval) {
        startAutoRefreshInterval();
      }
      document.addEventListener('mousedown', hideMenu);
      return function () {
        document.removeEventListener('mousedown', hideMenu);
        if (autoRefreshInterval) {
          clearInterval(interval);
        }
      };
    }, []);
    React.useEffect(function () {
      manageStaticColumns(columns);
    }, [data, selectedRowIdentifiers]);
    React.useEffect(function () {
      if (persistPage) {
        load(false, page, pageSize);
      } else {
        load(true, page, pageSize);
      }
    }, [fetchFunctionArguments]);
    React.useEffect(function () {
      if (!isInitialising) {
        load(true, page, pageSize);
      }
    }, [orderingArguments]);
    React.useEffect(function () {
      if (props.pageSize && props.pageSize !== pageSize) {
        changePageSize(props.pageSize, !isInitialising);
      }
    }, [props.pageSize]);
    React.useEffect(function () {
      // column resize
      if (resizeColumnId !== '') {
        document.addEventListener('mousemove', resizeColumnMouseMoveHandler);
        document.addEventListener('mouseup', resizeColumnMouseUpHandler);
      }
    }, [resizeColumnId]);
    React.useEffect(function () {
      // column dragging
      if (draggingColumnIndex !== undefined && !columnEventListenersAdded) {
        setColumnEventListenersAdded(true);
        document.addEventListener('mousemove', dragColumnMouseMoveHandler);
        document.addEventListener('mouseup', dragColumnMouseUpHandler);
      }
    }, [draggingColumnIndex]);
    React.useEffect(function () {
      // row dragging
      if (draggingRowIndex !== undefined && !rowEventListenersAdded) {
        setRowEventListenersAdded(true);
        document.addEventListener('mousemove', dragRowMouseMoveHandler);
        document.addEventListener('mouseup', dragRowMouseUpHandler);
      }
    }, [draggingRowIndex]);
    React.useEffect(function () {
      // context menu position
      repositionMenu();
    }, [clickPosition]);
    function refresh() {
      load(false, page, pageSize);
    }
    function insertRow(data, rowOrder, object, index) {
      data.splice(index, 0, object);
      rowOrder.splice(index, 0, object[rowUniqueIdentifier]);
      setData([].concat(data));
      setRowOrder([].concat(rowOrder));
    }
    function hideMenu(e) {
      var table = document.getElementById(id);
      var contextMenu = document.getElementById('table-dropdown-menu');
      if (table && !table.contains(e.target) && contextMenu && !contextMenu.contains(e.target)) {
        // do not show menu if click was outside table container
        setShowMenu(false);
      }
    }
    function _updateRow(value, dataIndex) {
      data[dataIndex] = value;
      setData([].concat(data));
    }
    function _removeRow(dataIndex) {
      data.splice(dataIndex, 1);
      rowOrder.splice(dataIndex, 1);
      setData([].concat(data));
      setRowOrder([].concat(rowOrder));
    }
    function startAutoRefreshInterval() {
      interval = setInterval(function () {
        load(false, page, pageSize);
      }, autoRefreshInterval);
    }
    function dragColumnMouseMoveHandler(e) {
      var _scrollableContainer$;
      var table = document.getElementById(props.id);
      var scrollableContainer = document.getElementById(props.id + '_scrollable_container');
      // @ts-ignore
      var tableBoundaries = table.getBoundingClientRect();
      // @ts-ignore
      var scrollableContainerBoundaries = // @ts-ignore
      scrollableContainer.getBoundingClientRect();
      if (!isDraggingStarted) {
        isDraggingStarted = true;
        setIsDraggingStarted(true);
        list = cloneColumnTable(props.id, list);
        draggingElement = [].slice.call(list.children)[draggingColumnIndex];
        draggingElement.classList.add('dragging');
        draggingElement.classList.add('dragging-column');
        placeholder = document.createElement('div');
        placeholder.classList.add('placeholder');
        draggingElement.parentNode.insertBefore(placeholder, draggingElement.nextSibling);
        placeholder.style.width = draggingElement.offsetWidth + "px";
      }
      draggingElement.style.position = 'absolute';
      draggingElement.style.top = "0px";
      var left = 0;
      if (scrollableContainerBoundaries.left < e.clientX && e.clientX <= scrollableContainerBoundaries.right) ; else if (scrollableContainerBoundaries.right < e.clientX) {
        // scroll forward
        // @ts-ignore
        scrollableContainer.scrollLeft += 5;
      } else if (scrollableContainerBoundaries.left > e.clientX) {
        // scroll back
        // @ts-ignore
        scrollableContainer.scrollLeft -= 5;
      }
      var amountScrolled = (_scrollableContainer$ = scrollableContainer == null ? void 0 : scrollableContainer.scrollLeft) != null ? _scrollableContainer$ : 0;
      if (tableBoundaries.left <= e.clientX && e.clientX <= tableBoundaries.right) {
        left = e.clientX + amountScrolled - scrollableContainerBoundaries.left;
      } else if (tableBoundaries.left > e.clientX) {
        // max left reached
        left = 0;
      } else if (e.clientX > tableBoundaries.right) {
        // max right reached
        left = tableBoundaries.right + amountScrolled - scrollableContainerBoundaries.left;
      }
      draggingElement.style.left = left + "px";
      var previousElement = draggingElement.previousElementSibling;
      var nextElement = placeholder.nextElementSibling;
      if (previousElement && isOnLeft(draggingElement, previousElement)) {
        swap(placeholder, draggingElement);
        swap(placeholder, previousElement);
        return;
      }
      if (nextElement && isOnLeft(nextElement, draggingElement)) {
        swap(nextElement, placeholder);
        swap(nextElement, draggingElement);
      }
      setDraggingElement(draggingElement);
      setPlaceholder(placeholder);
    }
    function dragColumnMouseUpHandler() {
      var table = document.getElementById(props.id);
      if (table) {
        var _placeholder$parentNo, _draggingElement, _draggingElement2, _draggingElement3, _draggingElement4, _draggingElement5, _list$parentNode;
        placeholder && ((_placeholder$parentNo = placeholder.parentNode) == null ? void 0 : _placeholder$parentNo.removeChild(placeholder));
        setPlaceholder(placeholder);
        (_draggingElement = draggingElement) == null ? void 0 : _draggingElement.classList.remove('dragging');
        (_draggingElement2 = draggingElement) == null ? void 0 : _draggingElement2.classList.remove('dragging-column');
        (_draggingElement3 = draggingElement) == null ? void 0 : _draggingElement3.style.removeProperty('top');
        (_draggingElement4 = draggingElement) == null ? void 0 : _draggingElement4.style.removeProperty('left');
        (_draggingElement5 = draggingElement) == null ? void 0 : _draggingElement5.style.removeProperty('position');
        setDraggingElement(draggingElement);
        // @ts-ignore
        var endColumnIndex = [].slice.call(list.children).indexOf(draggingElement);
        isDraggingStarted = false;
        setIsDraggingStarted(false);
        (_list$parentNode = list.parentNode) == null ? void 0 : _list$parentNode.removeChild(list);
        setList(list);
        table.querySelectorAll('tr').forEach(function (row) {
          var cells = [].slice.call(row.querySelectorAll('th, td'));
          draggingColumnIndex > endColumnIndex ? // @ts-ignore
          cells[endColumnIndex].parentNode.insertBefore(cells[draggingColumnIndex], cells[endColumnIndex]) : // @ts-ignore
          cells[endColumnIndex].parentNode.insertBefore(cells[draggingColumnIndex], // @ts-ignore
          cells[endColumnIndex].nextSibling);
        });
        table.style.removeProperty('visibility');
        updateColumnOrder();
        document.removeEventListener('mousemove', dragColumnMouseMoveHandler);
        document.removeEventListener('mouseup', dragColumnMouseUpHandler);
        setDraggingColumnIndex(undefined);
        setColumnEventListenersAdded(false);
      }
    }
    function dragRowMouseMoveHandler(e) {
      var table = document.getElementById(props.id);
      // @ts-ignore
      var tableBoundaries = table.getBoundingClientRect();
      if (!isDraggingStarted) {
        isDraggingStarted = true;
        list = cloneRowTable(props.id, list);
        draggingElement = [].slice.call(list.children)[draggingRowIndex + 1];
        draggingElement.classList.add('dragging');
        placeholder = document.createElement('div');
        placeholder.classList.add('placeholder');
        draggingElement.parentNode.insertBefore(placeholder, draggingElement.nextSibling);
        placeholder.style.height = draggingElement.offsetHeight + "px";
      }
      draggingElement.style.position = 'absolute';
      draggingElement.style.left = "0px";
      var top = 0;
      var tableHeaderHeight = 39;
      var mouseY = e.clientY;
      if (tableBoundaries.top <= mouseY && mouseY <= tableBoundaries.bottom) {
        top = e.clientY - tableBoundaries.top;
      } else if (tableBoundaries.top > mouseY) {
        top = tableBoundaries.top - tableHeaderHeight;
      } else if (mouseY > tableBoundaries.bottom) {
        top = tableBoundaries.bottom - tableBoundaries.top - tableHeaderHeight;
      }
      draggingElement.style.top = top + "px";
      var previousElement = draggingElement.previousElementSibling;
      var nextElement = placeholder.nextElementSibling;
      if (previousElement && previousElement.previousElementSibling && isAbove(draggingElement, previousElement)) {
        swap(placeholder, draggingElement);
        swap(placeholder, previousElement);
        return;
      }
      if (nextElement && isAbove(nextElement, draggingElement)) {
        swap(nextElement, placeholder);
        swap(nextElement, draggingElement);
      }
      setDraggingElement(draggingElement);
      setPlaceholder(placeholder);
    }
    function dragRowMouseUpHandler() {
      var table = document.getElementById(props.id);
      if (table) {
        var _placeholder$parentNo2, _list$parentNode2;
        placeholder && ((_placeholder$parentNo2 = placeholder.parentNode) == null ? void 0 : _placeholder$parentNo2.removeChild(placeholder));
        draggingElement.classList.remove('dragging');
        draggingElement.style.removeProperty('top');
        draggingElement.style.removeProperty('left');
        draggingElement.style.removeProperty('position');
        // @ts-ignore
        var endRowIndex = [].slice.call(list.children).indexOf(draggingElement);
        isDraggingStarted = false;
        (_list$parentNode2 = list.parentNode) == null ? void 0 : _list$parentNode2.removeChild(list);
        var rows = [].slice.call(table.querySelectorAll('tr'));
        var _draggingRowIndex = draggingRowIndex + 1;
        _draggingRowIndex > endRowIndex ? // @ts-ignore
        rows[endRowIndex].parentNode.insertBefore(rows[_draggingRowIndex], rows[endRowIndex]) : // @ts-ignore
        rows[endRowIndex].parentNode.insertBefore(rows[_draggingRowIndex], // @ts-ignore
        rows[endRowIndex].nextSibling);
        // pass starting and ending index to update the row order
        updateRowOrder(draggingRowIndex, endRowIndex - 1);
        table.style.removeProperty('visibility');
        document.removeEventListener('mousemove', dragRowMouseMoveHandler);
        document.removeEventListener('mouseup', dragRowMouseUpHandler);
        setDraggingRowIndex(undefined);
        setRowEventListenersAdded(false);
      }
    }
    function resizeColumnMouseMoveHandler(e) {
      var newWidth = e.clientX - resizeColumnStartX + resizeColumnStartWidth;
      columnWidths.forEach(function (c) {
        if (c.id === resizeColumnId) {
          c.value = newWidth;
        }
      });
      changeColumnWidths(columnWidths);
    }
    function resizeColumnMouseUpHandler() {
      document.removeEventListener('mousemove', resizeColumnMouseMoveHandler);
      document.removeEventListener('mouseup', resizeColumnMouseUpHandler);
      var column = document.getElementById(resizeColumnId);
      column == null ? void 0 : column.classList.remove('resizable');
      setResizeColumnId('');
      setResizeColumnStartWidth(0);
      setResizeColumnStartX(0);
    }
    function changePageSize(size, doLoad) {
      setPageSize(size);
      if (onPageSizeChanged && !isInitialising) {
        onPageSizeChanged(size);
      }
      if (doLoad) {
        load(true, 1, size);
      }
    }
    function changeColumnOrder(order) {
      if (onColumnOrderChanged && !isInitialising) {
        onColumnOrderChanged(order);
      }
      setColumnOrder([].concat(order));
    }
    function changeColumnWidths(widths) {
      if (onColumnWidthsChanged && !isInitialising) {
        onColumnWidthsChanged(widths);
      }
      setColumnWidths([].concat(widths));
    }
    function changeSelection(selectedRowIdentifiers) {
      var selectedRows = data.filter(function (d) {
        return selectedRowIdentifiers.indexOf(d[rowUniqueIdentifier].toString()) > -1;
      });
      if (onSelectionChanged && !isInitialising) {
        onSelectionChanged(selectedRows);
      }
      setSelectedRowIdentifiers([].concat(selectedRowIdentifiers));
    }
    function changeData(data) {
      if (onDataChanged && !isInitialising) {
        onDataChanged(data);
      }
      setData([].concat(data));
    }
    function updateColumnOrder() {
      var table = document.getElementById(props.id);
      if (table) {
        var newColumnOrder = [].slice.call(table.querySelectorAll('th')).map(function (e) {
          return e.id;
        });
        changeColumnOrder(newColumnOrder);
      }
    }
    function updateRowOrder(startingIndex, endingIndex) {
      var table = document.getElementById(props.id);
      if (table) {
        var order = [].slice.call(table.querySelectorAll('tr')).map(function (e) {
          return e.id;
        });
        var newRowOrder = {
          order: [].concat(order).slice(1),
          startingIndex: startingIndex,
          endingIndex: endingIndex
        };
        setRowOrder(newRowOrder.order);
        if (onRowOrderChanged && !isInitialising) {
          onRowOrderChanged(newRowOrder);
        }
      }
    }
    function manageStaticColumns(columns) {
      var newColumns = [].concat(columns);
      var newColumnOrder = [].concat(columnOrder);
      if (onSelectionChanged) {
        var selectColumnIndex = newColumnOrder.indexOf('select');
        var selectAllColumn = {
          width: 30,
          id: 'select',
          accessor: 'select',
          draggable: false,
          sortable: false,
          isClickable: false,
          isRightClickable: false,
          header: React__default.createElement(Checkbox, {
            hoverTitle: allRowsSelected ? 'Deselect all' : 'Select all',
            checked: allRowsSelected,
            onClick: function onClick() {
              if (allRowsSelected) {
                setAllRowsSelected(false);
                changeSelection([]);
              } else {
                var _selected = [];
                for (var i = 0; i < data.length; i++) {
                  // @ts-ignore
                  _selected.push(data[i][rowUniqueIdentifier].toString());
                }
                setAllRowsSelected(true);
                changeSelection(_selected);
              }
            }
          }),
          cell: function cell(row) {
            return React__default.createElement(Checkbox, {
              checked: isRowSelected(selectedRowIdentifiers, row.original[rowUniqueIdentifier]),
              onClick: function onClick() {
                var selectedIndex = selectedRowIdentifiers.indexOf(// @ts-ignore
                row.original[rowUniqueIdentifier].toString());
                if (selectedIndex > -1) {
                  setAllRowsSelected(false);
                  selectedRowIdentifiers.splice(selectedIndex, 1);
                  changeSelection(selectedRowIdentifiers);
                } else {
                  // @ts-ignore
                  selectedRowIdentifiers.push(row.original[rowUniqueIdentifier].toString());
                  if (selectedRowIdentifiers.length === pageSize) {
                    setAllRowsSelected(true);
                  }
                  changeSelection(selectedRowIdentifiers);
                }
              }
            });
          }
        };
        if (selectColumnIndex < 0) {
          newColumns.splice(0, 0, selectAllColumn);
          newColumnOrder.splice(0, 0, 'select');
        } else {
          newColumns.splice(selectColumnIndex, 1, selectAllColumn);
          newColumnOrder.splice(selectColumnIndex, 1, 'select');
        }
      }
      if (draggableRows) {
        var rowDragColumnIndex = newColumnOrder.indexOf('rowDrag');
        var rowDragColumn = {
          width: 30,
          id: 'rowDrag',
          accessor: 'rowDrag',
          draggable: false,
          sortable: false,
          isClickable: false,
          isRightClickable: false,
          header: React__default.createElement(reactFontawesome.FontAwesomeIcon, {
            // @ts-ignore
            icon: "" + (rowOrderIcon ? rowOrderIcon : 'sort'),
            className: "ml-4",
            title: "Drag rows"
          }),
          cell: function cell(row) {
            return React__default.createElement("div", {
              className: "cursor-move",
              onMouseDown: function onMouseDown() {
                setDraggingRowIndex(row.index);
              }
            }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
              // @ts-ignore
              icon: "" + (rowOrderIcon ? rowOrderIcon : 'sort'),
              className: "ml-4 "
            }));
          }
        };
        if (rowDragColumnIndex < 0) {
          newColumns.splice(0, 0, rowDragColumn);
          newColumnOrder.splice(0, 0, 'rowDrag');
        } else {
          newColumns.splice(rowDragColumnIndex, 1, rowDragColumn);
          newColumnOrder.splice(rowDragColumnIndex, 1, 'rowDrag');
        }
      }
      setColumns([].concat(newColumns));
      setColumnOrder([].concat(newColumnOrder));
    }
    function load(_x, _x2, _x3, _x4) {
      return _load.apply(this, arguments);
    }
    function _load() {
      _load = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(reset, page, pageSize, shouldLoad) {
        var _page, offset, pages, args, _yield$fetchFunction, _data, _count, _error;
        return _regeneratorRuntime().wrap(function _callee$(_context) {
          while (1) switch (_context.prev = _context.next) {
            case 0:
              if (!fetchFunction) {
                _context.next = 20;
                break;
              }
              if (reset || shouldLoad) {
                setIsLoading(true);
              }
              _page = reset ? 1 : page;
              offset = pageSize * (_page - 1);
              pages = 0;
              args = fetchFunctionArguments != null ? fetchFunctionArguments : {};
              if (!noPagination) {
                args.offset = offset;
                args.limit = pageSize;
              }
              if (orderingArguments) {
                args = _extends({}, args, orderingArguments);
              }
              _context.next = 10;
              return fetchFunction(args);
            case 10:
              _yield$fetchFunction = _context.sent;
              _data = _yield$fetchFunction.data;
              _count = _yield$fetchFunction.count;
              _error = _yield$fetchFunction.error;
              if (!noPagination) {
                pages = Math.ceil(_count / pageSize);
                setCount(_count);
                setPage(_page);
                setTotalPages(pages);
              }
              setRowOrder(_data.map(function (d) {
                return d[rowUniqueIdentifier];
              }));
              changeData(_data);
              setError(_error);
              setIsLoading(false);
              setIsInitialising(false);
            case 20:
            case "end":
              return _context.stop();
          }
        }, _callee);
      }));
      return _load.apply(this, arguments);
    }
    function repositionMenu() {
      // witchcraft to prevent long context menus from falling off bottom of screen
      var contextMenuElement = document.getElementById('table-dropdown-menu');
      var contextMenuContentElement = document.getElementById('context-content');
      if (!contextMenuElement || !contextMenuContentElement) return;
      var height = contextMenuContentElement.clientHeight + 20;
      var space = window.innerHeight - clickPosition.y;
      contextMenuElement.style.position = 'fixed';
      if (height > space) {
        setContextMenuMaxHeight(window.innerHeight);
        var top = 0;
        if (window.innerHeight - height > 0) {
          top = window.innerHeight - height;
        }
        contextMenuElement.style.top = top + "px";
        contextMenuElement.style.left = clickPosition.x + "px";
      } else {
        contextMenuElement.style.top = clickPosition.y + "px";
        contextMenuElement.style.left = clickPosition.x + "px";
      }
    }
    function renderEmptyRow() {
      return React__default.createElement("tr", null, React__default.createElement("td", {
        colSpan: columnOrder.length,
        className: "h-12"
      }));
    }
    function renderTable() {
      return React__default.createElement("div", {
        className: 'rounded-lg ' + (scrollableX ? 'scrollable-table-container' : ''),
        id: id + '_scrollable_container'
      }, React__default.createElement("table", {
        id: id,
        className: "custom-table"
      }, React__default.createElement("thead", {
        className: "custom-table-head"
      }, React__default.createElement("tr", {
        className: "custom-table-tr"
      }, columnOrder.map(function (columnId, columnIndex) {
        var column = getColumnById(columns, columnId);
        var columnStyle = {};
        var columnContentStyle = {};
        var columnWidth = getColumnWidth(columnWidths, columnId);
        if (columnWidth) {
          if (scrollableX) {
            columnContentStyle.width = columnWidth + 'px';
          } else {
            columnContentStyle.maxWidth = columnWidth + 'px';
          }
          columnStyle.width = columnWidth + 'px';
          columnContentStyle.whiteSpace = 'nowrap';
          columnContentStyle.overflow = 'hidden';
          columnContentStyle.textOverflow = 'ellipsis';
        }
        if (isColumnDraggable(column)) {
          columnStyle.cursor = 'move';
        } else {
          columnStyle.cursor = 'auto';
        }
        if (isColumnSortable(column)) {
          columnContentStyle.cursor = 'pointer';
        } else {
          columnContentStyle.cursor = 'auto';
        }
        return React__default.createElement("th", {
          style: columnStyle,
          id: columnId,
          key: columnId,
          onMouseDown: function onMouseDown() {
            if (isColumnDraggable(column) && !isLoading) {
              setDraggingColumnIndex(columnIndex);
            }
          },
          className: 'custom-table-th justify-between items-center font-bold'
        }, React__default.createElement("div", {
          className: "flex flex-row justify-between items-center "
        }, React__default.createElement("div", {
          className: "flex flex-row justify-between whitespace-nowrap mx-2"
        }, React__default.createElement("div", {
          style: columnContentStyle,
          onMouseDown: function onMouseDown(e) {
            if (isColumnSortable(column) && !isLoading) {
              e.stopPropagation();
              var args = {
                order: 'DESC',
                order_by: column.accessor
              };
              if (orderingArguments.order === 'DESC') {
                args.order = 'ASC';
              }
              setOrderingArguments(args);
            }
          }
        }, typeof column.header === 'function' ? column.header() : column.header)), isColumnResizable(column) ? React__default.createElement("div", {
          title: "Click and drag to resize",
          className: "resizer",
          id: column.id + '_resizer',
          onMouseDown: function onMouseDown(e) {
            e.preventDefault();
            e.stopPropagation();
            var columnElement = document.getElementById(column.id);
            if (columnElement && !isLoading) {
              columnElement == null ? void 0 : columnElement.classList.add('resizable');
              var columnStyles = window.getComputedStyle(columnElement);
              setResizeColumnStartWidth(parseInt(columnStyles.width, 10));
              setResizeColumnStartX(e.clientX);
              setResizeColumnId(column.id);
            }
          }
        }) : React__default.createElement("div", {
          className: "resizer-placeholder",
          onMouseDown: function onMouseDown(e) {
            e.preventDefault();
            e.stopPropagation();
          }
        })));
      }))), React__default.createElement("tbody", {
        className: "custom-table-tbody"
      }, rowOrder && rowOrder.length > 0 ? rowOrder.map(function (rowId, dataIndex) {
        var rowData = getDataByRowId(data, rowUniqueIdentifier, rowId);
        return React__default.createElement(CustomTableRow, {
          isLoading: isLoading,
          key: rowId,
          onShowMenu: function onShowMenu(show) {
            setShowMenu(show);
          },
          rowId: rowId,
          columnOrder: columnOrder,
          onRowClicked: onRowClicked,
          dataIndex: dataIndex,
          rowData: rowData,
          data: data,
          setData: changeData,
          columns: columns,
          columnWidths: columnWidths,
          updateRow: _updateRow,
          removeRow: _removeRow,
          onRightClick: function onRightClick(event, rowData, dataIndex) {
            setActiveRow({
              rowData: rowData,
              dataIndex: dataIndex
            });
            setShowMenu(true);
            setClickPosition({
              x: event == null ? void 0 : event.pageX,
              y: event == null ? void 0 : event.pageY
            });
          }
        });
      }) : renderEmptyRow())));
    }
    function renderPagination() {
      return !noPagination && React__default.createElement("div", {
        className: "-mt-3"
      }, React__default.createElement(Pagination, {
        handler: function handler(val) {
          var _page;
          var parsedVal = parseInt(val);
          if (parsedVal < 1) {
            _page = 1;
          } else if (parsedVal <= totalPages) {
            _page = parsedVal;
          } else {
            _page = totalPages;
          }
          setPage(_page);
          load(false, _page, pageSize, loadOnPageChange);
        },
        active: page,
        pages: totalPages,
        setActive: setPage,
        setRows: function setRows(val) {
          var parsedVal = parseInt(val);
          changePageSize(parsedVal, true);
          setPage(1);
        },
        rows: pageSize,
        scrollRef: topRef
      }));
    }
    function renderTableActions() {
      var title = '';
      if (props.renderTableActionsHeader) {
        title = props.renderTableActionsHeader(data, count, page, pageSize, isLoading);
      }
      if (props.renderTableActionsHeader || props.renderTableActionsChildren) {
        return props.renderTableActionsHeader && React__default.createElement(TableActionsPanel, {
          title: title
        }, props.renderTableActionsChildren && props.renderTableActionsChildren(data, isLoading));
      }
      return null;
    }
    function renderContextMenu() {
      return showMenu && (contextMenuHeader || contextMenuItems) && React__default.createElement(Dropdown.ContextMenu, {
        id: "table-dropdown-menu"
      }, React__default.createElement("div", {
        id: "context-content",
        style: {
          maxHeight: contextMenuMaxHeight,
          overflowY: 'scroll'
        }
      }, contextMenuHeader && React__default.createElement(React__default.Fragment, null, React__default.createElement("label", {
        className: "text-center block pb-2"
      }, contextMenuHeader({
        original: activeRow.rowData,
        index: activeRow.dataIndex,
        updateRow: function updateRow(value) {
          _updateRow(value, activeRow.dataIndex);
        },
        removeRow: function removeRow() {
          _removeRow(activeRow.dataIndex);
        }
      })), React__default.createElement("hr", null)), contextMenuItems && React__default.createElement("label", {
        className: "text-left block"
      }, contextMenuItems({
        original: activeRow.rowData,
        index: activeRow.dataIndex,
        updateRow: function updateRow(value) {
          _updateRow(value, activeRow.dataIndex);
        },
        removeRow: function removeRow() {
          _removeRow(activeRow.dataIndex);
        }
      }))));
    }
    function render() {
      return React__default.createElement("div", null, error && React__default.createElement(Message.Error, null, error), isLoading && data.length === 0 ? React__default.createElement(Loader.Inline, null) : React__default.createElement("div", null, renderTableActions(), React__default.createElement("div", {
        ref: topRef,
        className: " custom-table-container rounded-lg relative"
      }, rowOrder && rowOrder.length === 0 && React__default.createElement("div", {
        className: "no-data"
      }, noDataText != null ? noDataText : 'No data'), renderTable(), renderPagination(), renderContextMenu())));
    }
    return render();
  }
  _s25(CustomTable, "/CP9d1QwWRV8xdPtKYXTGzv/r/k=");
  _c61 = CustomTable;
  var DatePickerCtx = /*#__PURE__*/React.createContext({
    date: /*#__PURE__*/new Date(),
    minDate: undefined,
    maxDate: undefined,
    visible: {
      month: 0,
      year: 1970
    },
    time: {
      hours: 0,
      minutes: 0
    },
    view: "date",
    nextMonth: function nextMonth() {},
    prevMonth: function prevMonth() {},
    nextYear: function nextYear() {},
    prevYear: function prevYear() {},
    nextDecade: function nextDecade() {},
    prevDecade: function prevDecade() {},
    selectMinutes: function selectMinutes() {},
    selectHours: function selectHours() {},
    selectMonth: function selectMonth() {},
    selectYear: function selectYear() {},
    selectDate: function selectDate() {},
    viewMonths: function viewMonths() {},
    viewYears: function viewYears() {},
    isVisible: false,
    showCalendar: function showCalendar() {},
    toggleCalendar: function toggleCalendar() {},
    isSelectedDate: function isSelectedDate() {
      return false;
    },
    isWithinRange: function isWithinRange() {
      return true;
    },
    showTimeSelect: false
  });
  function useDatePickerCtx(date, onChange, onDatePickerClose, showTimeSelect, ref, minDate, maxDate) {
    _s26();
    var _date$getMonth, _date$getFullYear, _date$getHours, _date$getMinutes;
    var _useState = React.useState({
      month: (_date$getMonth = date == null ? void 0 : date.getMonth()) != null ? _date$getMonth : new Date().getMonth(),
      year: (_date$getFullYear = date == null ? void 0 : date.getFullYear()) != null ? _date$getFullYear : new Date().getFullYear()
    }), monthYear = _useState[0], setMonthYear = _useState[1];
    var _useState2 = React.useState({
      hours: (_date$getHours = date == null ? void 0 : date.getHours()) != null ? _date$getHours : new Date().getHours(),
      minutes: (_date$getMinutes = date == null ? void 0 : date.getMinutes()) != null ? _date$getMinutes : new Date().getMinutes()
    }), time = _useState2[0], setTime = _useState2[1];
    var _useState3 = React.useState("date"), view = _useState3[0], setView = _useState3[1];
    var _useState4 = React.useState(false), isVisible = _useState4[0], setVisible = _useState4[1];
    var _useState5 = React.useState(true), isInitialRender = _useState5[0], setIsInitialRender = _useState5[1];
    React.useEffect(function () {
      if (isInitialRender) {
        setIsInitialRender(false);
      } else if (isVisible === false) {
        if (onDatePickerClose) {
          onDatePickerClose();
        }
      }
    }, [isVisible]);
    var selectDate = function selectDate(d) {
      if (showTimeSelect) {
        onChange(new Date(monthYear.year, monthYear.month, d, time.hours, time.minutes));
      } else {
        onChange(new Date(monthYear.year, monthYear.month, d));
      }
      if (!showTimeSelect) {
        setVisible(false);
      }
    };
    var isWithinRange = function isWithinRange(d) {
      var inRange = true;
      var date;
      if (showTimeSelect) {
        date = new Date(monthYear.year, monthYear.month, d, time.hours, time.minutes);
      } else {
        date = new Date(monthYear.year, monthYear.month, d);
      }
      if (minDate) {
        if (moment(date).isBefore(minDate)) {
          inRange = false;
        }
      }
      if (maxDate) {
        if (moment(date).isAfter(maxDate)) {
          inRange = false;
        }
      }
      return inRange;
    };
    var isSelectedDate = function isSelectedDate(d) {
      if (d === date.getDate() && monthYear.month === date.getMonth() && monthYear.year === date.getFullYear()) {
        return true;
      }
      return false;
    };
    var selectMinutes = function selectMinutes(m) {
      setTime(function (state) {
        return _extends({}, state, {
          minutes: m
        });
      });
      var newDate = date;
      newDate.setHours(time.hours);
      newDate.setMinutes(m);
      onChange(new Date(newDate));
    };
    var selectHours = function selectHours(h) {
      setTime(function (state) {
        return _extends({}, state, {
          hours: h
        });
      });
      var newDate = date;
      newDate.setHours(h);
      newDate.setMinutes(time.minutes);
      onChange(new Date(newDate));
    };
    var selectMonth = function selectMonth(m) {
      setMonthYear(function (state) {
        return _extends({}, state, {
          month: m
        });
      });
      setView("date");
    };
    var selectYear = function selectYear(y) {
      setMonthYear(function (state) {
        return _extends({}, state, {
          year: y
        });
      });
      setView("month");
    };
    React.useEffect(function () {
      function mouseDownListener(e) {
        var targetAsNode = e.target;
        // @ts-ignore
        if (ref.current && !ref.current.contains(targetAsNode)) {
          setVisible(false);
        }
      }
      if (isVisible) {
        setMonthYear({
          month: date.getMonth(),
          year: date.getFullYear()
        });
        document.addEventListener("mousedown", mouseDownListener);
      }
      return function () {
        document.removeEventListener("mousedown", mouseDownListener);
      };
    }, [isVisible]);
    return {
      date: date,
      visible: monthYear,
      time: time,
      view: view,
      nextMonth: function nextMonth() {
        return setMonthYear(function (state) {
          return state.month >= 11 ? {
            month: 0,
            year: state.year + 1
          } : {
            month: state.month + 1,
            year: state.year
          };
        });
      },
      prevMonth: function prevMonth() {
        return setMonthYear(function (state) {
          return state.month <= 0 ? {
            month: 11,
            year: state.year - 1
          } : {
            month: state.month - 1,
            year: state.year
          };
        });
      },
      nextYear: function nextYear() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year + 1
          });
        });
      },
      prevYear: function prevYear() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year - 1
          });
        });
      },
      nextDecade: function nextDecade() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year + 12
          });
        });
      },
      prevDecade: function prevDecade() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year - 12
          });
        });
      },
      selectMinutes: selectMinutes,
      selectHours: selectHours,
      selectMonth: selectMonth,
      selectYear: selectYear,
      selectDate: selectDate,
      viewMonths: function viewMonths() {
        return setView("month");
      },
      viewYears: function viewYears() {
        return setView("year");
      },
      isVisible: isVisible,
      showCalendar: function showCalendar() {
        return setVisible(true);
      },
      toggleCalendar: function toggleCalendar() {
        return setVisible(function (state) {
          return !state;
        });
      },
      isSelectedDate: isSelectedDate,
      isWithinRange: isWithinRange,
      showTimeSelect: showTimeSelect
    };
  }
  _s26(useDatePickerCtx, "AFEi+rPupCmOtg9tPt/KI9jxsO8=");
  // Derived from https://github.com/fareez-ahamed/react-datepicker
  var daysOfWeekNames = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"];
  var monthNames = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  // Implementation
  function DatePicker(props) {
    _s27();
    var selected = props.selected, label = props.label, labelInline = props.labelInline, placeholder = props.placeholder, dateFormat = props.dateFormat, containerClassName = props.containerClassName, onChange = props.onChange, onDatePickerClose = props.onDatePickerClose, showTimeSelect = props.showTimeSelect, disabled = props.disabled, minDate = props.minDate, maxDate = props.maxDate, dataTest = props.dataTest;
    var date = new Date();
    if (selected) {
      date = moment(selected).toDate();
    }
    var popupNode = React.useRef();
    var ctxValue = useDatePickerCtx(date, onChange, onDatePickerClose, Boolean(showTimeSelect), popupNode, minDate, maxDate);
    return React__default.createElement(DatePickerCtx.Provider, {
      value: ctxValue,
      key: ctxValue.isVisible.toString()
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", null, React__default.createElement(Input, {
        reference: ref,
        onKeyPress: function onKeyPress(e) {
          if (e.key === "Enter") {
            ctxValue.toggleCalendar();
          }
        },
        onClick: function onClick() {
          ctxValue.toggleCalendar();
        },
        value: selected ? formattedDate(dateFormat, date) : "",
        readOnly: true,
        label: label,
        labelInline: labelInline,
        containerClassName: containerClassName,
        placeholder: placeholder,
        appendIcon: disabled ? undefined : ctxValue.isVisible ? "caret-up" : "caret-down",
        onAppendIconClick: function onAppendIconClick() {
          ctxValue.toggleCalendar();
        },
        appendIconColor: "text-gray-400",
        disabled: disabled,
        dataTest: dataTest
      }));
    }), !disabled && // @ts-ignore
    React__default.createElement(reactPopper.Popper, {
      placement: "bottom-start",
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      },
      modifiers: [{
        name: "offset",
        options: {
          offset: [0, 5]
        }
      }]
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style, placement = _ref2.placement;
      return ctxValue.isVisible ? React__default.createElement("div", null, React__default.createElement(Calendar, {
        placement: placement,
        style: style,
        ref: ref
      })) : null;
    })));
  }
  _s27(DatePicker, "ELxqNcWjHEmwDuI3s1gdjXKtO0g=", false, function () {
    return [useDatePickerCtx];
  });
  _c62 = DatePicker;
  var Calendar = /*#__PURE__*/React__default.forwardRef(_c63 = _s28(function (props, ref) {
    _s28();
    var _useContext = React.useContext(DatePickerCtx), view = _useContext.view;
    var selectionComponent = null;
    switch (view) {
      case "date":
        selectionComponent = React__default.createElement(DateSelection, null);
        break;
      case "month":
        selectionComponent = React__default.createElement(MonthSelection, null);
        break;
      case "year":
        selectionComponent = React__default.createElement(YearSelection, null);
        break;
    }
    return React__default.createElement("div", {
      className: "bg-white z-40 relative shadow-lg max-w-xs w-64 p-2 rounded-lg u-black-ring",
      ref: ref,
      "data-placement": props.placement,
      // @ts-ignore
      style: props.style
    }, selectionComponent);
  }, "ySleuVEGUHOXu8arixTynPLQ8z8="));
  _c64 = Calendar;
  var TimeSelection = function TimeSelection(_) {
    _s29();
    var _useContext2 = React.useContext(DatePickerCtx), selectHours = _useContext2.selectHours, selectMinutes = _useContext2.selectMinutes, date = _useContext2.date;
    return React__default.createElement("div", {
      className: "mt-1 text-center"
    }, React__default.createElement("div", null, React__default.createElement("b", null, "Time")), React__default.createElement("div", {
      className: "u-horizontal-center flex-row time-picker"
    }, React__default.createElement("div", {
      style: {
        width: "55px"
      }
    }, React__default.createElement(Input, {
      label: "",
      labelInline: true,
      type: "number",
      step: 1,
      min: 0,
      max: 23,
      defaultValue: moment(date).format("HH"),
      placeholder: "hh",
      onChange: function onChange(e) {
        var hours = e.target.value;
        try {
          hours = parseInt(hours);
          if (isNaN(hours)) {
            selectHours(0);
            return;
          }
          if (hours < 0) {
            hours = 0;
          } else if (hours > 23) {
            hours = 23;
          }
          selectHours(hours);
        } catch (e) {
          selectHours(0);
        }
      }
    })), React__default.createElement("div", {
      className: "mt-2 pl-2"
    }, React__default.createElement(Label, null, ":")), React__default.createElement("div", {
      style: {
        width: "55px"
      }
    }, React__default.createElement(Input, {
      label: "",
      labelInline: true,
      type: "number",
      step: 1,
      min: 0,
      max: 59,
      defaultValue: moment(date).format("mm"),
      placeholder: "mm",
      onChange: function onChange(e) {
        var minutes = e.target.value;
        try {
          minutes = parseInt(minutes);
          if (isNaN(minutes)) {
            selectMinutes(0);
            return;
          }
          if (minutes < 0) {
            minutes = 0;
          } else if (minutes > 59) {
            minutes = 59;
          }
          selectMinutes(minutes);
        } catch (e) {
          selectMinutes(0);
        }
      }
    }))));
  };
  _s29(TimeSelection, "P24U2E9zohHrHYfI44GhIIfLTj8=");
  _c65 = TimeSelection;
  var DateSelection = function DateSelection(_) {
    _s30();
    var _useContext3 = React.useContext(DatePickerCtx), nextMonth = _useContext3.nextMonth, prevMonth = _useContext3.prevMonth, viewMonths = _useContext3.viewMonths, viewYears = _useContext3.viewYears, selectDate = _useContext3.selectDate, _useContext3$visible = _useContext3.visible, month = _useContext3$visible.month, year = _useContext3$visible.year, isSelectedDate = _useContext3.isSelectedDate, showTimeSelect = _useContext3.showTimeSelect, isWithinRange = _useContext3.isWithinRange;
    var dates = [];
    for (var i = 0; i < beginningDayOfWeek(month, year); i++) {
      dates.push(React__default.createElement("div", {
        key: "emptybefore" + i
      }));
    }
    var _loop = function _loop(_i) {
      var inRange = isWithinRange(_i);
      dates.push(React__default.createElement("button", {
        tabIndex: 0,
        key: "day" + _i,
        className: "u-focus hover:bg-gray-200 rounded p-1 " + (isSelectedDate(_i) ? "bg-gray-300 font-semibold " : "") + "\n        \n        " + (inRange ? "" : " text-gray-400 cursor-not-allowed"),
        onClick: function onClick(e) {
          e.preventDefault();
          if (!inRange) {
            return;
          }
          selectDate(_i);
        },
        style: {
          textAlign: "center"
        }
      }, _i));
    };
    for (var _i = 1; _i <= daysInMonth(month, year); _i++) {
      _loop(_i);
    }
    return React__default.createElement("div", null, React__default.createElement("div", {
      className: "text-gray-800",
      style: {
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr 1fr 1fr 1fr 1fr",
        gridTemplateRows: "2rem auto",
        alignItems: "stretch"
      }
    }, React__default.createElement("button", {
      tabIndex: 0,
      className: "u-focus hover:bg-gray-200 rounded p-1 u-horizontal-center align-center focus:outline-none items-center",
      onClick: function onClick(e) {
        e.preventDefault();
        prevMonth();
      }
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-left",
      className: "stroke-current"
    })), React__default.createElement("button", {
      tabIndex: 0,
      className: "u-focus hover:bg-gray-200 rounded p-1 u-horizontal-center align-center  focus:outline-none items-center font-semibold",
      style: {
        gridColumn: "2/5"
      },
      onClick: function onClick() {
        return viewMonths();
      }
    }, monthNames[month]), React__default.createElement("button", {
      tabIndex: 0,
      className: "u-focus hover:bg-gray-200 rounded p-1 u-horizontal-center align-center focus:outline-none items-center font-semibold",
      style: {
        gridColumn: "5/7"
      },
      onClick: function onClick() {
        return viewYears();
      }
    }, year), React__default.createElement("button", {
      tabIndex: 0,
      className: "u-focus hover:bg-gray-200 rounded p-1 u-horizontal-center align-center focus:outline-none items-center",
      onClick: function onClick(e) {
        e.preventDefault();
        nextMonth();
      }
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-right",
      className: "stroke-current"
    })), daysOfWeekNames.map(function (day) {
      return React__default.createElement("div", {
        key: (200 + day).toString(),
        className: "p-1 font-semibold",
        style: {
          textAlign: "center"
        }
      }, day[0]);
    }), dates), showTimeSelect && React__default.createElement(TimeSelection, null));
  };
  _s30(DateSelection, "qTeGHRVsYcgdNyTkIo0pIPrBEkg=");
  _c66 = DateSelection;
  var MonthSelection = function MonthSelection(_) {
    _s31();
    var _useContext4 = React.useContext(DatePickerCtx), viewYears = _useContext4.viewYears, selectMonth = _useContext4.selectMonth, nextYear = _useContext4.nextYear, prevYear = _useContext4.prevYear, visible = _useContext4.visible;
    return React__default.createElement("div", {
      className: "h-48",
      style: {
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr 1fr",
        gridTemplateRows: "2rem auto",
        alignItems: "stretch"
      }
    }, React__default.createElement("div", {
      className: "flex",
      style: {
        gridColumn: "1/5"
      }
    }, React__default.createElement(CalendarButton, {
      chevron: "left",
      onClick: function onClick(e) {
        e.preventDefault();
        prevYear();
      }
    }), React__default.createElement(CalendarButton, {
      className: "flex-grow",
      onClick: function onClick() {
        return viewYears();
      }
    }, visible.year), React__default.createElement(CalendarButton, {
      chevron: "right",
      onClick: function onClick(e) {
        e.preventDefault();
        nextYear();
      }
    })), monthNames.map(function (month, index) {
      return React__default.createElement(CalendarButton, {
        key: "month" + index,
        onClick: function onClick() {
          return selectMonth(index);
        }
      }, month.substring(0, 3));
    }));
  };
  _s31(MonthSelection, "o/L2ezYvYVfV6ccyGrCzypntjJU=");
  _c67 = MonthSelection;
  var YearSelection = function YearSelection(_) {
    _s32();
    var _useContext5 = React.useContext(DatePickerCtx), selectYear = _useContext5.selectYear, prevDecade = _useContext5.prevDecade, nextDecade = _useContext5.nextDecade, year = _useContext5.visible.year;
    var years = [];
    var minYear = year - 6, maxYear = year + 6;
    var _loop2 = function _loop2(i) {
      years.push(React__default.createElement(CalendarButton, {
        key: "year" + i,
        onClick: function onClick(e) {
          e.preventDefault();
          selectYear(i);
        }
      }, i));
    };
    for (var i = minYear; i < maxYear; i++) {
      _loop2(i);
    }
    return React__default.createElement("div", {
      className: "h-48",
      style: {
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr 1fr",
        gridTemplateRows: "2rem auto",
        alignItems: "stretch"
      }
    }, React__default.createElement("div", {
      className: "flex",
      style: {
        gridColumn: "1/5"
      }
    }, React__default.createElement(CalendarButton, {
      chevron: "left",
      onClick: function onClick(e) {
        e.preventDefault();
        prevDecade();
      }
    }), React__default.createElement(CalendarButton, {
      onClick: function onClick(e) {
        e.preventDefault();
      },
      className: "flex-grow"
    }, minYear + " - " + (maxYear - 1)), React__default.createElement(CalendarButton, {
      chevron: "right",
      onClick: function onClick(e) {
        e.preventDefault();
        nextDecade();
      }
    })), years);
  };
  _s32(YearSelection, "VkeE3vSwb4P8hVIJtHTM7wNLHWA=");
  _c68 = YearSelection;
  var CalendarButton = function CalendarButton(props) {
    var children = null;
    if (props.chevron && props.chevron === "left") children = React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-left",
      className: "stroke-current"
    }); else if (props.chevron && props.chevron === "right") children = React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-right",
      className: "stroke-current"
    }); else children = props.children;
    return React__default.createElement("button", {
      tabIndex: 0,
      className: "hover:bg-gray-200 rounded p-1 u-horizontal-center align-center u-focus items-center " + props.className,
      // @ts-ignore
      style: props.style,
      onClick: props.onClick
    }, children);
  };
  _c69 = CalendarButton;
  function formattedDate(dateFormat, date) {
    if (!dateFormat) {
      return date.getDate() + " " + monthNames[date.getMonth()] + " " + date.getFullYear();
    } else {
      return moment(date).format(dateFormat);
    }
  }
  function beginningDayOfWeek(m, y) {
    return new Date(y, m, 1).getDay();
  }
  function daysInMonth(month, year) {
    switch (month) {
      case 0:
      case 2:
      case 4:
      case 6:
      case 7:
      case 9:
      case 11:
        return 31;
      case 1:
        return isLeapYear(year) ? 29 : 28;
      default:
        return 30;
    }
  }
  function isLeapYear(year) {
    return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
  }
  var MonthPickerCtx = /*#__PURE__*/React.createContext({
    date: /*#__PURE__*/new Date(),
    minDate: undefined,
    maxDate: undefined,
    visible: {
      month: 0,
      year: 1970
    },
    view: "month",
    nextMonth: function nextMonth() {},
    prevMonth: function prevMonth() {},
    nextYear: function nextYear() {},
    prevYear: function prevYear() {},
    nextDecade: function nextDecade() {},
    prevDecade: function prevDecade() {},
    selectMonth: function selectMonth() {},
    selectYear: function selectYear() {},
    viewMonths: function viewMonths() {},
    viewYears: function viewYears() {},
    isVisible: false,
    showCalendar: function showCalendar() {},
    toggleCalendar: function toggleCalendar() {},
    isSelectedMonth: function isSelectedMonth() {
      return false;
    },
    isWithinRange: function isWithinRange() {
      return true;
    }
  });
  function useMonthPickerCtx(date, onChange, onMonthPickerClose, ref, minDate, maxDate) {
    _s33();
    var _date$getMonth, _date$getFullYear;
    var _useState = React.useState({
      month: (_date$getMonth = date == null ? void 0 : date.getMonth()) != null ? _date$getMonth : new Date().getMonth(),
      year: (_date$getFullYear = date == null ? void 0 : date.getFullYear()) != null ? _date$getFullYear : new Date().getFullYear()
    }), monthYear = _useState[0], setMonthYear = _useState[1];
    var _useState2 = React.useState("month"), view = _useState2[0], setView = _useState2[1];
    var _useState3 = React.useState(false), isVisible = _useState3[0], setVisible = _useState3[1];
    var _useState4 = React.useState(true), isInitialRender = _useState4[0], setIsInitialRender = _useState4[1];
    React.useEffect(function () {
      if (isInitialRender) {
        setIsInitialRender(false);
      } else if (isVisible === false) {
        if (onMonthPickerClose) {
          onMonthPickerClose();
        }
      }
    }, [isVisible]);
    var isWithinRange = function isWithinRange(d) {
      var inRange = true;
      var date;
      date = new Date(monthYear.year, monthYear.month, d);
      if (minDate) {
        if (moment(date).isBefore(minDate)) {
          inRange = false;
        }
      }
      if (maxDate) {
        if (moment(date).isAfter(maxDate)) {
          inRange = false;
        }
      }
      return inRange;
    };
    var isSelectedMonth = function isSelectedMonth(m) {
      if (m === date.getMonth() && monthYear.year === date.getFullYear()) {
        return true;
      }
      return false;
    };
    var selectMonth = function selectMonth(m) {
      setMonthYear(function (state) {
        return _extends({}, state, {
          month: m
        });
      });
      var dateFrom = new Date(monthYear.year, m, 1);
      onChange(dateFrom);
      setVisible(false);
    };
    var selectYear = function selectYear(y) {
      setMonthYear(function (state) {
        return _extends({}, state, {
          year: y
        });
      });
      setView("month");
    };
    React.useEffect(function () {
      function mouseDownListener(e) {
        var targetAsNode = e.target;
        // @ts-ignore
        if (ref.current && !ref.current.contains(targetAsNode)) {
          setVisible(false);
        }
      }
      if (isVisible) {
        setMonthYear({
          month: date.getMonth(),
          year: date.getFullYear()
        });
        document.addEventListener("mousedown", mouseDownListener);
      }
      return function () {
        document.removeEventListener("mousedown", mouseDownListener);
      };
    }, [isVisible]);
    return {
      date: date,
      visible: monthYear,
      view: view,
      nextMonth: function nextMonth() {
        return setMonthYear(function (state) {
          return state.month >= 11 ? {
            month: 0,
            year: state.year + 1
          } : {
            month: state.month + 1,
            year: state.year
          };
        });
      },
      prevMonth: function prevMonth() {
        return setMonthYear(function (state) {
          return state.month <= 0 ? {
            month: 11,
            year: state.year - 1
          } : {
            month: state.month - 1,
            year: state.year
          };
        });
      },
      nextYear: function nextYear() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year + 1
          });
        });
      },
      prevYear: function prevYear() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year - 1
          });
        });
      },
      nextDecade: function nextDecade() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year + 12
          });
        });
      },
      prevDecade: function prevDecade() {
        return setMonthYear(function (state) {
          return _extends({}, state, {
            year: state.year - 12
          });
        });
      },
      selectMonth: selectMonth,
      selectYear: selectYear,
      viewMonths: function viewMonths() {
        return setView("month");
      },
      viewYears: function viewYears() {
        return setView("year");
      },
      isVisible: isVisible,
      showCalendar: function showCalendar() {
        return setVisible(true);
      },
      toggleCalendar: function toggleCalendar() {
        return setVisible(function (state) {
          return !state;
        });
      },
      isSelectedMonth: isSelectedMonth,
      isWithinRange: isWithinRange
    };
  }
  _s33(useMonthPickerCtx, "OC61kzONt9qHKUFl577TVfLTOyg=");
  var monthNames$1 = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"];
  function MonthPicker(props) {
    _s34();
    var dateFrom = props.dateFrom, label = props.label, labelInline = props.labelInline, placeholder = props.placeholder, containerClassName = props.containerClassName, onChange = props.onChange, onMonthPickerClose = props.onMonthPickerClose, disabled = props.disabled, minDate = props.minDate, maxDate = props.maxDate, dataTest = props.dataTest;
    var date = new Date();
    if (dateFrom) {
      date = moment(dateFrom).toDate();
    }
    var popupNode = React.useRef();
    var ctxValue = useMonthPickerCtx(date, onChange, onMonthPickerClose, popupNode, minDate, maxDate);
    return React__default.createElement(MonthPickerCtx.Provider, {
      value: ctxValue,
      key: ctxValue.isVisible.toString()
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", null, React__default.createElement(Input, {
        reference: ref,
        pointer: true,
        onKeyPress: function onKeyPress(e) {
          if (e.key === "Enter") {
            ctxValue.toggleCalendar();
          }
        },
        onClick: function onClick() {
          ctxValue.toggleCalendar();
        },
        value: dateFrom ? moment(date).format("MMMM YYYY") : "",
        readOnly: true,
        label: label,
        dataTest: dataTest,
        labelInline: labelInline,
        containerClassName: containerClassName,
        placeholder: placeholder,
        appendIcon: disabled ? undefined : ctxValue.isVisible ? "caret-up" : "caret-down",
        onAppendIconClick: function onAppendIconClick() {
          ctxValue.toggleCalendar();
        },
        appendIconColor: "text-gray-400",
        disabled: disabled
      }));
    }), !disabled && // @ts-ignore
    React__default.createElement(reactPopper.Popper, {
      placement: "bottom-start",
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      },
      modifiers: [{
        name: "offset",
        options: {
          offset: [0, 5]
        }
      }]
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style, placement = _ref2.placement;
      return ctxValue.isVisible ? React__default.createElement("div", null, React__default.createElement(Calendar$1, {
        placement: placement,
        style: style,
        ref: ref
      })) : null;
    })));
  }
  _s34(MonthPicker, "FeD7luzJBqSpChsy6fYg8hcxUDQ=", false, function () {
    return [useMonthPickerCtx];
  });
  _c70 = MonthPicker;
  var Calendar$1 = /*#__PURE__*/React__default.forwardRef(_c71 = _s35(function (props, ref) {
    _s35();
    var _useContext = React.useContext(MonthPickerCtx), view = _useContext.view;
    var selectionComponent = null;
    switch (view) {
      case "month":
        selectionComponent = React__default.createElement(MonthSelection$1, null);
        break;
      case "year":
        selectionComponent = React__default.createElement(YearSelection$1, null);
        break;
    }
    return React__default.createElement("div", {
      className: "u-focus bg-white z-40 relative shadow-lg max-w-xs w-64 p-2 rounded-lg u-black-ring",
      ref: ref,
      "data-placement": props.placement,
      // @ts-ignore
      style: props.style
    }, selectionComponent);
  }, "ySleuVEGUHOXu8arixTynPLQ8z8="));
  _c72 = Calendar$1;
  var MonthSelection$1 = function MonthSelection(_) {
    _s36();
    var _useContext2 = React.useContext(MonthPickerCtx), viewYears = _useContext2.viewYears, selectMonth = _useContext2.selectMonth, nextYear = _useContext2.nextYear, prevYear = _useContext2.prevYear, visible = _useContext2.visible, isSelectedMonth = _useContext2.isSelectedMonth, isWithinRange = _useContext2.isWithinRange;
    return React__default.createElement("div", {
      className: "h-48",
      style: {
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr 1fr",
        gridTemplateRows: "2rem auto",
        alignItems: "stretch"
      }
    }, React__default.createElement("div", {
      className: "flex",
      style: {
        gridColumn: "1/5"
      }
    }, React__default.createElement(CalendarButton$1, {
      chevron: "left",
      onClick: function onClick() {
        return prevYear();
      }
    }), React__default.createElement(CalendarButton$1, {
      className: "flex-grow",
      onClick: function onClick() {
        return viewYears();
      }
    }, visible.year), React__default.createElement(CalendarButton$1, {
      chevron: "right",
      onClick: function onClick() {
        return nextYear();
      }
    })), monthNames$1.map(function (month, index) {
      var inRange = isWithinRange(index);
      return React__default.createElement(CalendarButton$1, {
        key: month,
        onClick: function onClick() {
          if (inRange) {
            selectMonth(index);
          }
        },
        className: "u-focus hover:bg-gray-200 rounded p-1 " + (isSelectedMonth(index) ? "bg-gray-300 font-semibold " : "") + "\n            " + (inRange ? "" : " text-gray-400 cursor-not-allowed")
      }, month.substring(0, 3));
    }));
  };
  _s36(MonthSelection$1, "P24U2E9zohHrHYfI44GhIIfLTj8=");
  _c73 = MonthSelection$1;
  var YearSelection$1 = function YearSelection(_) {
    _s37();
    var _useContext3 = React.useContext(MonthPickerCtx), selectYear = _useContext3.selectYear, prevDecade = _useContext3.prevDecade, nextDecade = _useContext3.nextDecade, year = _useContext3.visible.year;
    var years = [];
    var minYear = year - 6, maxYear = year + 6;
    var _loop = function _loop(i) {
      years.push(React__default.createElement(CalendarButton$1, {
        key: i,
        onClick: function onClick() {
          return selectYear(i);
        }
      }, i));
    };
    for (var i = minYear; i < maxYear; i++) {
      _loop(i);
    }
    return React__default.createElement("div", {
      className: "h-48",
      style: {
        display: "grid",
        gridTemplateColumns: "1fr 1fr 1fr 1fr",
        gridTemplateRows: "2rem auto",
        alignItems: "stretch"
      }
    }, React__default.createElement("div", {
      className: "flex",
      style: {
        gridColumn: "1/5"
      }
    }, React__default.createElement(CalendarButton$1, {
      chevron: "left",
      onClick: function onClick() {
        return prevDecade();
      }
    }), React__default.createElement(CalendarButton$1, {
      className: "flex-grow"
    }, minYear + " - " + (maxYear - 1)), React__default.createElement(CalendarButton$1, {
      chevron: "right",
      onClick: function onClick() {
        return nextDecade();
      }
    })), years);
  };
  _s37(YearSelection$1, "qTeGHRVsYcgdNyTkIo0pIPrBEkg=");
  _c74 = YearSelection$1;
  var CalendarButton$1 = function CalendarButton(props) {
    var children = null;
    if (props.chevron && props.chevron === "left") children = React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-left",
      className: "stroke-current"
    }); else if (props.chevron && props.chevron === "right") children = React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-right",
      className: "stroke-current"
    }); else children = props.children;
    return React__default.createElement("button", {
      tabIndex: 0,
      className: "hover:bg-gray-200 rounded p-1 u-horizontal-center align-center u-focus items-center " + props.className,
      // @ts-ignore
      style: props.style,
      onClick: props.onClick
    }, children);
  };
  _c75 = CalendarButton$1;
  function DateRange(props) {
    _s38();
    var _dateFrom3, _dateTo3, _dateFrom4;
    var showRange = props.showRange, showMonth = props.showMonth, period = props.period, defaultPeriod = props.defaultPeriod, dateFrom = props.dateFrom, defaultDateFrom = props.defaultDateFrom, dateTo = props.dateTo, defaultDateTo = props.defaultDateTo, onPeriodChange = props.onPeriodChange, onRangeChange = props.onRangeChange, onMonthChange = props.onMonthChange, periodOptions = props.periodOptions, containerClassName = props.containerClassName, label = props.label, disabled = props.disabled;
    React.useEffect(function () {
      if (showMonth && onMonthChange) {
        var _dateFrom, _dateTo;
        // ensure default values are from start to end of month
        var defaultToMonth = Date.parse(moment(defaultDateTo).endOf('month').format('YYYY-MM-DD HH:mm:ss'));
        var defaultFromMonth = Date.parse(moment(defaultDateTo).startOf('month').format('YYYY-MM-DD HH:mm:ss'));
        if (dateFrom) {
          dateFrom = moment(dateFrom).startOf('month').format('YYYY-MM-DD HH:mm:ss');
          // removed .format("YYYY-MM-DD HH:mm:ss) to make things work on safari
          dateTo = moment(dateFrom).endOf('month').format('YYYY-MM-DD HH:mm:ss');
        }
        onMonthChange((_dateFrom = dateFrom) != null ? _dateFrom : defaultFromMonth, (_dateTo = dateTo) != null ? _dateTo : defaultToMonth);
      } else if (showRange && onRangeChange) {
        var _dateFrom2, _dateTo2;
        onRangeChange((_dateFrom2 = dateFrom) != null ? _dateFrom2 : defaultDateFrom, (_dateTo2 = dateTo) != null ? _dateTo2 : defaultDateTo);
      } else if (onPeriodChange) {
        onPeriodChange(period != null ? period : defaultPeriod);
      }
    }, [showRange, showMonth]);
    return React__default.createElement("div", {
      className: containerClassName != null ? containerClassName : 'flex flex-row space-x-4'
    }, React__default.createElement(Select, {
      options: periodOptions != null ? periodOptions : [],
      onChange: function onChange(val) {
        if (onPeriodChange) {
          onPeriodChange(val);
        }
      },
      placeholder: 'Select period',
      value: period != null ? period : defaultPeriod,
      label: label,
      disabled: disabled
    }), showRange && React__default.createElement(React__default.Fragment, null, React__default.createElement(DatePicker, {
      label: "From",
      selected: (_dateFrom3 = dateFrom) != null ? _dateFrom3 : defaultDateFrom,
      onChange: function onChange(val) {
        if (onRangeChange) {
          onRangeChange(val, dateTo);
        }
      },
      dateFormat: 'yyyy-MM-DD'
    }), React__default.createElement(DatePicker, {
      label: "To",
      selected: (_dateTo3 = dateTo) != null ? _dateTo3 : defaultDateTo,
      onChange: function onChange(val) {
        if (onRangeChange) {
          onRangeChange(dateFrom, val);
        }
      },
      dateFormat: 'yyyy-MM-DD'
    })), showMonth && React__default.createElement("div", null, React__default.createElement(MonthPicker, {
      label: "Select month",
      dateFrom: (_dateFrom4 = dateFrom) != null ? _dateFrom4 : defaultDateFrom,
      onChange: function onChange(dateFrom) {
        if (onMonthChange) {
          // @ts-ignore
          var _dateTo4 = new Date(moment(dateFrom).endOf('month'));
          onMonthChange(dateFrom, _dateTo4);
        }
      }
    })));
  }
  _s38(DateRange, "OD7bBpZva5O2jO+Puf00hKivP7c=");
  _c76 = DateRange;
  DateRange.defaultProps = {
    label: 'Filter by period'
  };
  function IconWithBackground(props) {
    var icon = props.icon, color = props.color;
    return React__default.createElement("div", {
      className: 'rounded-full u-center h-8 w-8 bg-' + (color ? color : 'black') + '-100'
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      size: "sm",
      icon: icon,
      className: 'text-' + (color ? color : 'black') + '-500'
    }));
  }
  _c77 = IconWithBackground;
  function InfoPopover(props) {
    _s41();
    var _s39 = $RefreshSig$(), _s40 = $RefreshSig$();
    function Portal(props) {
      _s39();
      var children = props.children;
      var _useState = React.useState(false), mounted = _useState[0], setMounted = _useState[1];
      React.useEffect(function () {
        return setMounted(true);
      }, []);
      if (!mounted) return null;
      return ReactDOM.createPortal(children, document.body);
    }
    _s39(Portal, "EEbBbH2V7/JbIWkmnfgP/KlFBtU=");
    var InfoPopoverCtx = React.createContext({});
    function useInfoPopoverCtx(ref) {
      _s40();
      React.useEffect(function () {
        function mouseDownListener(e) {
          var targetAsNode = e.target;
          // @ts-ignore
          if (ref.current && !ref.current.contains(targetAsNode)) {
            props.onPopoverDismiss();
          }
        }
        if (props.showPopover) {
          document.addEventListener("mousedown", mouseDownListener);
        }
        return function () {
          document.removeEventListener("mousedown", mouseDownListener);
        };
      }, [props.showPopover]);
    }
    _s40(useInfoPopoverCtx, "OD7bBpZva5O2jO+Puf00hKivP7c=");
    var placement = props.placement, children = props.children, popoverContent = props.popoverContent, showPopover = props.showPopover, width = props.width;
    if (!placement) {
      placement = "auto";
    }
    var popupNode = React.useRef();
    var ctxValue = useInfoPopoverCtx(popupNode);
    var hostElement = document.getElementById("modal-host");
    var content = React__default.createElement("div", {
      className: "uafrica-modal-overlay fixed inset-0 bg-black bg-opacity-20 transition-opacity"
    });
    if (!showPopover) {
      return React__default.createElement(React__default.Fragment, null, children);
    }
    return React__default.createElement("div", {
      className: "relative text-left"
    }, hostElement && ReactDOM__default.createPortal(content, hostElement), React__default.createElement(InfoPopoverCtx.Provider, {
      value: ctxValue
    }, React__default.createElement(reactPopper.Manager, null, React__default.createElement(reactPopper.Reference, null, function (_ref) {
      var ref = _ref.ref;
      return React__default.createElement("div", {
        className: " w-full ",
        ref: ref,
        onClick: function onClick(e) {
          e.stopPropagation();
        }
      }, children);
    }), React__default.createElement(Portal, null, React__default.createElement(reactPopper.Popper, {
      placement: placement,
      innerRef: function innerRef(node) {
        return popupNode.current = node;
      }
    }, function (_ref2) {
      var ref = _ref2.ref, style = _ref2.style;
      return React__default.createElement("div", {
        className: "info-popover z-50 origin-top-right absolute font-normal p-4 rounded-md shadow-md bg-white divide-y u-black-ring divide-gray-100 focus:outline-none " + (width ? width : "w-80"),
        // @ts-ignore
        style: style,
        ref: ref,
        "data-test": props.dataTest
      }, popoverContent);
    })))));
  }
  _s41(InfoPopover, "i/M8+OBFxgBmYxIGWUaA9weoWII=", false, function () {
    return [useInfoPopoverCtx];
  });
  _c78 = InfoPopover;
  function NavItem(props) {
    var item = props.item;
    var linkIsActive = window.location.pathname.indexOf(item.path) >= 0;
    var bgClass = '';
    if (linkIsActive) {
      bgClass = 'bg-gray-100 font-semibold';
    }
    return React__default.createElement("div", {
      id: 'nav_' + item.displayName.replaceAll(' ', '_').toLowerCase(),
      className: 'nav-item text-gray-700 hover:bg-gray-100 hover:text-gray-900 group u-vertical-center px-2 py-1.5 rounded-md mb-1 ' + bgClass
    }, React__default.createElement("div", {
      className: "w-4 mr-2 text-center"
    }, React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: item.icon,
      size: "xs"
    }), ' '), props.isNavbarCollapsed ? ' ' : item.displayName, props.isNavbarCollapsed && React__default.createElement("div", {
      className: "absolute nav-item-popover z-50 bg-white rounded-md text-gray-700 border border-gray-100 shadow-md"
    }, React__default.createElement("strong", {
      className: "nav-item-text p-4 "
    }, item.displayName)));
  }
  _c79 = NavItem;
  function NewVersionAvailable() {
    return React__default.createElement("div", {
      className: 'cursor-pointer',
      onClick: function onClick() {
        return window.location.reload();
      }
    }, React__default.createElement(Button.LinkDanger, {
      title: "New version available"
    }), React__default.createElement("p", {
      className: 'text-danger text-xs ml-3 -mt-2'
    }, "Click here to update!"));
  }
  _c80 = NewVersionAvailable;
  function Button$1(props) {
    var label = props.label, _onChange = props.onChange, disabled = props.disabled, labelClassName = props.labelClassName, className = props.className, labelLeft = props.labelLeft, labelRight = props.labelRight, name = props.name, checked = props.checked;
    function selectOption() {
      var list = document.querySelectorAll("input[name='" + name + "']");
      list.forEach(function (item) {
        if (item.value === label) {
          item.checked = true;
          _onChange(item.value);
        } else {
          item.checked = false;
        }
      });
    }
    function renderLabel(option) {
      return React__default.createElement("label", {
        onClick: function onClick() {
          selectOption();
        },
        className: (disabled ? 'text-gray-500 ' : 'text-base cursor-pointer ') + ' u-vertical-center ' + (labelClassName ? labelClassName : '')
      }, option);
    }
    return React__default.createElement("div", {
      className: "flex items-start"
    }, React__default.createElement("label", {
      className: "inline-flex items-center"
    }, label && (labelLeft || !labelLeft && !labelRight) && renderLabel(label), React__default.createElement("input", {
      type: "radio",
      className: (labelLeft ? 'ml-2 ' : 'mr-2 ') + 'cursor-pointer form-radio u-focus ' + (disabled ? 'text-gray-500 ' : 'text-primary hover:border-primary ') + ' border-gray-300  ' + (className ? className : ''),
      disabled: disabled,
      id: label,
      name: name,
      value: label,
      checked: checked,
      onChange: function onChange(e) {
        _onChange(e.target.value);
      }
    }), label && labelRight && renderLabel(label)));
  }
  _c81 = Button$1;
  function Group(props) {
    var title = props.title, options = props.options, _onChange2 = props.onChange, disabled = props.disabled, labelClassName = props.labelClassName, className = props.className, labelLeft = props.labelLeft, labelRight = props.labelRight, name = props.name;
    return React__default.createElement("div", {
      className: ""
    }, title && React__default.createElement(Label, null, title), React__default.createElement("div", {
      className: (title ? 'ml-2 ' : '') + 'mt-2  ' + className
    }, options.map(function (option, i) {
      return React__default.createElement("div", {
        className: "mt-2",
        key: i
      }, React__default.createElement(Button$1, {
        name: name,
        labelClassName: labelClassName,
        disabled: disabled,
        labelLeft: labelLeft,
        labelRight: labelRight,
        label: option,
        onChange: function onChange(value) {
          _onChange2(value);
        }
      }));
    })));
  }
  _c82 = Group;
  var Radio = {
    Button: Button$1,
    Group: Group
  };
  function ResponsiveRow(props) {
    var children = props.children, verticalCenter = props.verticalCenter;
    return React__default.createElement("div", {
      className: 'flex sm:space-x-4 flex-wrap sm:flex-nowrap ' + (verticalCenter ? 'items-center' : '')
    }, children);
  }
  _c83 = ResponsiveRow;
  function Portal$1(props) {
    _s42();
    var children = props.children;
    var _useState = React.useState(false), mounted = _useState[0], setMounted = _useState[1];
    React.useEffect(function () {
      return setMounted(true);
    }, []);
    if (!mounted) return null;
    return ReactDOM.createPortal(children, document.body);
  }
  _s42(Portal$1, "EEbBbH2V7/JbIWkmnfgP/KlFBtU=");
  _c84 = Portal$1;
  function SavingOverlay() {
    return React__default.createElement(Portal$1, null, React__default.createElement("div", {
      className: "saving-overlay",
      onClick: function onClick(e) {
        return e.stopPropagation();
      }
    }));
  }
  _c85 = SavingOverlay;
  function SavePanel(props) {
    var somethingChanged = props.somethingChanged, saveError = props.saveError, savingChanges = props.savingChanges, saved = props.saved, saveDisabledText = props.saveDisabledText, saveText = props.saveText, cancelText = props.cancelText, className = props.className;
    return React__default.createElement("div", {
      className: 'save-panel z-20 py-4 px-4 shadow-inner fixed bottom-0 bg-white justify-between u-vertical-center ' + (className ? className : '')
    }, React__default.createElement("div", {
      className: "flex " + (props.callToActionAtBottom ? 'flex-col' : 'flex-col-reverse ') + " sm:flex-row my-1 w-full " + (!(!savingChanges && props.cancelChanges) ? 'justify-end' : 'justify-between')
    }, !savingChanges && props.cancelChanges && React__default.createElement("div", {
      className: "ml-2 mr-2 sm:mr-0 mt-4 sm:mt-0"
    }, React__default.createElement(Button.Cancel, {
      id: "cancel_button",
      title: cancelText ? cancelText : 'Cancel',
      onClick: props.cancelChanges,
      className: "w-full"
    })), React__default.createElement("div", {
      className: "flex flex-col sm:flex-row sm:space-x-4 mr-2 ml-2 sm:ml-0 justify-end mt-4 sm:mt-0 space-y-4 sm:space-y-0"
    }, saveError && React__default.createElement("div", {
      className: "inline-error flex flex-wrap self-center text-center"
    }, saveError), React__default.createElement(Button.Primary, {
      className: "sm:w-auto w-full",
      id: "save_button",
      onClick: props.saveChanges,
      disabled: savingChanges || !somethingChanged || Boolean(saveDisabledText),
      hoverTitle: saveDisabledText,
      isLoading: savingChanges,
      title: saved && !somethingChanged ? 'Saved' : saveText ? saveText : 'Save',
      icon: saved && !somethingChanged ? 'check' : undefined,
      loadingTitle: "Saving"
    }))));
  }
  _c86 = SavePanel;
  function SavePanelContainer(props) {
    return React__default.createElement("div", {
      className: props.inModal ? '' : 'mb-20'
    }, props.children);
  }
  _c87 = SavePanelContainer;
  function evaluateScroll(tabNavId, children) {
    var res = {
      left: false,
      right: false
    };
    if (children.length > 0) {
      var _document$getElementB, _children$0$props$id, _children$, _children$$props, _children$2, _children$2$props, _children$props$id, _children, _children$props, _children2, _children2$props;
      var nav = (_document$getElementB = document.getElementById(tabNavId)) == null ? void 0 : _document$getElementB.getBoundingClientRect();
      var leftId = (_children$0$props$id = (_children$ = children[0]) == null ? void 0 : (_children$$props = _children$.props) == null ? void 0 : _children$$props.id) != null ? _children$0$props$id : (_children$2 = children[0]) == null ? void 0 : (_children$2$props = _children$2.props) == null ? void 0 : _children$2$props.tabID;
      if (leftId) {
        var _document$getElementB2, _nav$x;
        var left = (_document$getElementB2 = document.getElementById(leftId)) == null ? void 0 : _document$getElementB2.getBoundingClientRect();
        if ((left == null ? void 0 : left.x) < ((_nav$x = nav == null ? void 0 : nav.x) != null ? _nav$x : 0)) {
          res.left = true;
        }
      }
      var rightId = (_children$props$id = (_children = children[children.length - 1]) == null ? void 0 : (_children$props = _children.props) == null ? void 0 : _children$props.id) != null ? _children$props$id : (_children2 = children[children.length - 1]) == null ? void 0 : (_children2$props = _children2.props) == null ? void 0 : _children2$props.tabID;
      if (rightId) {
        var _document$getElementB3;
        var right = (_document$getElementB3 = document.getElementById(rightId)) == null ? void 0 : _document$getElementB3.getBoundingClientRect();
        if ((right == null ? void 0 : right.x) + (right == null ? void 0 : right.width) > screen.width) {
          res.right = true;
        }
      }
    }
    return res;
  }
  // Implementation
  function Tab(props) {
    var children = props.children;
    return React__default.createElement("div", {
      key: props.tabID
    }, children);
  }
  _c88 = Tab;
  function Primary$1(props) {
    _s43();
    var _useState = React.useState({
      left: false,
      right: false
    }), overflowing = _useState[0], setOverflowing = _useState[1];
    var tabNavId = "tab_nav" + Math.random();
    React.useEffect(function () {
      setOverflowing(evaluateScroll(tabNavId, props.children));
    }, [props.children]);
    var children = props.children;
    if (!Array.isArray(props.children)) {
      children = [props.children];
    }
    children = children.filter(function (child) {
      return child && child.props;
    });
    var activeTab = children.filter(function (child) {
      return props.activeTabID === child.props.tabID;
    });
    return React__default.createElement("div", null, React__default.createElement("div", null, React__default.createElement("div", {
      className: "flex items-center border-b border-gray-200 w-full"
    }, overflowing.left && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-left",
      color: "gray",
      className: "m-1"
    }), React__default.createElement("nav", {
      id: tabNavId,
      className: "-mb-px flex space-x-8 overflow-x-auto",
      onScroll: function onScroll() {
        setOverflowing(evaluateScroll(tabNavId, props.children));
      },
      "aria-label": "Tabs"
    }, children.map(function (child) {
      var _child$props$id;
      return React__default.createElement("div", {
        key: child.props.tabID,
        id: (_child$props$id = child.props.id) != null ? _child$props$id : child.props.tabID,
        onClick: function onClick() {
          if (child.props.isClickable !== false) {
            props.onSelect(child.props.tabID);
          }
        },
        className: (props.activeTabID === child.props.tabID ? "border-primary-500 text-primary-600 " : "border-transparent text-gray-700  " + (child.props.isClickable !== false ? " hover:text-gray-900 hover:border-gray-300" : "")) + (child.props.isClickable !== false ? " cursor-pointer " : " cursor-default ") + "  group inline-flex items-center py-3 px-1 border-b-2 font-bold"
      }, React__default.createElement("span", {
        className: "flex flex-row space-x-4 items-center whitespace-nowrap " + child.props.className
      }, child.props.title, " ", child.props.info && React__default.createElement(InfoButton, null, child.props.info)));
    })), overflowing.right && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-right",
      color: "gray",
      className: "m-1"
    })), React__default.createElement(React__default.Fragment, {
      key: props.activeTabID
    }, activeTab)));
  }
  _s43(Primary$1, "dfnIQJdSDAaTQvSlTDnJZhF1j+o=");
  _c89 = Primary$1;
  function Secondary$1(props) {
    _s44();
    var _useState2 = React.useState({
      left: false,
      right: false
    }), overflowing = _useState2[0], setOverflowing = _useState2[1];
    var tabNavId = "tab_nav" + Math.random();
    React.useEffect(function () {
      setOverflowing(evaluateScroll(tabNavId, props.children));
    }, [props.children]);
    var children = props.children;
    if (!Array.isArray(props.children)) {
      children = [props.children];
    }
    children = children.filter(function (child) {
      return child && child.props;
    });
    var activeTab = children.filter(function (child) {
      return props.activeTabID === child.props.tabID;
    });
    return React__default.createElement("div", {
      className: "mt-8"
    }, React__default.createElement("div", {
      className: "flex items-center border-b border-gray-200 w-full"
    }, overflowing.left && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-left",
      color: "gray",
      className: "m-1"
    }), React__default.createElement("nav", {
      onScroll: function onScroll() {
        setOverflowing(evaluateScroll(tabNavId, props.children));
      },
      id: tabNavId,
      className: "flex space-x-4 overflow-x-auto pb-2 ",
      "aria-label": "Tabs"
    }, children.map(function (child) {
      return React__default.createElement("div", {
        key: child.props.tabID,
        id: child.props.id,
        onClick: function onClick() {
          if (child.props.isClickable !== false) {
            props.onSelect(child.props.tabID);
          }
        },
        className: (props.activeTabID === child.props.tabID ? "bg-primary-100 text-primary-700 font-bold" : "text-black " + (child.props.isClickable !== false ? " hover:bg-gray-200 " : "")) + (child.props.isClickable !== false ? " cursor-pointer " : " cursor-default ") + "  px-3 py-2 font-medium rounded-md"
      }, React__default.createElement("span", {
        className: "u-vertical-center flex-row space-x-4 whitespace-nowrap " + child.props.className
      }, child.props.title, " ", child.props.info && React__default.createElement(InfoButton, null, child.props.info)));
    })), overflowing.right && React__default.createElement(reactFontawesome.FontAwesomeIcon, {
      icon: "chevron-right",
      color: "gray",
      className: "m-1"
    })), React__default.createElement(React__default.Fragment, {
      key: props.activeTabID
    }, activeTab));
  }
  _s44(Secondary$1, "EtVdO3zzYK06GJT+eDJ1nd02yAU=");
  _c90 = Secondary$1;
  var Tabs = {
    Primary: Primary$1,
    Secondary: Secondary$1,
    Tab: Tab
  };
  // Implementation
  function Textarea(props) {
    console.log('props', props);
    // let {
    // containerClassName,
    // fieldId,
    // label,
    // labelClassName,
    // info,
    // id,
    // value,
    // defaultValue,
    // name,
    // register,
    // placeholder,
    // validationError,
    // onChange,
    // onFocus,
    // onBlur,
    // infoButton,
    // errorMessage,
    // rows,
    // optional,
    // disabled,
    // maxLength,
    // } = props;
    return React__default.createElement(React__default.Fragment, null);
  }
  _c91 = Textarea;
  function WeekdaySelect(props) {
    _s45();
    var value = props.value;
    var _useState = React.useState(value != null ? value : []), selectedDays = _useState[0], setSelectedDays = _useState[1];
    var days = [{
      letter: 'S',
      value: 0
    }, {
      letter: 'M',
      value: 1
    }, {
      letter: 'T',
      value: 2
    }, {
      letter: 'W',
      value: 3
    }, {
      letter: 'T',
      value: 4
    }, {
      letter: 'F',
      value: 5
    }, {
      letter: 'S',
      value: 6
    }];
    function renderDay(day) {
      return React__default.createElement("div", {
        key: day.value,
        onClick: function onClick() {
          var _selectedDays = [].concat(selectedDays);
          var index = selectedDays.indexOf(day.value);
          if (index === -1) {
            _selectedDays.push(day.value);
          } else {
            _selectedDays.splice(index, 1);
          }
          setSelectedDays([].concat(_selectedDays));
          if (props.onChange) {
            props.onChange(_selectedDays);
          }
        },
        className: "rounded-full h-8 w-8 flex justify-center items-center cursor-pointer font-bold " + (selectedDays.indexOf(day.value) === -1 ? 'bg-gray-100 text-gray-500' : 'bg-primary text-white') + " "
      }, day.letter);
    }
    function render() {
      return React__default.createElement("div", {
        className: "flex flex-row space-x-4 py-4"
      }, days.map(function (day) {
        return renderDay(day);
      }));
    }
    return render();
  }
  _s45(WeekdaySelect, "E6iLRj5uoNFsSut7upYg/zFol2E=");
  _c92 = WeekdaySelect;
  function addressObjFromGoogleResult(place) {
    // Copied from google API developer guide
    var googleComponentShortOrLong = {
      street_number: 'short_name',
      route: 'long_name',
      sublocality_level_1: 'long_name',
      sublocality_level_2: 'long_name',
      locality: 'long_name',
      administrative_area_level_2: 'short_name',
      administrative_area_level_1: 'long_name',
      country: 'short_name',
      postal_code: 'short_name'
    };
    var googleAddressObj = {};
    googleAddressObj.lat_lng = {
      lat: typeof place.geometry.location.lat === 'function' ? place.geometry.location.lat() : place.geometry.location.lat,
      lng: typeof place.geometry.location.lng === 'function' ? place.geometry.location.lng() : place.geometry.location.lng
    };
    for (var i = 0; i < place.address_components.length; i++) {
      place.address_components[i].types.forEach(function (addressType) {
        // get the long/short version of the place address component base on componentForm
        if (googleComponentShortOrLong[addressType]) {
          googleAddressObj[addressType] = place.address_components[i][googleComponentShortOrLong[addressType]];
        }
      });
    }
    // Map to names expected by address form
    var streetAddress = googleAddressObj.street_number ? googleAddressObj.street_number + ' ' + googleAddressObj.route : googleAddressObj.route;
    var company = place.types.includes('establishment') ? place.name : '';
    var localArea = [];
    if (googleAddressObj.sublocality_level_1) {
      localArea.push(googleAddressObj.sublocality_level_1);
    }
    if (googleAddressObj.sublocality_level_2) {
      localArea.push(googleAddressObj.sublocality_level_2);
    }
    if (googleAddressObj.locality && localArea.length === 0) {
      localArea.push(googleAddressObj.locality);
    }
    var city = googleAddressObj.administrative_area_level_2;
    var addressObj = {
      company: company,
      street_address: streetAddress,
      local_area: localArea.join(', '),
      city: city,
      code: googleAddressObj.postal_code,
      zone: googleAddressObj.administrative_area_level_1,
      country: googleAddressObj.country,
      lat_lng: googleAddressObj.lat_lng,
      lat: googleAddressObj.lat_lng.lat,
      lng: googleAddressObj.lat_lng.lng,
      entered_address: '',
      types: place.types
    };
    addressObj.entered_address = generateEnteredAddress(addressObj);
    return addressObj;
  }
  function concatNonEmpty(strArray, seperator) {
    var array = strArray.filter(function (str) {
      return Boolean(str);
    });
    return array.join(seperator);
  }
  function formatEnteredAddressLine(address, lineNumber, bold) {
    if (!address) return '';
    if (typeof lineNumber === 'undefined') {
      lineNumber = 1;
    }
    var arr = address.split(',');
    if (arr.length >= lineNumber) {
      if (bold) {
        return React__default.createElement("b", null, arr[lineNumber - 1]);
      }
      return arr[lineNumber - 1];
    }
    return '';
  }
  function formatEnteredAddress(address) {
    if (!address) return '';
    return address.split(',').map(function (line, i) {
      if (i === 0) {
        return React__default.createElement("div", {
          key: i
        }, React__default.createElement("b", null, line.trim()));
      }
      return React__default.createElement("div", {
        key: i
      }, line.trim());
    });
  }
  function generateEnteredAddress(addressObj) {
    var company = addressObj.company, street_address = addressObj.street_address, local_area = addressObj.local_area, city = addressObj.city, code = addressObj.code, zone = addressObj.zone, country = addressObj.country;
    return concatNonEmpty([company, street_address, local_area, city, code, zone, country], ', ');
  }
  function validateAddress(address) {
    // existing addresses will not be judged
    if (address.id && address.entered_address) {
      return 'success';
    }
    var validationItems = [];
    if ((address.street_address || address.company) && address.local_area && address.city && address.zone && address.country) {
      return 'success';
    } else {
      if (!(address.street_address || address.company)) {
        validationItems.push('street address or company');
      }
      if (!address.local_area) {
        validationItems.push('suburb');
      }
      if (!address.city) {
        validationItems.push('city');
      }
      if (!address.zone) {
        validationItems.push('province/zone');
      }
      if (!address.country) {
        validationItems.push('country');
      }
    }
    var validationString = validationItems.join(', ');
    return "requires the following: " + validationString;
  }
  function validateGoogleAddressType(addressObj, invalidTypes) {
    // place types: https://developers.google.com/maps/documentation/places/web-service/supported_types#table1
    var isValid = true;
    if (addressObj.types) {
      invalidTypes.forEach(function (invalidType) {
        if (addressObj.types.indexOf(invalidType) !== -1) {
          isValid = false;
        }
      });
    }
    return isValid;
  }
  function cleanProvince(province) {
    if (province) {
      province = province.replaceAll('KwaZulu-Natal', 'KZN');
      province = province.replaceAll('KwaZulu Natal', 'KZN');
      province = province.replaceAll('NL', 'KZN');
      province = province.replaceAll('GT', 'GP');
      province = province.replaceAll('Gauteng', 'GP');
      province = province.replaceAll('Freestate', 'FS');
      province = province.replaceAll('Free State', 'FS');
      province = province.replaceAll('Limpopo', 'LP');
      province = province.replaceAll('Mpumalanga', 'MP');
      province = province.replaceAll('North West', 'NW');
      province = province.replaceAll('Eastern Cape', 'EC');
      province = province.replaceAll('Western Cape', 'WC');
      province = province.replaceAll('Northern Cape', 'NC');
      province = province.replaceAll('Eastern-Cape', 'EC');
      province = province.replaceAll('Western-Cape', 'WC');
      province = province.replaceAll('Northern-Cape', 'NC');
      return province;
    }
    return;
  }
  function provinceAbbreviationToName(province) {
    if (province) {
      province = province.replaceAll('KZN', 'KwaZulu-Natal');
      province = province.replaceAll('NL', 'KwaZulu-Natal');
      province = province.replaceAll('GP', 'Gauteng');
      province = province.replaceAll('GT', 'Gauteng');
      province = province.replaceAll('FS', 'Free State');
      province = province.replaceAll('LP', 'Limpopo');
      province = province.replaceAll('MP', 'Mpumalanga');
      province = province.replaceAll('NW', 'North West');
      province = province.replaceAll('EC', 'Eastern Cape');
      province = province.replaceAll('WC', 'Western Cape');
      province = province.replaceAll('NC', 'Northern Cape');
      return province;
    }
    return;
  }
  var addressUtils = {
    __proto__: null,
    addressObjFromGoogleResult: addressObjFromGoogleResult,
    formatEnteredAddress: formatEnteredAddress,
    formatEnteredAddressLine: formatEnteredAddressLine,
    generateEnteredAddress: generateEnteredAddress,
    validateGoogleAddressType: validateGoogleAddressType,
    validateAddress: validateAddress,
    cleanProvince: cleanProvince,
    provinceAbbreviationToName: provinceAbbreviationToName
  };
  function upsertItem(store, cacheKey, item) {
    var items = store.cache[cacheKey];
    if (items) {
      var updated = false;
      items.forEach(function (t, i) {
        if (t.id === item.id) {
          items[i] = _extends({}, item);
          updated = true;
        }
      });
      if (!updated) {
        items.push(item);
      }
      store.set(cacheKey, items);
    }
  }
  function deleteItems(store, cacheKey, ids) {
    var items = store.cache[cacheKey];
    if (items) {
      ids.forEach(function (id) {
        items.forEach(function (t, i) {
          if (t.id === id) {
            items.splice(i, 1);
          }
        });
      });
      store.set(cacheKey, items);
    }
  }
  function getFromStore(store, cacheKey) {
    var _store$cache$cacheKey;
    return (_store$cache$cacheKey = store == null ? void 0 : store.cache[cacheKey]) != null ? _store$cache$cacheKey : [];
  }
  function getFromStoreWhereKeyMatchesValues(store, cacheKey, key, values) {
    var _store$cache$cacheKey2;
    var data = (_store$cache$cacheKey2 = store == null ? void 0 : store.cache[cacheKey]) != null ? _store$cache$cacheKey2 : [];
    var filteredData = [];
    data.forEach(function (d) {
      if (values.indexOf(d[key]) > -1) {
        filteredData.push(d);
      }
    });
    return filteredData;
  }
  function setInStore(store, cacheKey, data) {
    var _store$cache;
    var cacheData = (_store$cache = store.cache) != null ? _store$cache : {};
    cacheData[cacheKey] = data != null ? data : [];
    store.set("cache", cacheData);
  }
  var cacheUtils = {
    __proto__: null,
    upsertItem: upsertItem,
    deleteItems: deleteItems,
    getFromStore: getFromStore,
    setInStore: setInStore,
    getFromStoreWhereKeyMatchesValues: getFromStoreWhereKeyMatchesValues
  };
  var index = {
    __proto__: null
  };
  var polygonOptions = {
    fillOpacity: 0.5,
    strokeOpacity: 0.8,
    strokeWeight: 2,
    editable: false
  };
  var polygonOptionsFaded = {
    fillOpacity: 0.2,
    strokeOpacity: 0.5,
    strokeWeight: 2,
    editable: false,
    somethingChanged: false
  };
  function loadGoogleMaps(store, scriptSrc) {
    var script = document.getElementById("googleMapsScript");
    if (!script) {
      script = document.createElement("script");
      script.src = scriptSrc;
      script.type = "text/javascript";
      script.id = "googleMapsScript";
      script.onload = function () {
        store.set("isGoogleMapsLoaded", true);
      };
      document.body.append(script);
    }
    return script;
  }
  function getGeometryJSONFromPath(path) {
    var arrayPath = path.map(function (pathPart) {
      return pathPart.map(function (coordinates) {
        if (coordinates.lat && coordinates.lng) {
          return [coordinates.lng, coordinates.lat];
        } else {
          return coordinates;
        }
      });
    });
    return {
      type: "MultiPolygon",
      coordinates: [arrayPath]
    };
  }
  function getPathFromGeometryJSON(objectWithGeometryJSON) {
    var geometryJSON = objectWithGeometryJSON ? JSON.parse(objectWithGeometryJSON) : {};
    // convert polygons to multi-polygons
    if (geometryJSON.type === "Polygon") {
      geometryJSON.coordinates = [geometryJSON.coordinates];
      geometryJSON.type = "MultiPolygon";
    }
    var path = [];
    if (geometryJSON && geometryJSON.coordinates) {
      geometryJSON.coordinates.forEach(function (pathThingy) {
        pathThingy.forEach(function (polygon) {
          var polygonPoints = [];
          path.push(polygonPoints);
          // Multi polygon
          polygon.forEach(function (coordinate) {
            polygonPoints.push({
              lng: coordinate[0],
              lat: coordinate[1]
            });
          });
        });
      });
    }
    return path;
  }
  function pointWithPaddedBounds(lat_lng) {
    try {
      var bounds = new window.google.maps.LatLngBounds();
      var topLeft = {
        lat: lat_lng.lat() - 0.01,
        lng: lat_lng.lng() - 0.01
      };
      var bottomRight = {
        lat: lat_lng.lat() + 0.01,
        lng: lat_lng.lng() + 0.01
      };
      bounds.extend(topLeft);
      bounds.extend(bottomRight);
      return bounds;
    } catch (e) {
      console.log(e);
      return null;
    }
  }
  function refitBoundsOfMap(map, markers, polylines, polygons, padding) {
    try {
      var bounds = new window.google.maps.LatLngBounds();
      var boundsExtended = false;
      markers.forEach(function (marker) {
        bounds.extend(marker);
        boundsExtended = true;
      });
      polylines.forEach(function (polyline) {
        polyline.path.forEach(function (coord) {
          bounds.extend(coord);
          boundsExtended = true;
        });
      });
      polygons.forEach(function (multiPolygon) {
        if (multiPolygon.path) {
          multiPolygon.path.forEach(function (polygon) {
            polygon.forEach(function (coord) {
              bounds.extend(coord);
              boundsExtended = true;
            });
          });
        }
      });
      var _padding = {
        top: 50,
        right: 50,
        left: 50,
        bottom: 50
      };
      if (padding) {
        _padding = padding;
      }
      if (boundsExtended) {
        map.fitBounds(bounds, _padding);
      }
    } catch (e) {
      console.log(e);
    }
  }
  function closePolygon(path) {
    // check to close up polygon
    if (path.length >= 2) {
      var latStart = path[0].lat;
      var lngStart = path[0].lng;
      var latEnd = path[path.length - 1].lat;
      var lngEnd = path[path.length - 1].lng;
      if (latStart !== latEnd || lngStart !== lngEnd) {
        path.push(path[0]);
      }
    }
    return path;
  }
  function canEditPolygonVertices(paths, maxNodeCount) {
    var count = 0;
    paths.forEach(function (path) {
      count += path.length;
    });
    return count <= maxNodeCount;
  }
  function getPathFromGooglePolygon(polygonRef) {
    var paths = [];
    polygonRef.getPaths().forEach(function (polygon) {
      var path = [];
      polygon.forEach(function (p) {
        path.push({
          lat: p.lat(),
          lng: p.lng()
        });
      });
      paths.push(path);
    });
    return paths;
  }
  function removeDuplicateLatLngs(path) {
    for (var i = path.length - 2; i >= 0; i--) {
      if (path[i].lat === path[i + 1].lat && path[i].lng === path[i + 1].lng) {
        path.splice(i + 1, 1);
      }
    }
    return path;
  }
  function pathCrossesAntimeridian(path) {
    var crosses = false;
    for (var i = 0; i < path.length; i++) {
      var indexBefore = i === 0 ? path.length - 1 : i - 1;
      var max = path[i].lng > path[indexBefore].lng ? path[i].lng : path[indexBefore].lng;
      var min = path[i].lng < path[indexBefore].lng ? path[i].lng : path[indexBefore].lng;
      if (max - min > 180) {
        crosses = true;
      }
    }
    return crosses;
  }
  function getAntimeridianCrossings(path) {
    var crossings = [];
    for (var i = 0; i < path.length; i++) {
      var indexBefore = i === 0 ? path.length - 1 : i - 1;
      var max = path[i].lng > path[indexBefore].lng ? path[i].lng : path[indexBefore].lng;
      var min = path[i].lng < path[indexBefore].lng ? path[i].lng : path[indexBefore].lng;
      if (max - min > 180) {
        // x0 and x1 are determined by transposing the polygon to be on the x=0 axis instead of x = -180/180
        var x0 = path[i].lng > 0 ? -(180 - Math.abs(path[i].lng)) : 180 - Math.abs(path[i].lng);
        var x1 = path[indexBefore].lng > 0 ? -(180 - Math.abs(path[indexBefore].lng)) : 180 - Math.abs(path[indexBefore].lng);
        var m = (path[i].lat - path[indexBefore].lat) / (x0 - x1);
        var c = path[i].lat - m * x0;
        // c is the y intercept and will be the same at x = -180/180
        crossings.push({
          index: i,
          indexBefore: indexBefore,
          crossingLat: c
        });
      }
    }
    return crossings.sort(function (a, b) {
      if (a.crossingLat < b.crossingLat) {
        return 1;
      }
      if (a.crossingLat > b.crossingLat) {
        return -1;
      }
      return 0;
    });
  }
  function pathToFollowRightHandRule(path) {
    // ensures the path follows an anticlockwise direction
    var signedArea = google.maps.geometry.spherical.computeSignedArea(path);
    var rightHandPath = [];
    if (signedArea < 0) {
      for (var i = 0; i < path.length; i++) {
        if (i === 0) {
          rightHandPath[0] = path[0];
        } else {
          rightHandPath[i] = path[path.length - i];
        }
      }
      return rightHandPath;
    }
    return path;
  }
  function startPathBeforeFirstCrossing(path) {
    var crossings = getAntimeridianCrossings(path);
    for (var i = 0; i < crossings[0].index; i++) {
      var obj = path[0];
      path.push(obj);
      path.splice(0, 1);
    }
    return path;
  }
  function splitAcrossAntimeridian(path) {
    path = pathToFollowRightHandRule(path);
    // standard convention
    var crosses = pathCrossesAntimeridian(path);
    if (crosses) {
      path = startPathBeforeFirstCrossing(path);
      var crossings = getAntimeridianCrossings(path);
      var polygonA = [];
      // always to the left of antimeridian because of startPathBeforeFirstCrossing
      var polygonB = [];
      // always to the right of antimeridian because of startPathBeforeFirstCrossing
      path.forEach(function (c, i) {
        if (i === crossings[0].indexBefore) {
          polygonA.push({
            lat: crossings[0].crossingLat,
            lng: 180
          });
        }
        if (i === crossings[1].indexBefore) {
          polygonB.push({
            lat: crossings[1].crossingLat,
            lng: -180
          });
        }
        if (i >= crossings[0].index && i <= crossings[1].indexBefore) {
          polygonA.push({
            lat: c.lat,
            lng: c.lng
          });
        } else if (i <= crossings[0].indexBefore || i >= crossings[1].index) {
          polygonB.push({
            lat: c.lat,
            lng: c.lng
          });
        }
        if (i === crossings[0].indexBefore) {
          polygonB.push({
            lat: crossings[0].crossingLat,
            lng: -180
          });
        }
        if (i === crossings[1].indexBefore) {
          polygonA.push({
            lat: crossings[1].crossingLat,
            lng: 180
          });
        }
      });
      return splitAcrossAntimeridian(polygonA).concat(splitAcrossAntimeridian(polygonB));
    } else {
      return [path];
    }
  }
  function ensureValidPolygonOverAntimeridian(_x) {
    return _ensureValidPolygonOverAntimeridian.apply(this, arguments);
  }
  function _ensureValidPolygonOverAntimeridian() {
    _ensureValidPolygonOverAntimeridian = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(paths) {
      var newPaths;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            // When a polygon overlaps the antimeridian, some strange behaviour sometimes occurs. This function will split a polygon into multiple polygons over the antimeridian
            newPaths = [];
            paths.forEach(function (path) {
              newPaths = newPaths.concat(splitAcrossAntimeridian(path));
            });
            return _context.abrupt("return", newPaths);
          case 3:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _ensureValidPolygonOverAntimeridian.apply(this, arguments);
  }
  var mapUtils = {
    __proto__: null,
    loadGoogleMaps: loadGoogleMaps,
    getGeometryJSONFromPath: getGeometryJSONFromPath,
    getPathFromGeometryJSON: getPathFromGeometryJSON,
    getPathFromGooglePolygon: getPathFromGooglePolygon,
    canEditPolygonVertices: canEditPolygonVertices,
    pointWithPaddedBounds: pointWithPaddedBounds,
    refitBoundsOfMap: refitBoundsOfMap,
    closePolygon: closePolygon,
    polygonOptions: polygonOptions,
    polygonOptionsFaded: polygonOptionsFaded,
    removeDuplicateLatLngs: removeDuplicateLatLngs,
    ensureValidPolygonOverAntimeridian: ensureValidPolygonOverAntimeridian
  };
  function checkIfUserHasAccessToNavSection(section) {
    if (section) {
      var hasAccessToSection = false;
      section.map(function (item) {
        if (item.displayCondition && item.hasAccess) {
          hasAccessToSection = true;
        }
      });
      return hasAccessToSection;
    } else {
      return false;
    }
  }
  var navUtils = {
    __proto__: null,
    checkIfUserHasAccessToNavSection: checkIfUserHasAccessToNavSection
  };
  function formatNumberWithCurrency(amount, forceAsInteger, addSpaces, currency) {
    if (currency === void 0) {
      currency = "R";
    }
    if (amount === undefined) {
      return "";
    }
    if (isNaN(Number(amount))) {
      return amount.toString();
    }
    if (amount === 0) {
      return currency + " 0" + (forceAsInteger ? "" : ".00");
    }
    if (amount === null || typeof amount === "undefined") return "";
    if (isNaN(amount)) return "";
    var isNegative = amount < 0;
    amount = Math.abs(amount);
    var amountOutput;
    if (forceAsInteger) {
      amountOutput = addSpaces ? numberWithSpaces(Math.floor(amount)) : amount + "";
    } else {
      amount = parseFloat(amount);
      amountOutput = addSpaces ? numberWithSpaces(amount.toFixed(2)) : amount.toFixed(2);
    }
    return (isNegative ? "- " : "") + currency + " " + amountOutput;
  }
  function formatWeight(weight) {
    if (weight === null || typeof weight === "undefined") return "";
    if (isNaN(weight) || weight === 0) return "–";
    var weightOutput;
    if (Number.isInteger(weight)) {
      weightOutput = numberWithSpaces(weight);
    } else {
      weight = parseFloat(weight);
      weightOutput = numberWithSpaces(weight.toFixed(2));
    }
    return weightOutput + "kg";
  }
  function formatNumber(amount, formatAsInteger, addSpaces) {
    if (amount === null || typeof amount === "undefined") return "";
    amount = amount.toString().replace(/\s/g, "");
    amount = Number(amount);
    if (formatAsInteger && Number.isInteger(amount)) {
      // @ts-ignore
      return addSpaces ? numberWithSpaces(amount + "") : amount + "";
    }
    if (isNaN(amount)) return "";
    amount = parseFloat(amount);
    return addSpaces ? numberWithSpaces(amount.toFixed(2)) : amount.toFixed(2);
  }
  function formatNumberWithPercentage(value, formatAsInteger, addSpaces, toFixedDigits) {
    if (value === null || typeof value === "undefined") return "";
    if (isNaN(value)) return "";
    var isNegative = value < 0;
    value = Math.abs(value);
    var valueOutput;
    if (formatAsInteger && Number.isInteger(value)) {
      valueOutput = addSpaces ? numberWithSpaces(value) : value + "";
    } else {
      value = parseFloat(value);
      valueOutput = addSpaces ? numberWithSpaces(value.toFixed(toFixedDigits != null ? toFixedDigits : 1)) : value.toFixed(toFixedDigits != null ? toFixedDigits : 1);
    }
    return (isNegative ? "- " : "") + valueOutput + " " + "%";
  }
  function strToFloat(amount) {
    amount = amount.replaceAll(",", ".");
    return parseFloat(amount);
  }
  // HELPER FUNCTIONS
  function numberWithSpaces(x) {
    var parts = x.toString().split(".");
    parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, " ");
    return parts.join(".");
  }
  function roundAndFormatNumberWithSpaces(value, maxDecimals) {
    var d = Math.pow(10, maxDecimals);
    value = Math.round(value * d) / d;
    return numberWithSpaces(value);
  }
  // formats number to be displayed as eg. 12k instead of 12000
  function abbreviatedNumber(num, digits) {
    var isNegative = false;
    if (num < 0) {
      isNegative = true;
    }
    num = Math.abs(num);
    var lookup = [{
      value: 1,
      symbol: ""
    }, {
      value: 1e3,
      symbol: "k"
    }, {
      value: 1e6,
      symbol: "M"
    }, {
      value: 1e9,
      symbol: "G"
    }, {
      value: 1e12,
      symbol: "T"
    }, {
      value: 1e15,
      symbol: "P"
    }, {
      value: 1e18,
      symbol: "E"
    }];
    var rx = /\.0+$|(\.[0-9]*[1-9])0+$/;
    var item = lookup.slice().reverse().find(function (item) {
      return num >= item.value;
    });
    return item ? (isNegative ? "-" : "") + (num / item.value).toFixed(digits).replace(rx, "$1") + item.symbol : "0";
  }
  function getPrimeNumbersBetween(min, max) {
    var result = Array(max + 1).fill(0).map(function (_, i) {
      return i;
    });
    for (var i = 2; i <= Math.sqrt(max + 1); i++) {
      for (var j = Math.pow(i, 2); j < max + 1; j += i) delete result[j];
    }
    return Object.values(result.slice(Math.max(min, 2)));
  }
  function getRandomNumberBetween(min, max) {
    return Math.floor(Math.random() * (max - min + 1) + min);
  }
  function getRandomPrimeBetween(min, max) {
    var primes = getPrimeNumbersBetween(min, max);
    return primes[getRandomNumberBetween(0, primes.length - 1)];
  }
  var numberUtils = {
    __proto__: null,
    formatNumberWithCurrency: formatNumberWithCurrency,
    formatWeight: formatWeight,
    formatNumber: formatNumber,
    roundAndFormatNumberWithSpaces: roundAndFormatNumberWithSpaces,
    strToFloat: strToFloat,
    formatNumberWithPercentage: formatNumberWithPercentage,
    abbreviatedNumber: abbreviatedNumber,
    getPrimeNumbersBetween: getPrimeNumbersBetween,
    getRandomNumberBetween: getRandomNumberBetween,
    getRandomPrimeBetween: getRandomPrimeBetween
  };
  function hasRole(user, rolesToContain) {
    if (!user || !user.role) return false;
    var hasRole = false;
    rolesToContain.forEach(function (role) {
      hasRole = hasRole || user.role.name === role;
    });
    return hasRole;
  }
  function getUserPermissions(user) {
    if (!user || !user.role || !user.role.permissions) return [];
    return user.role.permissions;
  }
  function hasAllPermissions(user, permissions) {
    if (!user) return false;
    var userPermissions = getUserPermissions(user);
    var _hasAllPermissions = true;
    permissions.forEach(function (permission) {
      _hasAllPermissions = _hasAllPermissions || !hasPermissionInArray(userPermissions, permission);
    });
    return _hasAllPermissions;
  }
  function hasPermission(user, permission) {
    var userPermissions = getUserPermissions(user);
    return hasPermissionInArray(userPermissions, permission);
  }
  function hasAnyPermission(user, permissions) {
    if (!user) return false;
    var userPermissions = getUserPermissions(user);
    var _hasAnyPermission = false;
    permissions.forEach(function (permission) {
      _hasAnyPermission = _hasAnyPermission || hasPermissionInArray(userPermissions, permission);
    });
    return _hasAnyPermission;
  }
  function hasPermissionInArray(userPermissions, permission) {
    var toCheck = [permission];
    var elements = permission.split("/");
    toCheck.push(elements[0] + "/" + elements[1] + "/*");
    // For endpoint-level wildcard.
    elements = permission.split(":");
    toCheck.push(elements[0] + ":*");
    // For all-wildcard
    toCheck.push("*");
    return hasCommonElement(userPermissions, toCheck);
  }
  // Iterate through each element in the first array and if some of them include the elements in the second array then return true.
  function hasCommonElement(arr1, arr2) {
    return arr1.some(function (item) {
      return arr2.includes(item);
    });
  }
  function getRole(user, roles) {
    var _user$role;
    if (!user) return;
    var rolesFound = roles.filter(function (role) {
      return role.id === user.role_id;
    });
    // If role id does not exist on user
    if (rolesFound.length === 0 && user != null && (_user$role = user.role) != null && _user$role.id) {
      rolesFound = roles.filter(function (role) {
        return role.id === user.role.id;
      });
    }
    if (rolesFound.length > 0) {
      return rolesFound[0];
    }
  }
  function fillRole(user, latestRoleResponse, store) {
    var rolesResponse = latestRoleResponse ? latestRoleResponse : getFromStore(store, "roles");
    if (!rolesResponse) return;
    var roles = rolesResponse.filter(function (role) {
      return role.id === user.role_id;
    });
    if (roles.length > 0) {
      user.role = roles[0];
    }
  }
  var roleUtils = {
    __proto__: null,
    hasRole: hasRole,
    getUserPermissions: getUserPermissions,
    hasAllPermissions: hasAllPermissions,
    hasAnyPermission: hasAnyPermission,
    hasPermissionInArray: hasPermissionInArray,
    hasPermission: hasPermission,
    hasCommonElement: hasCommonElement,
    getRole: getRole,
    fillRole: fillRole
  };
  function formatToSnakeCase(sentence) {
    if (!sentence) return "";
    // @ts-ignore
    return sentence.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g).map(function (x) {
      return x.toLowerCase();
    }).join("_");
  }
  var stringUtils = {
    __proto__: null,
    formatToSnakeCase: formatToSnakeCase
  };
  var _excluded$1 = ["children", "className"], _excluded2 = ["children", "className"];
  function getTableCountString(label, dataArray, lastTableState, totalCount, page, selectedCount) {
    var displayString = '';
    if (selectedCount) {
      displayString = selectedCount + ' selected';
    } else if (dataArray && dataArray.length > 0) {
      var recordsCountFrom = page * lastTableState.pageSize + 1;
      var recordsCountTo = Math.min(totalCount, recordsCountFrom + lastTableState.pageSize - 1);
      if (recordsCountTo === 0 || !recordsCountTo) {
        return React__default.createElement("div", null);
      }
      if (totalCount <= 1 && label.endsWith('s')) {
        label = label.substring(0, label.length - 1);
        if (label.endsWith('ie')) {
          label = label.substring(0, label.length - 2) + 'y';
        }
      }
      var totalCountString = formatNumber(totalCount, true, true);
      if (totalCount >= 50000) {
        totalCountString = '50 000+';
      }
      displayString = "Showing " + recordsCountFrom + (recordsCountFrom !== recordsCountTo ? "\u2013" + recordsCountTo : '') + (" of " + totalCountString + " ") + label;
    } else displayString = '';
    return displayString;
  }
  function getTableCountDivWithDateRangeIndication(label, dataArray, lastTableState, totalCount, page, isLoading, selectedCount, absolute_query, startDate, endDate, absoluteQueryOptions, isBold) {
    if (isBold !== undefined) {
      isBold = true;
    }
    if (!absolute_query) {
      absolute_query = 'date_range';
    }
    if (startDate) {
      startDate = moment(startDate).startOf('day');
    }
    if (endDate) {
      endDate = moment(endDate).endOf('day');
    }
    var displayString = getTableCountString(label, dataArray, lastTableState, totalCount, page, selectedCount);
    if (!displayString) {
      displayString = '0 ' + label;
    }
    var timeRangeString = '';
    if (absolute_query === 'month') {
      timeRangeString = ' for the selected month';
    } else if (absolute_query === 'date_range') {
      // date range
      var duration = moment.duration(moment(endDate).diff(moment(startDate)));
      var days = Math.ceil(duration.asDays());
      var weeks = Math.round(duration.asWeeks());
      var timeCount = days % 7 !== 0 ? days : Math.round(weeks);
      var timeUnit = days % 7 !== 0 ? 'day' : 'week';
      timeRangeString = !endDate || !startDate ? '' : " for the selected " + (timeCount === 1 ? '' : timeCount) + " " + timeUnit + (timeCount === 1 ? '' : 's');
    } else {
      // date period
      try {
        var _absoluteQuery = absolute_query && absoluteQueryOptions.filter(function (o) {
          if (o.value === absolute_query) {
            return true;
          }
          return false;
        });
        timeRangeString = " for the " + _absoluteQuery[0].label.toLowerCase();
      } catch (e) {
        timeRangeString = '';
      }
    }
    return React__default.createElement("div", null, isLoading ? React__default.createElement(Loader.Inline, {
      title: "Loading"
    }) : React__default.createElement("span", {
      className: "no-print"
    }, React__default.createElement("div", {
      className: isBold ? 'font-bold' : ''
    }, displayString, timeRangeString)));
  }
  function getTableCountDiv(label, dataArray, lastTableState, totalCount, page, isLoading, selectedCount) {
    var displayString = getTableCountString(label, dataArray, lastTableState, totalCount, page, selectedCount);
    return React__default.createElement("div", null, isLoading ? React__default.createElement(Loader.Inline, {
      title: "Loading"
    }) : React__default.createElement("span", {
      className: "no-print font-bold"
    }, displayString));
  }
  function linkableTableRow(path, key, queryParams, excludeFirstColFromLink, excludeLastColFromLink) {
    return (function (componentClass, displayName) {
      // @ts-ignore
      var cmp = function cmp(_ref) {
        var children = _ref.children, rest = _objectWithoutPropertiesLoose(_ref, _excluded$1);
        // headings
        if (!rest || !rest[key]) {
          return React__default.createElement("div", Object.assign({
            className: componentClass
          }, rest), children);
        }
        var firstChild = null;
        var lastChild = null;
        if (excludeFirstColFromLink) {
          firstChild = children[0];
          children = children.splice(1, children.length - 1);
        }
        if (excludeLastColFromLink) {
          lastChild = children[children.length - 1];
          children = children.splice(0, children.length - 1);
        }
        // body
        cmp.displayName = displayName;
        return React__default.createElement("div", {
          className: componentClass
        }, firstChild, React__default.createElement(reactRouterDom.Link, Object.assign({
          className: componentClass,
          to: '/' + path + rest[key] + (queryParams ? queryParams : '')
        }, rest), children), lastChild);
      };
      return cmp;
    })('rt-tr', 'Tr');
  }
  function clickableTableRow(key, excludeFirstColFromLink, excludeLastColFromLink, onClickEvent) {
    return (function (componentClass, displayName) {
      // @ts-ignore
      var cmp = function cmp(_ref2) {
        var children = _ref2.children, className = _ref2.className, rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
        // headings
        if (!rest || !className) {
          return React__default.createElement("div", Object.assign({
            className: componentClass
          }, rest), children);
        }
        var lastChild = null;
        var firstChild = null;
        if (excludeFirstColFromLink) {
          firstChild = children[0];
          children = children.splice(1, children.length - 1);
        }
        if (excludeLastColFromLink) {
          lastChild = children[children.length - 1];
          children = children.splice(0, children.length - 1);
        }
        // body
        cmp.displayName = displayName;
        if (typeof onClickEvent === 'function') {
          return React__default.createElement("div", {
            className: 'flex items-center'
          }, firstChild, React__default.createElement("div", Object.assign({
            className: componentClass,
            onClick: function onClick() {
              rest[key] ? onClickEvent(rest[key]) : undefined;
            }
          }, rest), children), lastChild);
        }
        return null;
      };
      return cmp;
    })('rt-tr', 'Tr');
  }
  function isItemVisible(item, visibleItems) {
    return !!visibleItems[item.id];
  }
  var tableUtils = {
    __proto__: null,
    isItemVisible: isItemVisible,
    clickableTableRow: clickableTableRow,
    linkableTableRow: linkableTableRow,
    getTableCountDiv: getTableCountDiv,
    getTableCountDivWithDateRangeIndication: getTableCountDivWithDateRangeIndication,
    getTableCountString: getTableCountString
  };
  function determineTextColorBasedOnBgColor(bgColor) {
    var color = bgColor.charAt(0) === "#" ? bgColor.substring(1, 7) : bgColor;
    var r = parseInt(color.substring(0, 2), 16);
    // hexToR
    var g = parseInt(color.substring(2, 4), 16);
    // hexToG
    var b = parseInt(color.substring(4, 6), 16);
    // hexToB
    return r * 0.299 + g * 0.587 + b * 0.114 > 186 ? "#000" : "#fff";
  }
  var tagUtils = {
    __proto__: null,
    determineTextColorBasedOnBgColor: determineTextColorBasedOnBgColor
  };
  /**
  * Any custom validation functions to be used by React Hook Form
  */
  var emailRegex = /^((([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,})),?;? ?)+$/;
  // Regex to check for valid URL
  var URLRegex = /^(?=.*[a-z])[a-zA-Z0-9()\s.'-]+$/i;
  var contactNumberRegex = /^((([+]{1}[0-9]{10,12})|([0-9]{10}))|[+]?1?\(?\d{3}[\-\)\.\s]?\d{3}[\-\.\s]?\d{4}|[+]?1?\(?\d{4}[\-\)\.\s]?\d{3}[\-\.\s]?\d{4})[-\s\.]*?$/;
  function validateEmail(_x) {
    return _validateEmail.apply(this, arguments);
  }
  function _validateEmail() {
    _validateEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee(value) {
      var valid;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            valid = value.length === 0 || emailRegex.exec(value);
            return _context.abrupt("return", !!valid);
          case 2:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return _validateEmail.apply(this, arguments);
  }
  function validateContactNumber(_x2) {
    return _validateContactNumber.apply(this, arguments);
  }
  function _validateContactNumber() {
    _validateContactNumber = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {
      var regex, valid;
      return _regeneratorRuntime().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            // Number should consist of (possibly) the plus symbol, followed some amount of number values.
            // The amount of numbers can vary due to country codes ranging in length.
            // Accepted length of phone number with no country code is 10.
            regex = /^([+]*[0-9]{10,}|[0-9]{10})$/;
            valid = value.length === 0 || regex.exec(value);
            return _context2.abrupt("return", Boolean(valid));
          case 3:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return _validateContactNumber.apply(this, arguments);
  }
  var validationUtils = {
    __proto__: null,
    validateEmail: validateEmail,
    validateContactNumber: validateContactNumber,
    emailRegex: emailRegex,
    contactNumberRegex: contactNumberRegex,
    URLRegex: URLRegex
  };
  // Please do not use types off of a default export module or else Storybook Docs will suffer.
  // see: https://github.com/storybookjs/storybook/issues/9556
  /**
  * A custom Thing component. Neat!
  */
  var Thing = function Thing(_ref) {
    var children = _ref.children;
    return React__default.createElement("div", null, children || "the snozzberries taste like snozzberries");
  };
  _c93 = Thing;
  exports.Accordion = Accordion;
  exports.Banner = Banner;
  exports.Button = Button;
  exports.Card = Card;
  exports.Checkbox = Checkbox;
  exports.Confirm = Confirm;
  exports.CopyText = CopyText;
  exports.Counter = Counter;
  exports.CustomTable = CustomTable;
  exports.DatePicker = DatePicker;
  exports.DateRange = DateRange;
  exports.Dropdown = Dropdown;
  exports.FiltersPanel = FiltersPanel;
  exports.GroupedSelect = GroupedSelect;
  exports.IconWithBackground = IconWithBackground;
  exports.InfoButton = InfoButton;
  exports.InfoPopover = InfoPopover;
  exports.Input = Input;
  exports.Label = Label;
  exports.Loader = Loader;
  exports.Message = Message;
  exports.Modal = Modal$1;
  exports.ModalActionsPanel = ModalActionsPanel;
  exports.MonthPicker = MonthPicker;
  exports.NavItem = NavItem;
  exports.NewVersionAvailable = NewVersionAvailable;
  exports.PageActionsPanel = PageActionsPanel;
  exports.PageHeading = PageHeading;
  exports.Pagination = Pagination;
  exports.Radio = Radio;
  exports.ResponsiveRow = ResponsiveRow;
  exports.SavePanel = SavePanel;
  exports.SavePanelContainer = SavePanelContainer;
  exports.SavingOverlay = SavingOverlay;
  exports.SectionActionsPanel = SectionActionsPanel;
  exports.SectionHeading = SectionHeading;
  exports.Select = Select;
  exports.Switch = Switch;
  exports.TableActionsPanel = TableActionsPanel;
  exports.Tabs = Tabs;
  exports.Textarea = Textarea;
  exports.Thing = Thing;
  exports.WeekdaySelect = WeekdaySelect;
  exports.addressUtils = addressUtils;
  exports.cacheUtils = cacheUtils;
  exports.createStore = createStore;
  exports.dateUtils = dateUtils;
  exports.generalUtils = generalUtils;
  exports.interfaces = index;
  exports.mapUtils = mapUtils;
  exports.navUtils = navUtils;
  exports.numberUtils = numberUtils;
  exports.roleUtils = roleUtils;
  exports.stringUtils = stringUtils;
  exports.tableUtils = tableUtils;
  exports.tagUtils = tagUtils;
  exports.useDebounce = useDebounce;
  exports.useFilters = useFilters;
  exports.useGetPagination = useGetPagination;
  exports.useMediaQuery = useMediaQuery;
  exports.useOnClickOutside = useOnClickOutside;
  exports.usePrevious = usePrevious;
  exports.useSignedRequest = useSignedRequest;
  exports.useStore = useStore;
  exports.useTabs = useTabs;
  exports.validationUtils = validationUtils;
  exports.withStore = withStore;
  var _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c10, _c11, _c12, _c13, _c14, _c15, _c16, _c17, _c18, _c19, _c20, _c21, _c22, _c23, _c24, _c25, _c26, _c27, _c28, _c29, _c30, _c31, _c32, _c33, _c34, _c35, _c36, _c37, _c38, _c39, _c40, _c41, _c42, _c43, _c44, _c45, _c46, _c47, _c48, _c49, _c50, _c51, _c52, _c53, _c54, _c55, _c56, _c57, _c58, _c59, _c60, _c61, _c62, _c63, _c64, _c65, _c66, _c67, _c68, _c69, _c70, _c71, _c72, _c73, _c74, _c75, _c76, _c77, _c78, _c79, _c80, _c81, _c82, _c83, _c84, _c85, _c86, _c87, _c88, _c89, _c90, _c91, _c92, _c93;
  $RefreshReg$(_c, "React__default");
  $RefreshReg$(_c2, "ReactDOM__default");
  $RefreshReg$(_c3, "InfoButton");
  $RefreshReg$(_c4, "Portal");
  $RefreshReg$(_c5, "Switch");
  $RefreshReg$(_c6, "Success");
  $RefreshReg$(_c7, "Error$1");
  $RefreshReg$(_c8, "Warning");
  $RefreshReg$(_c9, "Info");
  $RefreshReg$(_c10, "Instruction");
  $RefreshReg$(_c11, "BaseMessage");
  $RefreshReg$(_c12, "IsJsonString");
  $RefreshReg$(_c13, "Page");
  $RefreshReg$(_c14, "Modal");
  $RefreshReg$(_c15, "Inline");
  $RefreshReg$(_c16, "BaseLoader");
  $RefreshReg$(_c17, "Primary");
  $RefreshReg$(_c18, "Secondary");
  $RefreshReg$(_c19, "Tertiary");
  $RefreshReg$(_c20, "Danger");
  $RefreshReg$(_c21, "Icon");
  $RefreshReg$(_c22, "Cancel");
  $RefreshReg$(_c23, "Link");
  $RefreshReg$(_c24, "LinkDanger");
  $RefreshReg$(_c25, "BaseLink");
  $RefreshReg$(_c26, "BaseButton");
  $RefreshReg$(_c27, "ButtonsPanel");
  $RefreshReg$(_c28, "Download");
  $RefreshReg$(_c29, "Close");
  $RefreshReg$(_c30, "Base");
  $RefreshReg$(_c31, "Host");
  $RefreshReg$(_c32, "Small");
  $RefreshReg$(_c33, "Medium");
  $RefreshReg$(_c34, "Large");
  $RefreshReg$(_c35, "ButtonsPanel$1");
  $RefreshReg$(_c36, "Confirm");
  $RefreshReg$(_c37, "Accordion");
  $RefreshReg$(_c38, "Banner");
  $RefreshReg$(_c39, "Card");
  $RefreshReg$(_c40, "Checkbox");
  $RefreshReg$(_c41, "CopyText");
  $RefreshReg$(_c42, "Label");
  $RefreshReg$(_c43, "Input");
  $RefreshReg$(_c44, "Counter");
  $RefreshReg$(_c45, "GroupedSelect");
  $RefreshReg$(_c46, "Select");
  $RefreshReg$(_c47, "Pagination");
  $RefreshReg$(_c48, "CustomTableRow");
  $RefreshReg$(_c49, "PageHeading");
  $RefreshReg$(_c50, "SectionHeading");
  $RefreshReg$(_c51, "TableActionsPanel");
  $RefreshReg$(_c52, "SectionActionsPanel");
  $RefreshReg$(_c53, "PageActionsPanel");
  $RefreshReg$(_c54, "ModalActionsPanel");
  $RefreshReg$(_c55, "FiltersPanel");
  $RefreshReg$(_c56, "DropdownMenu");
  $RefreshReg$(_c57, "ContextMenu");
  $RefreshReg$(_c58, "MenuItem");
  $RefreshReg$(_c59, "MenuItemContainer");
  $RefreshReg$(_c60, "MenuHeading");
  $RefreshReg$(_c61, "CustomTable");
  $RefreshReg$(_c62, "DatePicker");
  $RefreshReg$(_c63, "Calendar$React__default.forwardRef");
  $RefreshReg$(_c64, "Calendar");
  $RefreshReg$(_c65, "TimeSelection");
  $RefreshReg$(_c66, "DateSelection");
  $RefreshReg$(_c67, "MonthSelection");
  $RefreshReg$(_c68, "YearSelection");
  $RefreshReg$(_c69, "CalendarButton");
  $RefreshReg$(_c70, "MonthPicker");
  $RefreshReg$(_c71, "Calendar$1$React__default.forwardRef");
  $RefreshReg$(_c72, "Calendar$1");
  $RefreshReg$(_c73, "MonthSelection$1");
  $RefreshReg$(_c74, "YearSelection$1");
  $RefreshReg$(_c75, "CalendarButton$1");
  $RefreshReg$(_c76, "DateRange");
  $RefreshReg$(_c77, "IconWithBackground");
  $RefreshReg$(_c78, "InfoPopover");
  $RefreshReg$(_c79, "NavItem");
  $RefreshReg$(_c80, "NewVersionAvailable");
  $RefreshReg$(_c81, "Button$1");
  $RefreshReg$(_c82, "Group");
  $RefreshReg$(_c83, "ResponsiveRow");
  $RefreshReg$(_c84, "Portal$1");
  $RefreshReg$(_c85, "SavingOverlay");
  $RefreshReg$(_c86, "SavePanel");
  $RefreshReg$(_c87, "SavePanelContainer");
  $RefreshReg$(_c88, "Tab");
  $RefreshReg$(_c89, "Primary$1");
  $RefreshReg$(_c90, "Secondary$1");
  $RefreshReg$(_c91, "Textarea");
  $RefreshReg$(_c92, "WeekdaySelect");
  $RefreshReg$(_c93, "Thing");
  helpers.postlude(module);
} finally {
  window.$RefreshReg$ = prevRefreshReg;
  window.$RefreshSig$ = prevRefreshSig;
}
